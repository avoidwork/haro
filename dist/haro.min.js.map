{"version":3,"file":"haro.min.js","sources":["../src/constants.js","../src/uuid.js","../src/haro.js"],"sourcesContent":["export const STRING_COMMA = \",\";\r\nexport const STRING_EMPTY = \"\";\r\nexport const STRING_PIPE = \"|\";\r\nexport const STRING_DOUBLE_PIPE = \"||\";\r\nexport const STRING_A = \"a\";\r\nexport const STRING_B = \"b\";\r\nexport const STRING_DEL = \"del\";\r\nexport const STRING_FUNCTION = \"function\";\r\nexport const STRING_INDEXES = \"indexes\";\r\nexport const STRING_INVALID_FIELD = \"Invalid field\";\r\nexport const STRING_INVALID_TYPE = \"Invalid type\";\r\nexport const STRING_OBJECT = \"object\";\r\nexport const STRING_RECORD_NOT_FOUND = \"Record not found\";\r\nexport const STRING_RECORDS = \"records\";\r\nexport const STRING_REGISTRY = \"registry\";\r\nexport const STRING_SET = \"set\";\r\nexport const STRING_SIZE = \"size\";\r\nexport const INT_0 = 0;\r\nexport const INT_1 = 1;\r\nexport const INT_3 = 3;\r\nexport const INT_4 = 4;\r\nexport const INT_8 = 8;\r\nexport const INT_9 = 9;\r\nexport const INT_16 = 16;","import {INT_0, INT_1, INT_16, INT_3, INT_4, INT_8, INT_9, STRING_A, STRING_B, STRING_OBJECT,} from \"./constants.js\";\r\n\r\n/* istanbul ignore next */\r\nconst r = [INT_8, INT_9, STRING_A, STRING_B];\r\n\r\n/* istanbul ignore next */\r\nfunction s () {\r\n\treturn ((Math.random() + INT_1) * 0x10000 | INT_0).toString(INT_16).substring(INT_1);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction randomUUID () {\r\n\treturn `${s()}${s()}-${s()}-4${s().slice(INT_0, INT_3)}-${r[Math.floor(Math.random() * INT_4)]}${s().slice(INT_0, INT_3)}-${s()}${s()}${s()}`;\r\n}\r\n\r\nexport const uuid = typeof crypto === STRING_OBJECT ? crypto.randomUUID.bind(crypto) : randomUUID;\r\n","import {uuid} from \"./uuid.js\";\r\nimport {\r\n\tINT_0,\r\n\tSTRING_A,\r\n\tSTRING_COMMA,\r\n\tSTRING_DEL,\r\n\tSTRING_DOUBLE_PIPE,\r\n\tSTRING_EMPTY,\r\n\tSTRING_FUNCTION,\r\n\tSTRING_INDEXES,\r\n\tSTRING_INVALID_FIELD,\r\n\tSTRING_INVALID_TYPE,\r\n\tSTRING_PIPE,\r\n\tSTRING_RECORD_NOT_FOUND,\r\n\tSTRING_RECORDS,\r\n\tSTRING_REGISTRY,\r\n\tSTRING_SET,\r\n\tSTRING_SIZE\r\n} from \"./constants.js\";\r\n\r\nexport class Haro {\r\n\tconstructor ({delimiter = STRING_PIPE, id = uuid(), index = [], key = STRING_EMPTY, versioning = false} = {}) {\r\n\t\tthis.data = new Map();\r\n\t\tthis.delimiter = delimiter;\r\n\t\tthis.id = id;\r\n\t\tthis.index = index;\r\n\t\tthis.indexes = new Map();\r\n\t\tthis.key = key;\r\n\t\tthis.versions = new Map();\r\n\t\tthis.versioning = versioning;\r\n\r\n\t\tObject.defineProperty(this, STRING_REGISTRY, {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: () => Array.from(this.data.keys())\r\n\t\t});\r\n\r\n\t\tObject.defineProperty(this, STRING_SIZE, {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: () => this.data.size\r\n\t\t});\r\n\r\n\t\treturn this.reindex();\r\n\t}\r\n\r\n\tbatch (args, type = STRING_SET) {\r\n\t\tconst fn = type === STRING_DEL ? i => this.del(i, true) : i => this.set(null, i, true, true);\r\n\r\n\t\treturn this.onbatch(this.beforeBatch(args, type).map(fn), type);\r\n\t}\r\n\r\n\tbeforeBatch (arg) {\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tbeforeClear () {\r\n\t}\r\n\r\n\tbeforeDelete () {\r\n\t}\r\n\r\n\tbeforeSet () {\r\n\t}\r\n\r\n\tclear () {\r\n\t\tthis.beforeClear();\r\n\t\tthis.data.clear();\r\n\t\tthis.indexes.clear();\r\n\t\tthis.versions.clear();\r\n\t\tthis.reindex().onclear();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tclone (arg) {\r\n\t\treturn JSON.parse(JSON.stringify(arg, null, INT_0));\r\n\t}\r\n\r\n\tdel (key, batch = false) {\r\n\t\tif (this.has(key) === false) {\r\n\t\t\tthrow new Error(STRING_RECORD_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tconst og = this.get(key, true);\r\n\r\n\t\tthis.beforeDelete(key, batch);\r\n\t\tthis.delIndex(this.index, this.indexes, this.delimiter, key, og);\r\n\t\tthis.data.delete(key);\r\n\t\tthis.ondelete(key, batch);\r\n\r\n\t\tif (this.versioning) {\r\n\t\t\tthis.versions.delete(key);\r\n\t\t}\r\n\t}\r\n\r\n\tdelIndex (index, indexes, delimiter, key, data) {\r\n\t\tindex.forEach(i => {\r\n\t\t\tconst idx = indexes.get(i);\r\n\r\n\t\t\tthis.each(i.includes(delimiter) ? this.indexKeys(i, delimiter, data) : Array.isArray(data[i]) ? data[i] : [data[i]], value => {\r\n\t\t\t\tif (idx.has(value)) {\r\n\t\t\t\t\tconst o = idx.get(value);\r\n\r\n\t\t\t\t\to.delete(key);\r\n\r\n\t\t\t\t\tif (o.size === INT_0) {\r\n\t\t\t\t\t\tidx.delete(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tdump (type = STRING_RECORDS) {\r\n\t\tlet result;\r\n\r\n\t\tif (type === STRING_RECORDS) {\r\n\t\t\tresult = Array.from(this.entries());\r\n\t\t} else {\r\n\t\t\tresult = Array.from(this.indexes).map(i => {\r\n\t\t\t\ti[1] = Array.from(i[1]).map(ii => {\r\n\t\t\t\t\tii[1] = Array.from(ii[1]);\r\n\r\n\t\t\t\t\treturn ii;\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn i;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\teach (arr = [], fn) {\r\n\t\tfor (const [idx, value] of arr.entries()) {\r\n\t\t\tfn(value, idx);\r\n\t\t}\r\n\r\n\t\treturn arr;\r\n\t}\r\n\r\n\tentries () {\r\n\t\treturn this.data.entries();\r\n\t}\r\n\r\n\tfind (where = {}, raw = false) {\r\n\t\tconst key = Object.keys(where).sort((a, b) => a.localeCompare(b)).join(this.delimiter),\r\n\t\t\tindex = this.indexes.get(key) ?? new Map();\r\n\t\tlet result = [];\r\n\r\n\t\tif (index.size > 0) {\r\n\t\t\tconst keys = this.indexKeys(key, this.delimiter, where);\r\n\r\n\t\t\tresult = Array.from(keys.reduce((a, v) => {\r\n\t\t\t\tif (index.has(v)) {\r\n\t\t\t\t\tindex.get(v).forEach(k => a.add(k));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn a;\r\n\t\t\t}, new Set())).map(i => this.get(i, raw));\r\n\t\t}\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\tfilter (fn = () => void 0, raw = false) {\r\n\t\tconst x = raw ? (k, v) => v : (k, v) => Object.freeze([k, Object.freeze(v)]),\r\n\t\t\tresult = this.reduce((a, v, k, ctx) => {\r\n\t\t\t\tif (fn.call(ctx, v)) {\r\n\t\t\t\t\ta.push(x(k, v));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn a;\r\n\t\t\t}, []);\r\n\r\n\t\treturn raw ? result : Object.freeze(result);\r\n\t}\r\n\r\n\tforEach (fn, ctx) {\r\n\t\tthis.data.forEach((value, key) => fn(this.clone(value), this.clone(key)), ctx ?? this.data);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget (key, raw = false) {\r\n\t\tconst result = this.clone(this.data.get(key) ?? null);\r\n\r\n\t\treturn raw ? result : this.list(key, result);\r\n\t}\r\n\r\n\thas (key) {\r\n\t\treturn this.data.has(key);\r\n\t}\r\n\r\n\tindexKeys (arg = STRING_EMPTY, delimiter = STRING_PIPE, data = {}) {\r\n\t\treturn arg.split(delimiter).reduce((a, li, lidx) => {\r\n\t\t\tconst result = [];\r\n\r\n\t\t\t(Array.isArray(data[li]) ? data[li] : [data[li]]).forEach(lli => lidx === INT_0 ? result.push(lli) : a.forEach(x => result.push(`${x}${delimiter}${lli}`)));\r\n\r\n\t\t\treturn result;\r\n\t\t}, []);\r\n\t}\r\n\r\n\tkeys () {\r\n\t\treturn this.data.keys();\r\n\t}\r\n\r\n\tlimit (offset = INT_0, max = INT_0, raw = false) {\r\n\t\tconst result = this.registry.slice(offset, offset + max).map(i => this.get(i, raw));\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\tlist (...args) {\r\n\t\treturn Object.freeze(args.map(i => Object.freeze(i)));\r\n\t}\r\n\r\n\tmap (fn, raw = false) {\r\n\t\tconst result = [];\r\n\r\n\t\tthis.forEach((value, key) => result.push(fn(value, key)));\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\tmerge (a = {}, b = {}, override = false) {\r\n\t\tif (a instanceof Object && b instanceof Object) {\r\n\t\t\tthis.each(Object.keys(b), i => {\r\n\t\t\t\tif (a[i] instanceof Object && b[i] instanceof Object) {\r\n\t\t\t\t\ta[i] = this.merge(a[i], b[i]);\r\n\t\t\t\t} else if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n\t\t\t\t\ta[i] = override ? b[i] : a[i].concat(b[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ta[i] = b[i];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (Array.isArray(a) && Array.isArray(b)) {\r\n\t\t\ta = override ? b : a.concat(b);\r\n\t\t} else {\r\n\t\t\ta = b;\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\t}\r\n\r\n\tonbatch (arg) {\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tonclear () {\r\n\t}\r\n\r\n\tondelete () {\r\n\t}\r\n\r\n\tonoverride () {\r\n\t}\r\n\r\n\tonset () {\r\n\t}\r\n\r\n\toverride (data, type = STRING_RECORDS) {\r\n\t\tconst result = true;\r\n\r\n\t\tif (type === STRING_INDEXES) {\r\n\t\t\tthis.indexes = new Map(data.map(i => [i[0], new Map(i[1].map(ii => [ii[0], new Set(ii[1])]))]));\r\n\t\t} else if (type === STRING_RECORDS) {\r\n\t\t\tthis.indexes.clear();\r\n\t\t\tthis.data = new Map(data);\r\n\t\t} else {\r\n\t\t\tthrow new Error(STRING_INVALID_TYPE);\r\n\t\t}\r\n\r\n\t\tthis.onoverride(type);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\treduce (fn, accumulator, raw = false) {\r\n\t\tlet a = accumulator ?? this.data.keys().next().value;\r\n\r\n\t\tthis.forEach((v, k) => {\r\n\t\t\ta = fn(a, v, k, this, raw);\r\n\t\t}, this);\r\n\r\n\t\treturn a;\r\n\t}\r\n\r\n\treindex (index) {\r\n\t\tconst indices = index ? [index] : this.index;\r\n\r\n\t\tif (index && this.index.includes(index) === false) {\r\n\t\t\tthis.index.push(index);\r\n\t\t}\r\n\r\n\t\tthis.each(indices, i => this.indexes.set(i, new Map()));\r\n\t\tthis.forEach((data, key) => this.each(indices, i => this.setIndex(this.index, this.indexes, this.delimiter, key, data, i)));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsearch (value, index, raw = false) {\r\n\t\tconst result = new Map(),\r\n\t\t\tfn = typeof value === STRING_FUNCTION,\r\n\t\t\trgex = value && typeof value.test === STRING_FUNCTION;\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.each(index ? Array.isArray(index) ? index : [index] : this.index, i => {\r\n\t\t\t\tlet idx = this.indexes.get(i);\r\n\r\n\t\t\t\tif (idx) {\r\n\t\t\t\t\tidx.forEach((lset, lkey) => {\r\n\t\t\t\t\t\tswitch (true) {\r\n\t\t\t\t\t\t\tcase fn && value(lkey, i):\r\n\t\t\t\t\t\t\tcase rgex && value.test(Array.isArray(lkey) ? lkey.join(STRING_COMMA) : lkey):\r\n\t\t\t\t\t\t\tcase lkey === value:\r\n\t\t\t\t\t\t\t\tlset.forEach(key => {\r\n\t\t\t\t\t\t\t\t\tif (result.has(key) === false && this.has(key)) {\r\n\t\t\t\t\t\t\t\t\t\tresult.set(key, this.get(key, raw));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tvoid 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn raw ? Array.from(result.values()) : this.list(...Array.from(result.values()));\r\n\t}\r\n\r\n\tset (key = null, data = {}, batch = false, override = false) {\r\n\t\tif (key === null) {\r\n\t\t\tkey = data[this.key] ?? uuid();\r\n\t\t}\r\n\r\n\t\tlet x = {...data, [this.key]: key};\r\n\r\n\t\tthis.beforeSet(key, x, batch, override);\r\n\r\n\t\tif (this.has(key) === false) {\r\n\t\t\tif (this.versioning) {\r\n\t\t\t\tthis.versions.set(key, new Set());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet og = this.get(key, true);\r\n\t\t\tthis.delIndex(this.index, this.indexes, this.delimiter, key, og);\r\n\r\n\t\t\tif (this.versioning) {\r\n\t\t\t\tthis.versions.get(key).add(Object.freeze(this.clone(og)));\r\n\t\t\t}\r\n\r\n\t\t\tif (override === false) {\r\n\t\t\t\tx = this.merge(this.clone(og), x);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.data.set(key, x);\r\n\t\tthis.setIndex(this.index, this.indexes, this.delimiter, key, x, null);\r\n\t\tlet result = this.get(key);\r\n\t\tthis.onset(result, batch);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetIndex (index, indexes, delimiter, key, data, indice) {\r\n\t\tthis.each(indice === null ? index : [indice], i => {\r\n\t\t\tconst lindex = indexes.get(i);\r\n\r\n\t\t\tif (i.includes(delimiter)) {\r\n\t\t\t\tthis.each(this.indexKeys(i, delimiter, data), c => {\r\n\t\t\t\t\tif (lindex.has(c) === false) {\r\n\t\t\t\t\t\tlindex.set(c, new Set());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlindex.get(c).add(key);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.each(Array.isArray(data[i]) ? data[i] : [data[i]], d => {\r\n\t\t\t\t\tif (lindex.has(d) === false) {\r\n\t\t\t\t\t\tlindex.set(d, new Set());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlindex.get(d).add(key);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsort (fn, frozen = true) {\r\n\t\treturn frozen ? Object.freeze(this.limit(INT_0, this.data.size, true).sort(fn).map(i => Object.freeze(i))) : this.limit(INT_0, this.data.size, true).sort(fn);\r\n\t}\r\n\r\n\tsortBy (index = STRING_EMPTY, raw = false) {\r\n\t\tif (index === STRING_EMPTY) {\r\n\t\t\tthrow new Error(STRING_INVALID_FIELD)\r\n\t\t}\r\n\r\n\t\tconst result = [],\r\n\t\t\tkeys = [];\r\n\r\n\t\tif (this.indexes.has(index) === false) {\r\n\t\t\tthis.reindex(index);\r\n\t\t}\r\n\r\n\t\tconst lindex = this.indexes.get(index);\r\n\r\n\t\tlindex.forEach((idx, key) => keys.push(key));\r\n\t\tthis.each(keys.sort(), i => lindex.get(i).forEach(key => result.push(this.get(key, raw))));\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\ttoArray (frozen = true) {\r\n\t\tconst result = Array.from(this.data.values());\r\n\r\n\t\tif (frozen) {\r\n\t\t\tthis.each(result, i => Object.freeze(i));\r\n\t\t\tObject.freeze(result);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tvalues () {\r\n\t\treturn this.data.values();\r\n\t}\r\n\r\n\twhere (predicate = {}, raw = false, op = STRING_DOUBLE_PIPE) {\r\n\t\tconst keys = this.index.filter(i => i in predicate);\r\n\r\n\t\treturn keys.length > INT_0 ? this.filter(new Function(STRING_A, `return (${keys.map(i => {\r\n\t\t\tlet result;\r\n\r\n\t\t\tif (Array.isArray(predicate[i])) {\r\n\t\t\t\tresult = `Array.isArray(a['${i}']) ? ${predicate[i].map(arg => `a['${i}'].includes(${typeof arg === \"string\" ? `'${arg}'` : arg})`).join(` ${op} `)} : (${predicate[i].map(arg => `a['${i}'] === ${typeof arg === \"string\" ? `'${arg}'` : arg}`).join(` ${op} `)})`;\r\n\t\t\t} else if (predicate[i] instanceof RegExp) {\r\n\t\t\t\tresult = `Array.isArray(a['${i}']) ? a['${i}'].filter(i => ${predicate[i]}.test(a['${i}'])).length > 0 : ${predicate[i]}.test(a['${i}'])`;\r\n\t\t\t} else {\r\n\t\t\t\tconst arg = typeof predicate[i] === \"string\" ? `'${predicate[i]}'` : predicate[i];\r\n\r\n\t\t\t\tresult = `Array.isArray(a['${i}']) ? a['${i}'].includes(${arg}) : a['${i}'] === ${arg}`;\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}).join(\") && (\")});`), raw) : [];\r\n\t}\r\n}\r\n\r\nexport function haro (data = null, config = {}) {\r\n\tconst obj = new Haro(config);\r\n\r\n\tif (Array.isArray(data)) {\r\n\t\tobj.batch(data, STRING_SET);\r\n\t}\r\n\r\n\treturn obj;\r\n}\r\n"],"names":["STRING_FUNCTION","STRING_RECORDS","INT_0","INT_1","INT_16","r","s","Math","random","toString","substring","uuid","crypto","randomUUID","bind","slice","floor","Haro","constructor","delimiter","id","index","key","versioning","this","data","Map","indexes","versions","Object","defineProperty","enumerable","get","Array","from","keys","size","reindex","batch","args","type","fn","i","del","set","onbatch","beforeBatch","map","arg","beforeClear","beforeDelete","beforeSet","clear","onclear","clone","JSON","parse","stringify","has","Error","og","delIndex","delete","ondelete","forEach","idx","each","includes","indexKeys","isArray","value","o","dump","result","entries","ii","arr","find","where","raw","sort","a","b","localeCompare","join","reduce","v","k","add","Set","list","filter","x","freeze","ctx","call","push","split","li","lidx","lli","limit","offset","max","registry","merge","override","concat","onoverride","onset","accumulator","next","indices","setIndex","search","rgex","test","lset","lkey","values","indice","lindex","c","d","frozen","sortBy","toArray","predicate","op","length","Function","RegExp","haro","config","obj"],"mappings":"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"}