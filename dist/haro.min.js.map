{"version":3,"file":"haro.min.js","sources":["../src/errors.js","../src/data-types.js","../src/field-constraint.js","../src/schema.js","../src/config-validator.js","../src/constraints.js","../src/constants.js","../src/record.js","../src/index-manager.js","../src/version-manager.js","../src/transaction-operation.js","../src/transaction-individual.js","../src/lock-manager.js","../src/transaction-statistics.js","../src/key-relationship-analyzer.js","../src/deadlock-detector.js","../src/isolation-validator.js","../src/transaction-manager.js","../src/query-optimizer.js","../src/immutable-store.js","../src/data-stream.js","../src/storage-manager.js","../src/crud-manager.js","../src/query-manager.js","../src/batch-manager.js","../src/stream-manager.js","../src/statistics-manager.js","../src/lifecycle-manager.js","../src/haro.js"],"sourcesContent":["/**\n * Base error class for all Haro errors\n */\nexport class HaroError extends Error {\n\t/**\n\t * @param {string} message - Error message\n\t * @param {string} [code] - Error code for programmatic handling\n\t * @param {*} [context] - Additional context about the error\n\t */\n\tconstructor (message, code, context) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tthis.code = code;\n\t\tthis.context = context;\n\t\tthis.timestamp = new Date().toISOString();\n\n\t\t// Ensure proper stack trace\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n\n\t/**\n\t * Convert error to JSON for serialization\n\t * @returns {Object} Serializable error object\n\t */\n\ttoJSON () {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tmessage: this.message,\n\t\t\tcode: this.code,\n\t\t\tcontext: this.context,\n\t\t\ttimestamp: this.timestamp,\n\t\t\tstack: this.stack\n\t\t};\n\t}\n}\n\n/**\n * Validation errors for invalid data or configuration\n */\nexport class ValidationError extends HaroError {\n\tconstructor (message, field, value) {\n\t\tsuper(message, \"VALIDATION_ERROR\", { field, value });\n\t}\n}\n\n/**\n * Record not found errors\n */\nexport class RecordNotFoundError extends HaroError {\n\tconstructor (key, storeName) {\n\t\tsuper(`Record with key '${key}' not found${storeName ? ` in store '${storeName}'` : \"\"}`, \"RECORD_NOT_FOUND\", { key, storeName });\n\t}\n}\n\n/**\n * Index-related errors\n */\nexport class IndexError extends HaroError {\n\tconstructor (message, indexName, operation) {\n\t\tsuper(message, \"INDEX_ERROR\", { indexName, operation });\n\t}\n}\n\n/**\n * Configuration errors\n */\nexport class ConfigurationError extends HaroError {\n\tconstructor (message, configKey, configValue) {\n\t\tsuper(message, \"CONFIGURATION_ERROR\", { configKey, configValue });\n\t}\n}\n\n/**\n * Query errors for invalid queries or operations\n */\nexport class QueryError extends HaroError {\n\tconstructor (message, query, operation) {\n\t\tsuper(message, \"QUERY_ERROR\", { query, operation });\n\t}\n}\n\n/**\n * Transaction errors\n */\nexport class TransactionError extends HaroError {\n\tconstructor (message, transactionId, operation) {\n\t\tsuper(message, \"TRANSACTION_ERROR\", { transactionId, operation });\n\t}\n}\n\n/**\n * Version management errors\n */\nexport class VersionError extends HaroError {\n\tconstructor (message, key, version) {\n\t\tsuper(message, \"VERSION_ERROR\", { key, version });\n\t}\n}\n\n/**\n * Type constraint errors\n */\nexport class TypeConstraintError extends HaroError {\n\tconstructor (message, expected, actual, field) {\n\t\tsuper(message, \"TYPE_CONSTRAINT_ERROR\", { expected, actual, field });\n\t}\n}\n\n/**\n * Concurrency errors for multi-threaded access\n */\nexport class ConcurrencyError extends HaroError {\n\tconstructor (message, resource, operation) {\n\t\tsuper(message, \"CONCURRENCY_ERROR\", { resource, operation });\n\t}\n}\n\n/**\n * Error recovery utilities\n */\nexport class ErrorRecovery {\n\t/**\n\t * Determine if an error is recoverable\n\t * @param {Error} error - Error to analyze\n\t * @returns {boolean} True if error is recoverable\n\t */\n\tstatic isRecoverable (error) {\n\t\tif (!(error instanceof HaroError)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst recoverableCodes = [\n\t\t\t\"RECORD_NOT_FOUND\",\n\t\t\t\"VALIDATION_ERROR\",\n\t\t\t\"QUERY_ERROR\",\n\t\t\t\"TYPE_CONSTRAINT_ERROR\"\n\t\t];\n\n\t\treturn recoverableCodes.includes(error.code);\n\t}\n\n\t/**\n\t * Get suggested recovery actions for an error\n\t * @param {HaroError} error - Error to get recovery actions for\n\t * @returns {string[]} Array of suggested recovery actions\n\t */\n\tstatic getRecoveryActions (error) {\n\t\tif (!(error instanceof HaroError)) {\n\t\t\treturn [\"Check error details and retry\"];\n\t\t}\n\n\t\tswitch (error.code) {\n\t\t\tcase \"RECORD_NOT_FOUND\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify the record key is correct\",\n\t\t\t\t\t\"Check if record was deleted\",\n\t\t\t\t\t\"Use has() method to check existence before get()\"\n\t\t\t\t];\n\n\t\t\tcase \"VALIDATION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Check data types match expected schema\",\n\t\t\t\t\t\"Verify required fields are present\",\n\t\t\t\t\t\"Validate field constraints\"\n\t\t\t\t];\n\n\t\t\tcase \"INDEX_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify index exists before querying\",\n\t\t\t\t\t\"Check index configuration\",\n\t\t\t\t\t\"Try reindexing the affected field\"\n\t\t\t\t];\n\n\t\t\tcase \"CONFIGURATION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Review configuration parameters\",\n\t\t\t\t\t\"Check for typos in configuration keys\",\n\t\t\t\t\t\"Refer to documentation for valid options\"\n\t\t\t\t];\n\n\t\t\tcase \"QUERY_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify query syntax is correct\",\n\t\t\t\t\t\"Check if indexed fields are being used\",\n\t\t\t\t\t\"Simplify complex queries\"\n\t\t\t\t];\n\n\t\t\tcase \"TRANSACTION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Retry the transaction\",\n\t\t\t\t\t\"Check for concurrent modifications\",\n\t\t\t\t\t\"Reduce transaction scope\"\n\t\t\t\t];\n\n\t\t\tcase \"TYPE_CONSTRAINT_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Check data types match schema\",\n\t\t\t\t\t\"Convert data to expected type\",\n\t\t\t\t\t\"Update type constraints if needed\"\n\t\t\t\t];\n\n\t\t\tdefault:\n\t\t\t\treturn [\"Check error details and retry\"];\n\t\t}\n\t}\n\n\t/**\n\t * Create a recovery strategy for an error\n\t * @param {HaroError} error - Error to create strategy for\n\t * @returns {Object} Recovery strategy object\n\t */\n\tstatic createRecoveryStrategy (error) {\n\t\treturn {\n\t\t\terror,\n\t\t\tisRecoverable: this.isRecoverable(error),\n\t\t\tactions: this.getRecoveryActions(error),\n\t\t\tretryable: [\"CONCURRENCY_ERROR\", \"TRANSACTION_ERROR\"].includes(error.code),\n\t\t\tbackoffMs: error.code === \"CONCURRENCY_ERROR\" ? 100 : 0\n\t\t};\n\t}\n}\n","/**\n * Data type definitions and type detection utilities\n */\n\n/**\n * Type definitions for validation\n */\nexport const DataTypes = {\n\tSTRING: \"string\",\n\tNUMBER: \"number\",\n\tBOOLEAN: \"boolean\",\n\tOBJECT: \"object\",\n\tARRAY: \"array\",\n\tDATE: \"date\",\n\tUUID: \"uuid\",\n\tEMAIL: \"email\",\n\tURL: \"url\",\n\tANY: \"any\"\n};\n\n/**\n * Type detection utilities\n */\nexport class TypeDetector {\n\t/**\n\t * Get the type of a value\n\t * @param {*} value - Value to check\n\t * @returns {string} Type string\n\t */\n\tstatic getValueType (value) {\n\t\tif (value === null) return \"null\";\n\t\tif (Array.isArray(value)) return DataTypes.ARRAY;\n\t\tif (value instanceof Date) return DataTypes.DATE;\n\n\t\tconst basicType = typeof value;\n\n\t\t// Special type detection\n\t\tif (basicType === \"string\") {\n\t\t\tif (TypeDetector.isUUID(value)) return DataTypes.UUID;\n\t\t\tif (TypeDetector.isEmail(value)) return DataTypes.EMAIL;\n\t\t\tif (TypeDetector.isURL(value)) return DataTypes.URL;\n\t\t}\n\n\t\treturn basicType;\n\t}\n\n\t/**\n\t * Check if actual type matches expected type\n\t * @param {string} actualType - Actual type\n\t * @param {string} expectedType - Expected type\n\t * @returns {boolean} True if types match\n\t */\n\tstatic isTypeMatch (actualType, expectedType) {\n\t\tif (actualType === expectedType) return true;\n\n\t\t// Special cases\n\t\tif (expectedType === DataTypes.STRING) {\n\t\t\treturn [\"string\", DataTypes.UUID, DataTypes.EMAIL, DataTypes.URL].includes(actualType);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if string is a RFC 4122 compliant UUID (versions 1-5)\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if valid RFC 4122 UUID format (versions 1, 2, 3, 4, or 5)\n\t */\n\tstatic isUUID (value) {\n\t\tconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n\t\treturn uuidRegex.test(value);\n\t}\n\n\t/**\n\t * Check if string is an email\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if email format\n\t */\n\tstatic isEmail (value) {\n\t\t// WHATWG HTML5 compliant email validation pattern\n\t\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n\t\treturn emailRegex.test(value);\n\t}\n\n\t/**\n\t * Check if string is a URL\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if URL format\n\t */\n\tstatic isURL (value) {\n\t\ttry {\n\t\t\tconst url = new URL(value);\n\n\t\t\treturn Boolean(url);\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n","import { ValidationError, TypeConstraintError } from \"./errors.js\";\nimport { DataTypes, TypeDetector } from \"./data-types.js\";\n\n/**\n * Field constraint definitions for individual field validation\n */\nexport class FieldConstraint {\n\t/**\n\t * @param {Object} options - Constraint options\n\t * @param {string} options.type - Data type requirement\n\t * @param {boolean} [options.required=false] - Whether field is required\n\t * @param {*} [options.default] - Default value if not provided\n\t * @param {Function} [options.validator] - Custom validation function\n\t * @param {*} [options.min] - Minimum value (for numbers/strings/arrays)\n\t * @param {*} [options.max] - Maximum value (for numbers/strings/arrays)\n\t * @param {Array} [options.enum] - Allowed values\n\t * @param {RegExp} [options.pattern] - Pattern for string validation\n\t */\n\tconstructor ({\n\t\ttype = DataTypes.ANY,\n\t\trequired = false,\n\t\tdefault: defaultValue,\n\t\tvalidator,\n\t\tmin,\n\t\tmax,\n\t\tenum: enumValues,\n\t\tpattern\n\t} = {}) {\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.default = defaultValue;\n\t\tthis.validator = validator;\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t\tthis.enum = enumValues;\n\t\tthis.pattern = pattern;\n\t}\n\n\t/**\n\t * Validate a value against this constraint\n\t * @param {*} value - Value to validate\n\t * @param {string} fieldName - Name of the field being validated\n\t * @returns {*} Validated/normalized value\n\t * @throws {ValidationError} If validation fails\n\t */\n\tvalidate (value, fieldName = \"field\") {\n\t\t// Handle undefined values\n\t\tif (value === undefined || value === null) {\n\t\t\tif (this.required) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' is required`, fieldName, value);\n\t\t\t}\n\n\t\t\treturn this.default !== undefined ? this.default : value;\n\t\t}\n\n\t\t// Type validation\n\t\tconst actualType = TypeDetector.getValueType(value);\n\t\tif (this.type !== DataTypes.ANY && !TypeDetector.isTypeMatch(actualType, this.type)) {\n\t\t\tthrow new TypeConstraintError(\n\t\t\t\t`Field '${fieldName}' expected type '${this.type}' but got '${actualType}'`,\n\t\t\t\tthis.type,\n\t\t\t\tactualType,\n\t\t\t\tfieldName\n\t\t\t);\n\t\t}\n\n\t\t// Range validation\n\t\tif (this.min !== undefined && value < this.min) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value ${value} is below minimum ${this.min}`, fieldName, value);\n\t\t}\n\t\tif (this.max !== undefined && value > this.max) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value ${value} exceeds maximum ${this.max}`, fieldName, value);\n\t\t}\n\n\t\t// Length validation for strings and arrays\n\t\tif ((typeof value === \"string\" || Array.isArray(value)) && value.length !== undefined) {\n\t\t\tif (this.min !== undefined && value.length < this.min) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' length ${value.length} is below minimum ${this.min}`, fieldName, value);\n\t\t\t}\n\t\t\tif (this.max !== undefined && value.length > this.max) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' length ${value.length} exceeds maximum ${this.max}`, fieldName, value);\n\t\t\t}\n\t\t}\n\n\t\t// Enum validation\n\t\tif (this.enum && !this.enum.includes(value)) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value '${value}' is not in allowed values: ${this.enum.join(\", \")}`, fieldName, value);\n\t\t}\n\n\t\t// Pattern validation\n\t\tif (this.pattern && typeof value === \"string\" && !this.pattern.test(value)) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value '${value}' does not match required pattern`, fieldName, value);\n\t\t}\n\n\t\t// Custom validation\n\t\tif (this.validator && typeof this.validator === \"function\") {\n\t\t\tconst customResult = this.validator(value, fieldName);\n\t\t\tif (customResult !== true && customResult !== undefined) {\n\t\t\t\tconst message = typeof customResult === \"string\" ? customResult : `Custom validation failed for field '${fieldName}'`;\n\t\t\t\tthrow new ValidationError(message, fieldName, value);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import { ValidationError } from \"./errors.js\";\n\n/**\n * Schema definition for record validation\n */\nexport class Schema {\n\t/**\n\t * @param {Object<string, FieldConstraint>} fields - Field constraints\n\t * @param {Object} [options={}] - Schema options\n\t * @param {boolean} [options.strict=false] - Whether to allow additional fields\n\t * @param {boolean} [options.stripUnknown=false] - Whether to remove unknown fields\n\t */\n\tconstructor (fields = {}, { strict = false, stripUnknown = false } = {}) {\n\t\tthis.fields = fields;\n\t\tthis.strict = strict;\n\t\tthis.stripUnknown = stripUnknown;\n\t}\n\n\t/**\n\t * Validate a record against this schema\n\t * @param {Object} record - Record to validate\n\t * @returns {Object} Validated/normalized record\n\t * @throws {ValidationError} If validation fails\n\t */\n\tvalidate (record) {\n\t\tif (!record || typeof record !== \"object\" || Array.isArray(record)) {\n\t\t\tthrow new ValidationError(\"Record must be an object\", \"record\", record);\n\t\t}\n\n\t\tconst validated = {};\n\t\tconst fieldNames = Object.keys(this.fields);\n\t\tconst recordKeys = Object.keys(record);\n\n\t\t// Validate known fields\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tconst constraint = this.fields[fieldName];\n\t\t\tconst value = record[fieldName];\n\t\t\tvalidated[fieldName] = constraint.validate(value, fieldName);\n\t\t}\n\n\t\t// Handle unknown fields\n\t\tconst unknownFields = recordKeys.filter(key => !fieldNames.includes(key));\n\t\tif (unknownFields.length > 0) {\n\t\t\tif (this.strict) {\n\t\t\t\tthrow new ValidationError(`Unknown fields not allowed: ${unknownFields.join(\", \")}`, \"record\", record);\n\t\t\t} else if (!this.stripUnknown) {\n\t\t\t\t// Copy unknown fields as-is\n\t\t\t\tfor (const fieldName of unknownFields) {\n\t\t\t\t\tvalidated[fieldName] = record[fieldName];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn validated;\n\t}\n\n\t/**\n\t * Add a field constraint to the schema\n\t * @param {string} fieldName - Name of the field\n\t * @param {FieldConstraint} constraint - Field constraint\n\t * @returns {Schema} This schema for chaining\n\t */\n\taddField (fieldName, constraint) {\n\t\tthis.fields[fieldName] = constraint;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a field constraint from the schema\n\t * @param {string} fieldName - Name of the field\n\t * @returns {Schema} This schema for chaining\n\t */\n\tremoveField (fieldName) {\n\t\tdelete this.fields[fieldName];\n\n\t\treturn this;\n\t}\n}\n","import { ConfigurationError } from \"./errors.js\";\nimport { Schema } from \"./schema.js\";\n\n/**\n * Configuration validator for Haro options\n */\nexport class ConfigValidator {\n\t/**\n\t * Validate Haro configuration\n\t * @param {Object} config - Configuration to validate\n\t * @returns {Object} Validated configuration\n\t * @throws {ConfigurationError} If configuration is invalid\n\t */\n\tstatic validate (config = {}) {\n\t\tconst validated = { ...config };\n\n\t\t// Validate delimiter\n\t\tif (validated.delimiter !== undefined) {\n\t\t\tif (typeof validated.delimiter !== \"string\" || validated.delimiter.length === 0) {\n\t\t\t\tthrow new ConfigurationError(\"Delimiter must be a non-empty string\", \"delimiter\", validated.delimiter);\n\t\t\t}\n\t\t}\n\n\t\t// Validate id\n\t\tif (validated.id !== undefined && typeof validated.id !== \"string\") {\n\t\t\tthrow new ConfigurationError(\"ID must be a string\", \"id\", validated.id);\n\t\t}\n\n\t\t// Validate immutable\n\t\tif (validated.immutable !== undefined && typeof validated.immutable !== \"boolean\") {\n\t\t\tthrow new ConfigurationError(\"Immutable must be a boolean\", \"immutable\", validated.immutable);\n\t\t}\n\n\t\t// Validate index\n\t\tif (validated.index !== undefined) {\n\t\t\tif (!Array.isArray(validated.index)) {\n\t\t\t\tthrow new ConfigurationError(\"Index must be an array\", \"index\", validated.index);\n\t\t\t}\n\t\t\tfor (const indexField of validated.index) {\n\t\t\t\tif (typeof indexField !== \"string\") {\n\t\t\t\t\tthrow new ConfigurationError(\"Index field names must be strings\", \"index\", indexField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate key\n\t\tif (validated.key !== undefined && typeof validated.key !== \"string\") {\n\t\t\tthrow new ConfigurationError(\"Key field must be a string\", \"key\", validated.key);\n\t\t}\n\n\t\t// Validate versioning\n\t\tif (validated.versioning !== undefined && typeof validated.versioning !== \"boolean\") {\n\t\t\tthrow new ConfigurationError(\"Versioning must be a boolean\", \"versioning\", validated.versioning);\n\t\t}\n\n\t\t// Validate schema\n\t\tif (validated.schema !== undefined && !(validated.schema instanceof Schema)) {\n\t\t\tthrow new ConfigurationError(\"Schema must be an instance of Schema class\", \"schema\", validated.schema);\n\t\t}\n\n\t\treturn validated;\n\t}\n}\n","import { FieldConstraint } from \"./field-constraint.js\";\nimport { DataTypes } from \"./data-types.js\";\n\n/**\n * Utility functions for creating common field constraints\n */\nexport const Constraints = {\n\t/**\n\t * Create a required string field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} String constraint\n\t */\n\trequiredString (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.STRING, required: true, ...options });\n\t},\n\n\t/**\n\t * Create an optional string field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} String constraint\n\t */\n\toptionalString (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.STRING, required: false, ...options });\n\t},\n\n\t/**\n\t * Create a required number field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} Number constraint\n\t */\n\trequiredNumber (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.NUMBER, required: true, ...options });\n\t},\n\n\t/**\n\t * Create an optional number field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} Number constraint\n\t */\n\toptionalNumber (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.NUMBER, required: false, ...options });\n\t},\n\n\t/**\n\t * Create a UUID field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} UUID constraint\n\t */\n\tuuid (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.UUID, required });\n\t},\n\n\t/**\n\t * Create an email field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Email constraint\n\t */\n\temail (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.EMAIL, required });\n\t},\n\n\t/**\n\t * Create an enum field\n\t * @param {Array} values - Allowed values\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Enum constraint\n\t */\n\tenum (values, required = true) {\n\t\treturn new FieldConstraint({ enum: values, required });\n\t},\n\n\t/**\n\t * Create a date field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Date constraint\n\t */\n\tdate (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.DATE, required });\n\t}\n};\n","// Common values\nexport const INT_0 = 0;\nexport const STRING_EMPTY = \"\";\nexport const STRING_PIPE = \"|\";\nexport const STRING_COMMA = \",\";\nexport const STRING_ID = \"id\";\n\n// Data types\nexport const STRING_STRING = \"string\";\nexport const STRING_NUMBER = \"number\";\nexport const STRING_BOOLEAN = \"boolean\";\nexport const STRING_OBJECT = \"object\";\nexport const STRING_FUNCTION = \"function\";\n\n// Operations\nexport const STRING_SET = \"set\";\nexport const STRING_DEL = \"del\";\nexport const STRING_BATCH = \"batch\";\nexport const STRING_GET = \"get\";\nexport const STRING_FIND = \"find\";\nexport const STRING_DELETE = \"delete\";\n\n// Data structures\nexport const STRING_RECORDS = \"records\";\nexport const STRING_INDEXES = \"indexes\";\nexport const STRING_VERSIONS = \"versions\";\nexport const STRING_REGISTRY = \"registry\";\nexport const STRING_SIZE = \"size\";\n\n// Logical operators\nexport const STRING_DOUBLE_PIPE = \"||\";\nexport const STRING_DOUBLE_AND = \"&&\";\n\n// Error messages\nexport const STRING_RECORD_NOT_FOUND = \"Record not found\";\nexport const STRING_INVALID_FUNCTION = \"Invalid function\";\nexport const STRING_INVALID_FIELD = \"Invalid field\";\nexport const STRING_INVALID_TYPE = \"Invalid type\";\nexport const STRING_INVALID_INDEX = \"Invalid index\";\nexport const STRING_INVALID_OPERATION = \"Invalid operation\";\n\n// Configuration keys\nexport const CONFIG_DELIMITER = \"delimiter\";\nexport const CONFIG_ID = \"id\";\nexport const CONFIG_IMMUTABLE = \"immutable\";\nexport const CONFIG_INDEX = \"index\";\nexport const CONFIG_KEY = \"key\";\nexport const CONFIG_VERSIONING = \"versioning\";\nexport const CONFIG_SCHEMA = \"schema\";\nexport const CONFIG_RETENTION_POLICY = \"retentionPolicy\";\nexport const CONFIG_ENABLE_TRANSACTIONS = \"enableTransactions\";\nexport const CONFIG_ENABLE_OPTIMIZATION = \"enableOptimization\";\n\n// Default values\nexport const DEFAULT_DELIMITER = STRING_PIPE;\nexport const DEFAULT_KEY = STRING_ID;\nexport const DEFAULT_IMMUTABLE = false;\nexport const DEFAULT_VERSIONING = false;\nexport const DEFAULT_INDEX = [];\nexport const DEFAULT_ENABLE_TRANSACTIONS = false;\nexport const DEFAULT_ENABLE_OPTIMIZATION = true;\n\n// Performance thresholds\nexport const PERFORMANCE_INDEX_THRESHOLD = 1000;\nexport const PERFORMANCE_CACHE_SIZE = 100;\nexport const PERFORMANCE_BATCH_SIZE = 1000;\nexport const PERFORMANCE_STREAM_BUFFER_SIZE = 10000;\n\n// Memory limits\nexport const MEMORY_VERSION_LIMIT = 10 * 1024 * 1024; // 10MB\nexport const MEMORY_CACHE_LIMIT = 50 * 1024 * 1024; // 50MB\nexport const MEMORY_INDEX_LIMIT = 100 * 1024 * 1024; // 100MB\n\n// Time constants\nexport const TIME_TRANSACTION_TIMEOUT = 60 * 1000; // 60 seconds\nexport const TIME_LOCK_TIMEOUT = 30 * 1000; // 30 seconds\nexport const TIME_VERSION_MAX_AGE = 30 * 24 * 60 * 60 * 1000; // 30 days\nexport const TIME_CACHE_MAX_AGE = 5 * 60 * 1000; // 5 minutes\n\n// Query optimization constants\nexport const QUERY_FULL_SCAN_THRESHOLD = 10000;\nexport const QUERY_INDEX_SELECTIVITY_THRESHOLD = 0.1;\nexport const QUERY_PLAN_CACHE_SIZE = 1000;\n\n// Validation patterns\nexport const PATTERN_UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nexport const PATTERN_EMAIL = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nexport const PATTERN_URL = /^https?:\\/\\/.+/;\n\n// Error codes\nexport const ERROR_VALIDATION = \"VALIDATION_ERROR\";\nexport const ERROR_RECORD_NOT_FOUND = \"RECORD_NOT_FOUND\";\nexport const ERROR_INDEX = \"INDEX_ERROR\";\nexport const ERROR_CONFIGURATION = \"CONFIGURATION_ERROR\";\nexport const ERROR_QUERY = \"QUERY_ERROR\";\nexport const ERROR_TRANSACTION = \"TRANSACTION_ERROR\";\nexport const ERROR_VERSION = \"VERSION_ERROR\";\nexport const ERROR_TYPE_CONSTRAINT = \"TYPE_CONSTRAINT_ERROR\";\nexport const ERROR_CONCURRENCY = \"CONCURRENCY_ERROR\";\n\n// Index types\nexport const INDEX_TYPE_SINGLE = \"single\";\nexport const INDEX_TYPE_COMPOSITE = \"composite\";\nexport const INDEX_TYPE_ARRAY = \"array\";\nexport const INDEX_TYPE_PARTIAL = \"partial\";\n\n// Transaction states\nexport const TRANSACTION_STATE_PENDING = \"pending\";\nexport const TRANSACTION_STATE_ACTIVE = \"active\";\nexport const TRANSACTION_STATE_COMMITTED = \"committed\";\nexport const TRANSACTION_STATE_ABORTED = \"aborted\";\n\n// Lock types\nexport const LOCK_TYPE_SHARED = \"shared\";\nexport const LOCK_TYPE_EXCLUSIVE = \"exclusive\";\n\n// Isolation levels\nexport const ISOLATION_READ_UNCOMMITTED = 0;\nexport const ISOLATION_READ_COMMITTED = 1;\nexport const ISOLATION_REPEATABLE_READ = 2;\nexport const ISOLATION_SERIALIZABLE = 3;\n\n// Operation types for transaction log\nexport const OPERATION_TYPE_SET = \"set\";\nexport const OPERATION_TYPE_DELETE = \"delete\";\nexport const OPERATION_TYPE_BATCH = \"batch\";\n\n// Query types\nexport const QUERY_TYPE_FIND = \"find\";\nexport const QUERY_TYPE_FILTER = \"filter\";\nexport const QUERY_TYPE_SEARCH = \"search\";\nexport const QUERY_TYPE_WHERE = \"where\";\nexport const QUERY_TYPE_SORT = \"sort\";\nexport const QUERY_TYPE_LIMIT = \"limit\";\nexport const QUERY_TYPE_AGGREGATE = \"aggregate\";\n\n// Retention policy types\nexport const RETENTION_POLICY_COUNT = \"count\";\nexport const RETENTION_POLICY_TIME = \"time\";\nexport const RETENTION_POLICY_SIZE = \"size\";\nexport const RETENTION_POLICY_NONE = \"none\";\n\n// Data types for validation\nexport const DATA_TYPE_STRING = \"string\";\nexport const DATA_TYPE_NUMBER = \"number\";\nexport const DATA_TYPE_BOOLEAN = \"boolean\";\nexport const DATA_TYPE_OBJECT = \"object\";\nexport const DATA_TYPE_ARRAY = \"array\";\nexport const DATA_TYPE_DATE = \"date\";\nexport const DATA_TYPE_UUID = \"uuid\";\nexport const DATA_TYPE_EMAIL = \"email\";\nexport const DATA_TYPE_URL = \"url\";\nexport const DATA_TYPE_ANY = \"any\";\n\n// Cost factors for query optimization\nexport const COST_INDEX_LOOKUP = 1;\nexport const COST_FULL_SCAN = 100;\nexport const COST_FILTER_EVALUATION = 10;\nexport const COST_SORT_OPERATION = 50;\nexport const COST_MEMORY_ACCESS = 1;\nexport const COST_COMPARISON = 2;\nexport const COST_REGEX_MATCH = 20;\n\n// Object wrappers for backward compatibility\nexport const TransactionStates = {\n\tPENDING: TRANSACTION_STATE_PENDING,\n\tACTIVE: TRANSACTION_STATE_ACTIVE,\n\tCOMMITTED: TRANSACTION_STATE_COMMITTED,\n\tABORTED: TRANSACTION_STATE_ABORTED\n};\n\nexport const OperationTypes = {\n\tSET: OPERATION_TYPE_SET,\n\tDELETE: OPERATION_TYPE_DELETE,\n\tBATCH: OPERATION_TYPE_BATCH\n};\n\nexport const IsolationLevels = {\n\tREAD_UNCOMMITTED: ISOLATION_READ_UNCOMMITTED,\n\tREAD_COMMITTED: ISOLATION_READ_COMMITTED,\n\tREPEATABLE_READ: ISOLATION_REPEATABLE_READ,\n\tSERIALIZABLE: ISOLATION_SERIALIZABLE\n};\n\nexport const LockTypes = {\n\tSHARED: LOCK_TYPE_SHARED,\n\tEXCLUSIVE: LOCK_TYPE_EXCLUSIVE\n};\n","/**\n * Standardized record wrapper that provides consistent interface\n */\nexport class Record {\n\t/**\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} [metadata={}] - Additional metadata\n\t */\n\tconstructor (key, data, metadata = {}) {\n\t\tthis._key = key;\n\t\tthis._data = data;\n\t\tthis._metadata = {\n\t\t\tcreatedAt: new Date().toISOString(),\n\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\tversion: 1,\n\t\t\t...metadata\n\t\t};\n\n\t\t// Make the record immutable to prevent accidental modifications\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get the record key\n\t * @returns {string} Record key\n\t */\n\tget key () {\n\t\treturn this._key;\n\t}\n\n\t/**\n\t * Get the record data\n\t * @returns {Object} Record data (frozen copy)\n\t */\n\tget data () {\n\t\treturn Object.freeze({ ...this._data });\n\t}\n\n\t/**\n\t * Get record metadata\n\t * @returns {Object} Metadata object\n\t */\n\tget metadata () {\n\t\treturn Object.freeze({ ...this._metadata });\n\t}\n\n\t/**\n\t * Get a specific field value\n\t * @param {string} fieldName - Name of the field\n\t * @returns {*} Field value\n\t */\n\tget (fieldName) {\n\t\treturn this._data[fieldName];\n\t}\n\n\t/**\n\t * Check if record has a specific field\n\t * @param {string} fieldName - Name of the field\n\t * @returns {boolean} True if field exists\n\t */\n\thas (fieldName) {\n\t\treturn fieldName in this._data;\n\t}\n\n\t/**\n\t * Get all field names\n\t * @returns {string[]} Array of field names\n\t */\n\tgetFields () {\n\t\treturn Object.keys(this._data);\n\t}\n\n\t/**\n\t * Create a new record with updated data (immutable update)\n\t * @param {Object} updates - Data updates to apply\n\t * @param {Object} [metadataUpdates={}] - Metadata updates\n\t * @returns {Record} New record instance with updates\n\t */\n\tupdate (updates, metadataUpdates = {}) {\n\t\tconst newData = { ...this._data, ...updates };\n\t\tconst newMetadata = {\n\t\t\t...this._metadata,\n\t\t\t...metadataUpdates,\n\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\tversion: this._metadata.version + 1\n\t\t};\n\n\t\treturn new Record(this._key, newData, newMetadata);\n\t}\n\n\t/**\n\t * Convert record to plain object\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {Object} Plain object representation\n\t */\n\ttoObject (includeMetadata = false) {\n\t\tconst result = { ...this._data };\n\n\t\tif (includeMetadata) {\n\t\t\tresult._metadata = this._metadata;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convert record to JSON string\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {string} JSON string representation\n\t */\n\ttoJSON (includeMetadata = false) {\n\t\treturn JSON.stringify(this.toObject(includeMetadata));\n\t}\n\n\t/**\n\t * Compare this record with another record\n\t * @param {Record} other - Other record to compare\n\t * @returns {boolean} True if records are equal\n\t */\n\tequals (other) {\n\t\tif (!(other instanceof Record)) return false;\n\t\tif (this._key !== other._key) return false;\n\n\t\treturn JSON.stringify(this._data) === JSON.stringify(other._data);\n\t}\n\n\t/**\n\t * Create a deep clone of this record\n\t * @returns {Record} Cloned record\n\t */\n\tclone () {\n\t\treturn new Record(this._key, structuredClone(this._data), structuredClone(this._metadata));\n\t}\n\n\t/**\n\t * Get the size of the record data (for memory analysis)\n\t * @returns {number} Estimated size in bytes\n\t */\n\tgetSize () {\n\t\treturn JSON.stringify(this._data).length * 2; // Rough estimate (UTF-16)\n\t}\n\n\t/**\n\t * Check if record matches a predicate\n\t * @param {Function|Object} predicate - Function or object to match against\n\t * @returns {boolean} True if record matches\n\t */\n\tmatches (predicate) {\n\t\tif (typeof predicate === \"function\") {\n\t\t\treturn predicate(this._data, this._key, this);\n\t\t}\n\n\t\tif (typeof predicate === \"object\" && predicate !== null) {\n\t\t\treturn Object.entries(predicate).every(([field, value]) => {\n\t\t\t\tconst recordValue = this._data[field];\n\n\t\t\t\tif (value instanceof RegExp) {\n\t\t\t\t\treturn value.test(recordValue);\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\treturn Array.isArray(recordValue) ?\n\t\t\t\t\t\tvalue.some(v => recordValue.includes(v)) :\n\t\t\t\t\t\tvalue.includes(recordValue);\n\t\t\t\t}\n\n\t\t\t\treturn recordValue === value;\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get a string representation of the record\n\t * @returns {string} String representation\n\t */\n\ttoString () {\n\t\treturn `Record(${this._key}: ${JSON.stringify(this._data)})`;\n\t}\n\n\t/**\n\t * Symbol for iteration (makes record iterable)\n\t * @returns {Iterator} Iterator over [fieldName, value] pairs\n\t */\n\t* [Symbol.iterator] () {\n\t\tfor (const [field, value] of Object.entries(this._data)) {\n\t\t\tyield [field, value];\n\t\t}\n\t}\n}\n\n/**\n * Collection of records with utilities for batch operations\n */\nexport class RecordCollection {\n\t/**\n\t * @param {Record[]} [records=[]] - Initial records\n\t */\n\tconstructor (records = []) {\n\t\tthis._records = [...records];\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get the number of records\n\t * @returns {number} Number of records\n\t */\n\tget length () {\n\t\treturn this._records.length;\n\t}\n\n\t/**\n\t * Get record at specific index\n\t * @param {number} index - Index to retrieve\n\t * @returns {Record|undefined} Record at index\n\t */\n\tat (index) {\n\t\treturn this._records[index];\n\t}\n\n\t/**\n\t * Get first record\n\t * @returns {Record|undefined} First record\n\t */\n\tfirst () {\n\t\treturn this._records[0];\n\t}\n\n\t/**\n\t * Get last record\n\t * @returns {Record|undefined} Last record\n\t */\n\tlast () {\n\t\treturn this._records[this._records.length - 1];\n\t}\n\n\t/**\n\t * Filter records by predicate\n\t * @param {Function} predicate - Filter function\n\t * @returns {RecordCollection} New collection with filtered records\n\t */\n\tfilter (predicate) {\n\t\treturn new RecordCollection(this._records.filter(predicate));\n\t}\n\n\t/**\n\t * Map records to new values\n\t * @param {Function} mapper - Mapping function\n\t * @returns {Array} Array of mapped values\n\t */\n\tmap (mapper) {\n\t\treturn this._records.map(mapper);\n\t}\n\n\t/**\n\t * Find first record matching predicate\n\t * @param {Function} predicate - Search predicate\n\t * @returns {Record|undefined} First matching record\n\t */\n\tfind (predicate) {\n\t\treturn this._records.find(predicate);\n\t}\n\n\t/**\n\t * Check if any record matches predicate\n\t * @param {Function} predicate - Test predicate\n\t * @returns {boolean} True if any record matches\n\t */\n\tsome (predicate) {\n\t\treturn this._records.some(predicate);\n\t}\n\n\t/**\n\t * Check if all records match predicate\n\t * @param {Function} predicate - Test predicate\n\t * @returns {boolean} True if all records match\n\t */\n\tevery (predicate) {\n\t\treturn this._records.every(predicate);\n\t}\n\n\t/**\n\t * Sort records by comparator\n\t * @param {Function} comparator - Sort function\n\t * @returns {RecordCollection} New sorted collection\n\t */\n\tsort (comparator) {\n\t\treturn new RecordCollection([...this._records].sort(comparator));\n\t}\n\n\t/**\n\t * Get a slice of records\n\t * @param {number} [start=0] - Start index\n\t * @param {number} [end] - End index\n\t * @returns {RecordCollection} New collection with sliced records\n\t */\n\tslice (start = 0, end) {\n\t\treturn new RecordCollection(this._records.slice(start, end));\n\t}\n\n\t/**\n\t * Reduce records to a single value\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} [initialValue] - Initial value\n\t * @returns {*} Reduced value\n\t */\n\treduce (reducer, initialValue) {\n\t\treturn this._records.reduce(reducer, initialValue);\n\t}\n\n\t/**\n\t * Convert to array of records\n\t * @returns {Record[]} Array of records\n\t */\n\ttoArray () {\n\t\treturn [...this._records];\n\t}\n\n\t/**\n\t * Convert to array of plain objects\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {Object[]} Array of plain objects\n\t */\n\ttoObjects (includeMetadata = false) {\n\t\treturn this._records.map(record => record.toObject(includeMetadata));\n\t}\n\n\t/**\n\t * Get records as key-value pairs\n\t * @returns {Array<[string, Object]>} Array of [key, data] pairs\n\t */\n\ttoPairs () {\n\t\treturn this._records.map(record => [record.key, record.data]);\n\t}\n\n\t/**\n\t * Group records by field value\n\t * @param {string|Function} keySelector - Field name or function to get grouping key\n\t * @returns {Map<string, RecordCollection>} Map of grouped records\n\t */\n\tgroupBy (keySelector) {\n\t\tconst groups = new Map();\n\t\tconst getKey = typeof keySelector === \"function\" ?\n\t\t\tkeySelector :\n\t\t\trecord => record.get(keySelector);\n\n\t\tfor (const record of this._records) {\n\t\t\tconst key = getKey(record);\n\t\t\tif (!groups.has(key)) {\n\t\t\t\tgroups.set(key, []);\n\t\t\t}\n\t\t\tgroups.get(key).push(record);\n\t\t}\n\n\t\t// Convert arrays to RecordCollections\n\t\tfor (const [key, records] of groups) {\n\t\t\tgroups.set(key, new RecordCollection(records));\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Get unique records (by key)\n\t * @returns {RecordCollection} Collection with unique records\n\t */\n\tunique () {\n\t\tconst seen = new Set();\n\t\tconst unique = [];\n\n\t\tfor (const record of this._records) {\n\t\t\tif (!seen.has(record.key)) {\n\t\t\t\tseen.add(record.key);\n\t\t\t\tunique.push(record);\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(unique);\n\t}\n\n\t/**\n\t * Iterate over records\n\t * @param {Function} callback - Callback function\n\t * @returns {void}\n\t */\n\tforEach (callback) {\n\t\tthis._records.forEach(callback);\n\t}\n\n\t/**\n\t * Symbol for iteration (makes collection iterable)\n\t * @returns {Iterator} Iterator over records\n\t */\n\t* [Symbol.iterator] () {\n\t\tfor (const record of this._records) {\n\t\t\tyield record;\n\t\t}\n\t}\n\n\t/**\n\t * Get string representation\n\t * @returns {string} String representation\n\t */\n\ttoString () {\n\t\treturn `RecordCollection(${this._records.length} records)`;\n\t}\n}\n\n/**\n * Factory functions for creating records and collections\n */\nexport const RecordFactory = {\n\t/**\n\t * Create a record from raw data\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {Record} New record instance\n\t */\n\tcreate (key, data, metadata = {}) {\n\t\treturn new Record(key, data, metadata);\n\t},\n\n\t/**\n\t * Create a record from a plain object (key extracted from data)\n\t * @param {Object} data - Data object containing key field\n\t * @param {string} [keyField='id'] - Name of the key field\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {Record} New record instance\n\t */\n\tfromObject (data, keyField = \"id\", metadata = {}) {\n\t\tconst key = data[keyField];\n\t\tif (!key) {\n\t\t\tthrow new Error(`Key field '${keyField}' not found in data`);\n\t\t}\n\n\t\treturn new Record(key, data, metadata);\n\t},\n\n\t/**\n\t * Create a collection from an array of records or data objects\n\t * @param {Array<Record|Object>} items - Items to create collection from\n\t * @param {string} [keyField='id'] - Key field name for objects\n\t * @returns {RecordCollection} New record collection\n\t */\n\tcreateCollection (items, keyField = \"id\") {\n\t\tconst records = items.map(item => {\n\t\t\tif (item instanceof Record) {\n\t\t\t\treturn item;\n\t\t\t}\n\n\t\t\treturn this.fromObject(item, keyField);\n\t\t});\n\n\t\treturn new RecordCollection(records);\n\t},\n\n\t/**\n\t * Create an empty collection\n\t * @returns {RecordCollection} Empty record collection\n\t */\n\temptyCollection () {\n\t\treturn new RecordCollection();\n\t}\n};\n","import { IndexError } from \"./errors.js\";\n\n/**\n * Types of indexes supported\n */\nexport const IndexTypes = {\n\tSINGLE: \"single\",\n\tCOMPOSITE: \"composite\",\n\tARRAY: \"array\",\n\tPARTIAL: \"partial\"\n};\n\n/**\n * Index definition with metadata\n */\nexport class IndexDefinition {\n\t/**\n\t * @param {string} name - Index name\n\t * @param {string[]} fields - Field names to index\n\t * @param {Object} [options={}] - Index options\n\t * @param {string} [options.type=IndexTypes.SINGLE] - Index type\n\t * @param {boolean} [options.unique=false] - Whether values should be unique\n\t * @param {Function} [options.filter] - Filter function for partial indexes\n\t * @param {Function} [options.transform] - Transform function for index values\n\t * @param {string} [options.delimiter='|'] - Delimiter for composite indexes\n\t */\n\tconstructor (name, fields, {\n\t\ttype = IndexTypes.SINGLE,\n\t\tunique = false,\n\t\tfilter,\n\t\ttransform,\n\t\tdelimiter = \"|\"\n\t} = {}) {\n\t\tthis.name = name;\n\t\tthis.fields = Array.isArray(fields) ? fields : [fields];\n\t\tthis.type = this._determineType(this.fields, type);\n\t\tthis.unique = unique;\n\t\tthis.filter = filter;\n\t\tthis.transform = transform;\n\t\tthis.delimiter = delimiter;\n\t\tthis.createdAt = new Date();\n\t\tthis.stats = {\n\t\t\ttotalKeys: 0,\n\t\t\ttotalEntries: 0,\n\t\t\tmemoryUsage: 0,\n\t\t\tlastUpdated: new Date()\n\t\t};\n\t}\n\n\t/**\n\t * Determine index type based on fields\n\t * @param {string[]} fields - Field names\n\t * @param {string} suggestedType - Suggested type\n\t * @returns {string} Determined index type\n\t * @private\n\t */\n\t_determineType (fields, suggestedType) {\n\t\tif (suggestedType === IndexTypes.PARTIAL) {\n\t\t\treturn IndexTypes.PARTIAL;\n\t\t}\n\n\t\tif (fields.length > 1) {\n\t\t\treturn IndexTypes.COMPOSITE;\n\t\t}\n\n\t\treturn IndexTypes.SINGLE;\n\t}\n\n\t/**\n\t * Generate index keys for a record\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of index keys\n\t */\n\tgenerateKeys (record) {\n\t\t// Apply filter for partial indexes\n\t\tif (this.filter && !this.filter(record)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst keys = this._extractKeys(record);\n\n\t\t// Apply transform if specified\n\t\tif (this.transform) {\n\t\t\treturn keys.map(key => this.transform(key, record));\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Extract raw keys from record\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of raw keys\n\t * @private\n\t */\n\t_extractKeys (record) {\n\t\tif (this.type === IndexTypes.COMPOSITE) {\n\t\t\treturn this._generateCompositeKeys(record);\n\t\t}\n\n\t\tconst field = this.fields[0];\n\t\tconst value = record[field];\n\n\t\tif (value === undefined || value === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Handle array fields\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value.map(v => String(v));\n\t\t}\n\n\t\treturn [String(value)];\n\t}\n\n\t/**\n\t * Generate composite keys\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of composite keys\n\t * @private\n\t */\n\t_generateCompositeKeys (record) {\n\t\tlet keys = [\"\"];\n\n\t\tfor (const field of this.fields.sort()) {\n\t\t\tconst value = record[field];\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn []; // Skip records with missing composite fields\n\t\t\t}\n\n\t\t\tconst values = Array.isArray(value) ? value : [value];\n\t\t\tconst newKeys = [];\n\n\t\t\tfor (const existingKey of keys) {\n\t\t\t\tfor (const val of values) {\n\t\t\t\t\tconst newKey = existingKey === \"\" ?\n\t\t\t\t\t\tString(val) :\n\t\t\t\t\t\t`${existingKey}${this.delimiter}${String(val)}`;\n\t\t\t\t\tnewKeys.push(newKey);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tkeys = newKeys;\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Update statistics\n\t * @param {number} keyCount - Number of keys\n\t * @param {number} entryCount - Number of entries\n\t * @param {number} memoryDelta - Memory change in bytes\n\t */\n\tupdateStats (keyCount, entryCount, memoryDelta) {\n\t\tthis.stats.totalKeys = keyCount;\n\t\tthis.stats.totalEntries = entryCount;\n\t\tthis.stats.memoryUsage += memoryDelta;\n\t\tthis.stats.lastUpdated = new Date();\n\t}\n}\n\n/**\n * Memory-efficient index storage with reference counting\n */\nexport class IndexStorage {\n\tconstructor () {\n\t\t// Map<indexKey, Set<recordKey>>\n\t\tthis._storage = new Map();\n\t\t// Track reference counts for memory management\n\t\tthis._refCounts = new Map();\n\t}\n\n\t/**\n\t * Add a record to index\n\t * @param {string} indexKey - Index key\n\t * @param {string} recordKey - Record key\n\t */\n\tadd (indexKey, recordKey) {\n\t\tif (!this._storage.has(indexKey)) {\n\t\t\tthis._storage.set(indexKey, new Set());\n\t\t\tthis._refCounts.set(indexKey, 0);\n\t\t}\n\n\t\tconst recordSet = this._storage.get(indexKey);\n\t\tif (!recordSet.has(recordKey)) {\n\t\t\trecordSet.add(recordKey);\n\t\t\tthis._refCounts.set(indexKey, this._refCounts.get(indexKey) + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a record from index\n\t * @param {string} indexKey - Index key\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if record was removed\n\t */\n\tremove (indexKey, recordKey) {\n\t\tconst recordSet = this._storage.get(indexKey);\n\t\tif (!recordSet) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst removed = recordSet.delete(recordKey);\n\t\tif (removed) {\n\t\t\tconst newCount = this._refCounts.get(indexKey) - 1;\n\t\t\tif (newCount === 0) {\n\t\t\t\t// Clean up empty index keys\n\t\t\t\tthis._storage.delete(indexKey);\n\t\t\t\tthis._refCounts.delete(indexKey);\n\t\t\t} else {\n\t\t\t\tthis._refCounts.set(indexKey, newCount);\n\t\t\t}\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Get records for index key\n\t * @param {string} indexKey - Index key\n\t * @returns {Set<string>} Set of record keys\n\t */\n\tget (indexKey) {\n\t\treturn this._storage.get(indexKey) || new Set();\n\t}\n\n\t/**\n\t * Check if index key exists\n\t * @param {string} indexKey - Index key\n\t * @returns {boolean} True if key exists\n\t */\n\thas (indexKey) {\n\t\treturn this._storage.has(indexKey);\n\t}\n\n\t/**\n\t * Get all index keys\n\t * @returns {string[]} Array of index keys\n\t */\n\tkeys () {\n\t\treturn Array.from(this._storage.keys());\n\t}\n\n\t/**\n\t * Get index statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tlet totalEntries = 0;\n\t\tfor (const recordSet of this._storage.values()) {\n\t\t\ttotalEntries += recordSet.size;\n\t\t}\n\n\t\treturn {\n\t\t\ttotalKeys: this._storage.size,\n\t\t\ttotalEntries,\n\t\t\tmemoryUsage: this._estimateMemoryUsage()\n\t\t};\n\t}\n\n\t/**\n\t * Clear all index data\n\t */\n\tclear () {\n\t\tthis._storage.clear();\n\t\tthis._refCounts.clear();\n\t}\n\n\t/**\n\t * Estimate memory usage in bytes\n\t * @returns {number} Estimated memory usage\n\t * @private\n\t */\n\t_estimateMemoryUsage () {\n\t\tlet size = 0;\n\n\t\tfor (const [key, recordSet] of this._storage) {\n\t\t\t// Estimate key size (string)\n\t\t\tsize += key.length * 2;\n\n\t\t\t// Estimate Set overhead + record keys\n\t\t\tsize += 64; // Set object overhead\n\t\t\tfor (const recordKey of recordSet) {\n\t\t\t\tsize += recordKey.length * 2;\n\t\t\t}\n\t\t}\n\n\t\treturn size;\n\t}\n}\n\n/**\n * Index manager that handles multiple indexes efficiently\n */\nexport class IndexManager {\n\t/**\n\t * @param {string} [delimiter='|'] - Default delimiter for composite indexes\n\t */\n\tconstructor (delimiter = \"|\") {\n\t\tthis.delimiter = delimiter;\n\t\t// Map<indexName, IndexDefinition>\n\t\tthis._definitions = new Map();\n\t\t// Map<indexName, IndexStorage>\n\t\tthis._indexes = new Map();\n\t\t// Performance tracking\n\t\tthis._stats = {\n\t\t\ttotalOperations: 0,\n\t\t\ttotalTime: 0,\n\t\t\tlastOptimized: new Date()\n\t\t};\n\t}\n\n\t/**\n\t * Create a new index\n\t * @param {string} name - Index name\n\t * @param {string|string[]} fields - Field name(s) to index\n\t * @param {Object} [options={}] - Index options\n\t * @returns {IndexManager} This instance for chaining\n\t * @throws {IndexError} If index already exists or configuration is invalid\n\t */\n\tcreateIndex (name, fields, options = {}) {\n\t\tif (this._definitions.has(name)) {\n\t\t\tthrow new IndexError(`Index '${name}' already exists`, name, \"create\");\n\t\t}\n\n\t\tconst definition = new IndexDefinition(name, fields, {\n\t\t\tdelimiter: this.delimiter,\n\t\t\t...options\n\t\t});\n\n\t\tthis._definitions.set(name, definition);\n\t\tthis._indexes.set(name, new IndexStorage());\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Drop an index\n\t * @param {string} name - Index name\n\t * @returns {IndexManager} This instance for chaining\n\t * @throws {IndexError} If index doesn't exist\n\t */\n\tdropIndex (name) {\n\t\tif (!this._definitions.has(name)) {\n\t\t\tthrow new IndexError(`Index '${name}' does not exist`, name, \"drop\");\n\t\t}\n\n\t\tthis._definitions.delete(name);\n\t\tthis._indexes.delete(name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if index exists\n\t * @param {string} name - Index name\n\t * @returns {boolean} True if index exists\n\t */\n\thasIndex (name) {\n\t\treturn this._definitions.has(name);\n\t}\n\n\t/**\n\t * Get index definition\n\t * @param {string} name - Index name\n\t * @returns {IndexDefinition|undefined} Index definition\n\t */\n\tgetIndexDefinition (name) {\n\t\treturn this._definitions.get(name);\n\t}\n\n\t/**\n\t * List all indexes\n\t * @returns {string[]} Array of index names\n\t */\n\tlistIndexes () {\n\t\treturn Array.from(this._definitions.keys());\n\t}\n\n\t/**\n\t * Add a record to all applicable indexes\n\t * @param {string} recordKey - Record key\n\t * @param {Object} recordData - Record data\n\t * @throws {IndexError} If unique constraint is violated\n\t */\n\taddRecord (recordKey, recordData) {\n\t\tconst startTime = Date.now();\n\n\t\tfor (const [indexName, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(indexName);\n\t\t\tconst indexKeys = definition.generateKeys(recordData);\n\n\t\t\tfor (const indexKey of indexKeys) {\n\t\t\t\t// Check unique constraint\n\t\t\t\tif (definition.unique && storage.has(indexKey)) {\n\t\t\t\t\tconst existingRecords = storage.get(indexKey);\n\t\t\t\t\tif (existingRecords.size > 0 && !existingRecords.has(recordKey)) {\n\t\t\t\t\t\tthrow new IndexError(\n\t\t\t\t\t\t\t`Unique constraint violation on index '${indexName}' for value '${indexKey}'`,\n\t\t\t\t\t\t\tindexName,\n\t\t\t\t\t\t\t\"add\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstorage.add(indexKey, recordKey);\n\t\t\t}\n\n\t\t\t// Update statistics\n\t\t\tconst stats = storage.getStats();\n\t\t\tdefinition.updateStats(stats.totalKeys, stats.totalEntries, 0);\n\t\t}\n\n\t\tthis._updatePerformanceStats(Date.now() - startTime);\n\t}\n\n\t/**\n\t * Remove a record from all indexes\n\t * @param {string} recordKey - Record key\n\t * @param {Object} recordData - Record data\n\t */\n\tremoveRecord (recordKey, recordData) {\n\t\tconst startTime = Date.now();\n\n\t\tfor (const [indexName, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(indexName);\n\t\t\tconst indexKeys = definition.generateKeys(recordData);\n\n\t\t\tfor (const indexKey of indexKeys) {\n\t\t\t\tstorage.remove(indexKey, recordKey);\n\t\t\t}\n\n\t\t\t// Update statistics\n\t\t\tconst stats = storage.getStats();\n\t\t\tdefinition.updateStats(stats.totalKeys, stats.totalEntries, 0);\n\t\t}\n\n\t\tthis._updatePerformanceStats(Date.now() - startTime);\n\t}\n\n\t/**\n\t * Update a record in indexes (remove old, add new)\n\t * @param {string} recordKey - Record key\n\t * @param {Object} oldData - Old record data\n\t * @param {Object} newData - New record data\n\t */\n\tupdateRecord (recordKey, oldData, newData) {\n\t\tthis.removeRecord(recordKey, oldData);\n\t\tthis.addRecord(recordKey, newData);\n\t}\n\n\t/**\n\t * Find records using index\n\t * @param {string} indexName - Index name\n\t * @param {string} indexKey - Index key to search for\n\t * @returns {Set<string>} Set of record keys\n\t * @throws {IndexError} If index doesn't exist\n\t */\n\tfindByIndex (indexName, indexKey) {\n\t\tconst storage = this._indexes.get(indexName);\n\t\tif (!storage) {\n\t\t\tthrow new IndexError(`Index '${indexName}' does not exist`, indexName, \"query\");\n\t\t}\n\n\t\treturn new Set(storage.get(indexKey));\n\t}\n\n\t/**\n\t * Find records using multiple criteria (intersection)\n\t * @param {Object} criteria - Object with index names as keys and search values as values\n\t * @returns {Set<string>} Set of record keys that match all criteria\n\t */\n\tfindByCriteria (criteria) {\n\t\tconst indexNames = Object.keys(criteria);\n\t\tif (indexNames.length === 0) {\n\t\t\treturn new Set();\n\t\t}\n\n\t\tlet result = null;\n\n\t\tfor (const indexName of indexNames) {\n\t\t\tconst indexKey = String(criteria[indexName]);\n\t\t\tconst records = this.findByIndex(indexName, indexKey);\n\n\t\t\tif (result === null) {\n\t\t\t\tresult = records;\n\t\t\t} else {\n\t\t\t\t// Intersection\n\t\t\t\tresult = new Set([...result].filter(key => records.has(key)));\n\t\t\t}\n\n\t\t\t// Early termination if no matches\n\t\t\tif (result.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get optimal index for query fields\n\t * @param {string[]} fields - Fields being queried\n\t * @returns {string|null} Best index name or null if no suitable index\n\t */\n\tgetOptimalIndex (fields) {\n\t\tconst sortedFields = [...fields].sort();\n\n\t\t// Look for exact match first\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst indexFields = [...definition.fields].sort();\n\t\t\tif (JSON.stringify(indexFields) === JSON.stringify(sortedFields)) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\t// Look for index that covers all fields\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tif (fields.every(field => definition.fields.includes(field))) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\t// Look for index that covers some fields (prefer single field indexes)\n\t\tconst candidates = [];\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst coverage = fields.filter(field => definition.fields.includes(field)).length;\n\t\t\tif (coverage > 0) {\n\t\t\t\tcandidates.push({ name, coverage, fields: definition.fields.length });\n\t\t\t}\n\t\t}\n\n\t\tif (candidates.length > 0) {\n\t\t\t// Sort by coverage (descending) then by field count (ascending)\n\t\t\tcandidates.sort((a, b) => {\n\t\t\t\tif (a.coverage !== b.coverage) {\n\t\t\t\t\treturn b.coverage - a.coverage;\n\t\t\t\t}\n\n\t\t\t\treturn a.fields - b.fields;\n\t\t\t});\n\n\t\t\treturn candidates[0].name;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Rebuild all indexes from scratch\n\t * @param {Map<string, Object>} records - All records to reindex\n\t */\n\trebuild (records) {\n\t\t// Clear all indexes\n\t\tfor (const storage of this._indexes.values()) {\n\t\t\tstorage.clear();\n\t\t}\n\n\t\t// Rebuild from records\n\t\tfor (const [recordKey, recordData] of records) {\n\t\t\tthis.addRecord(recordKey, recordData);\n\t\t}\n\n\t\tthis._stats.lastOptimized = new Date();\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst indexStats = {};\n\t\tlet totalMemory = 0;\n\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(name);\n\t\t\tconst stats = storage.getStats();\n\t\t\tindexStats[name] = {\n\t\t\t\t...definition.stats,\n\t\t\t\t...stats,\n\t\t\t\ttype: definition.type,\n\t\t\t\tfields: definition.fields\n\t\t\t};\n\t\t\ttotalMemory += stats.memoryUsage;\n\t\t}\n\n\t\treturn {\n\t\t\tindexes: indexStats,\n\t\t\ttotalIndexes: this._definitions.size,\n\t\t\ttotalMemoryUsage: totalMemory,\n\t\t\tperformance: {\n\t\t\t\t...this._stats,\n\t\t\t\taverageOperationTime: this._stats.totalOperations > 0 ?\n\t\t\t\t\tthis._stats.totalTime / this._stats.totalOperations :\n\t\t\t\t\t0\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Clear all indexes\n\t */\n\tclear () {\n\t\tfor (const storage of this._indexes.values()) {\n\t\t\tstorage.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Update performance statistics\n\t * @param {number} operationTime - Time taken for operation in ms\n\t * @private\n\t */\n\t_updatePerformanceStats (operationTime) {\n\t\tthis._stats.totalOperations++;\n\t\tthis._stats.totalTime += operationTime;\n\t}\n}\n","import { ConfigurationError } from \"./errors.js\";\n\n/**\n * Version retention policies\n */\nexport const RetentionPolicies = {\n\tCOUNT: \"count\",\n\tTIME: \"time\",\n\tSIZE: \"size\",\n\tNONE: \"none\"\n};\n\n/**\n * Version entry with metadata\n */\nexport class VersionEntry {\n\t/**\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t */\n\tconstructor (data, metadata = {}) {\n\t\tthis.data = Object.freeze(structuredClone(data));\n\t\tthis.timestamp = new Date();\n\t\tthis.size = this._calculateSize(data);\n\t\tthis.metadata = Object.freeze({\n\t\t\toperation: \"update\",\n\t\t\t...metadata\n\t\t});\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Calculate estimated size of version data\n\t * @param {Object} data - Data to measure\n\t * @returns {number} Size in bytes\n\t * @private\n\t */\n\t_calculateSize (data) {\n\t\ttry {\n\t\t\treturn JSON.stringify(data).length * 2; // UTF-16 estimate\n\t\t} catch {\n\t\t\treturn 1024; // Fallback estimate\n\t\t}\n\t}\n\n\t/**\n\t * Check if version is older than specified time\n\t * @param {number} maxAge - Maximum age in milliseconds\n\t * @returns {boolean} True if version is older\n\t */\n\tisOlderThan (maxAge) {\n\t\treturn Date.now() - this.timestamp.getTime() > maxAge;\n\t}\n\n\t/**\n\t * Get age of version in milliseconds\n\t * @returns {number} Age in milliseconds\n\t */\n\tgetAge () {\n\t\treturn Date.now() - this.timestamp.getTime();\n\t}\n\n\t/**\n\t * Convert to plain object for serialization\n\t * @returns {Object} Plain object representation\n\t */\n\ttoObject () {\n\t\treturn {\n\t\t\tdata: this.data,\n\t\t\ttimestamp: this.timestamp.toISOString(),\n\t\t\tsize: this.size,\n\t\t\tmetadata: this.metadata\n\t\t};\n\t}\n}\n\n/**\n * Version history for a single record\n */\nexport class VersionHistory {\n\t/**\n\t * @param {string} recordKey - Record key\n\t * @param {Object} [policy={}] - Retention policy\n\t */\n\tconstructor (recordKey, policy = {}) {\n\t\tthis.recordKey = recordKey;\n\t\tthis.policy = policy;\n\t\tthis.versions = [];\n\t\tthis.totalSize = 0;\n\t\tthis.createdAt = new Date();\n\t\tthis.lastAccessed = new Date();\n\t}\n\n\t/**\n\t * Add a new version\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t * @returns {VersionEntry} Created version entry\n\t */\n\taddVersion (data, metadata = {}) {\n\t\tconst version = new VersionEntry(data, metadata);\n\t\tthis.versions.push(version);\n\t\tthis.totalSize += version.size;\n\t\tthis.lastAccessed = new Date();\n\n\t\t// Apply retention policy\n\t\tthis._applyRetentionPolicy();\n\n\t\treturn version;\n\t}\n\n\t/**\n\t * Get version by index (0 = oldest, -1 = newest)\n\t * @param {number} index - Version index\n\t * @returns {VersionEntry|undefined} Version entry\n\t */\n\tgetVersion (index) {\n\t\tthis.lastAccessed = new Date();\n\n\t\tif (index < 0) {\n\t\t\treturn this.versions[this.versions.length + index];\n\t\t}\n\n\t\treturn this.versions[index];\n\t}\n\n\t/**\n\t * Get latest version\n\t * @returns {VersionEntry|undefined} Latest version\n\t */\n\tgetLatest () {\n\t\treturn this.getVersion(-1);\n\t}\n\n\t/**\n\t * Get oldest version\n\t * @returns {VersionEntry|undefined} Oldest version\n\t */\n\tgetOldest () {\n\t\treturn this.getVersion(0);\n\t}\n\n\t/**\n\t * Get all versions within time range\n\t * @param {Date} [start] - Start time (inclusive)\n\t * @param {Date} [end] - End time (inclusive)\n\t * @returns {VersionEntry[]} Array of versions in range\n\t */\n\tgetVersionsInRange (start, end) {\n\t\tthis.lastAccessed = new Date();\n\n\t\treturn this.versions.filter(version => {\n\t\t\tconst timestamp = version.timestamp;\n\t\t\tconst afterStart = !start || timestamp >= start;\n\t\t\tconst beforeEnd = !end || timestamp <= end;\n\n\t\t\treturn afterStart && beforeEnd;\n\t\t});\n\t}\n\n\t/**\n\t * Get number of versions\n\t * @returns {number} Version count\n\t */\n\tgetCount () {\n\t\treturn this.versions.length;\n\t}\n\n\t/**\n\t * Get total size of all versions\n\t * @returns {number} Total size in bytes\n\t */\n\tgetTotalSize () {\n\t\treturn this.totalSize;\n\t}\n\n\t/**\n\t * Clear all versions\n\t * @returns {number} Number of versions cleared\n\t */\n\tclear () {\n\t\tconst count = this.versions.length;\n\t\tthis.versions = [];\n\t\tthis.totalSize = 0;\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Remove versions older than specified age\n\t * @param {number} maxAge - Maximum age in milliseconds\n\t * @returns {number} Number of versions removed\n\t */\n\tremoveOlderThan (maxAge) {\n\t\tconst oldCount = this.versions.length;\n\t\tconst cutoffTime = Date.now() - maxAge;\n\n\t\tthis.versions = this.versions.filter(version => {\n\t\t\tconst keep = version.timestamp.getTime() >= cutoffTime;\n\t\t\tif (!keep) {\n\t\t\t\tthis.totalSize -= version.size;\n\t\t\t}\n\n\t\t\treturn keep;\n\t\t});\n\n\t\treturn oldCount - this.versions.length;\n\t}\n\n\t/**\n\t * Apply retention policy to limit versions\n\t * @private\n\t */\n\t_applyRetentionPolicy () {\n\t\tif (!this.policy || this.policy.type === RetentionPolicies.NONE) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet removed = 0;\n\n\t\tswitch (this.policy.type) {\n\t\t\tcase RetentionPolicies.COUNT:\n\t\t\t\tremoved = this._applyCountPolicy();\n\t\t\t\tbreak;\n\t\t\tcase RetentionPolicies.TIME:\n\t\t\t\tremoved = this._applyTimePolicy();\n\t\t\t\tbreak;\n\t\t\tcase RetentionPolicies.SIZE:\n\t\t\t\tremoved = this._applySizePolicy();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tremoved = 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Apply count-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applyCountPolicy () {\n\t\tconst maxCount = this.policy.maxCount || 10;\n\t\tif (this.versions.length <= maxCount) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst removeCount = this.versions.length - maxCount;\n\t\tconst removed = this.versions.splice(0, removeCount);\n\n\t\tfor (const version of removed) {\n\t\t\tthis.totalSize -= version.size;\n\t\t}\n\n\t\treturn removed.length;\n\t}\n\n\t/**\n\t * Apply time-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applyTimePolicy () {\n\t\tconst maxAge = this.policy.maxAge || 30 * 24 * 60 * 60 * 1000; // 30 days default\n\n\t\treturn this.removeOlderThan(maxAge);\n\t}\n\n\t/**\n\t * Apply size-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applySizePolicy () {\n\t\tconst maxSize = this.policy.maxSize || 10 * 1024 * 1024; // 10MB default\n\t\tif (this.totalSize <= maxSize) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet removed = 0;\n\t\twhile (this.totalSize > maxSize && this.versions.length > 1) {\n\t\t\tconst version = this.versions.shift();\n\t\t\tthis.totalSize -= version.size;\n\t\t\tremoved++;\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Get statistics for this version history\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\trecordKey: this.recordKey,\n\t\t\tversionCount: this.versions.length,\n\t\t\ttotalSize: this.totalSize,\n\t\t\taverageSize: this.versions.length > 0 ? this.totalSize / this.versions.length : 0,\n\t\t\toldestVersion: this.versions.length > 0 ? this.versions[0].timestamp : null,\n\t\t\tnewestVersion: this.versions.length > 0 ? this.versions[this.versions.length - 1].timestamp : null,\n\t\t\tcreatedAt: this.createdAt,\n\t\t\tlastAccessed: this.lastAccessed,\n\t\t\tpolicy: this.policy\n\t\t};\n\t}\n}\n\n/**\n * Version manager for handling versioning across all records\n */\nexport class VersionManager {\n\t/**\n\t * @param {Object} [globalPolicy={}] - Global retention policy\n\t */\n\tconstructor (globalPolicy = {}) {\n\t\tthis.globalPolicy = this._validatePolicy(globalPolicy);\n\t\t// Map<recordKey, VersionHistory>\n\t\tthis.histories = new Map();\n\t\tthis.stats = {\n\t\t\ttotalHistories: 0,\n\t\t\ttotalVersions: 0,\n\t\t\ttotalSize: 0,\n\t\t\tlastCleanup: new Date(),\n\t\t\tcleanupCount: 0\n\t\t};\n\t}\n\n\t/**\n\t * Enable versioning for a record\n\t * @param {string} recordKey - Record key\n\t * @param {Object} [policy] - Custom retention policy for this record\n\t * @returns {VersionHistory} Created version history\n\t */\n\tenableVersioning (recordKey, policy) {\n\t\tif (this.histories.has(recordKey)) {\n\t\t\treturn this.histories.get(recordKey);\n\t\t}\n\n\t\tconst effectivePolicy = policy || this.globalPolicy;\n\t\tconst history = new VersionHistory(recordKey, effectivePolicy);\n\t\tthis.histories.set(recordKey, history);\n\t\tthis.stats.totalHistories++;\n\n\t\treturn history;\n\t}\n\n\t/**\n\t * Disable versioning for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if versioning was disabled\n\t */\n\tdisableVersioning (recordKey) {\n\t\tconst history = this.histories.get(recordKey);\n\t\tif (!history) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.stats.totalVersions -= history.getCount();\n\t\tthis.stats.totalSize -= history.getTotalSize();\n\t\tthis.stats.totalHistories--;\n\n\t\treturn this.histories.delete(recordKey);\n\t}\n\n\t/**\n\t * Add a version for a record\n\t * @param {string} recordKey - Record key\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t * @returns {VersionEntry} Created version entry\n\t * @throws {VersionError} If versioning is not enabled for record\n\t */\n\taddVersion (recordKey, data, metadata = {}) {\n\t\tlet history = this.histories.get(recordKey);\n\t\tif (!history) {\n\t\t\t// Auto-enable versioning with global policy\n\t\t\thistory = this.enableVersioning(recordKey);\n\t\t}\n\n\t\tconst oldCount = history.getCount();\n\t\tconst oldSize = history.getTotalSize();\n\n\t\tconst version = history.addVersion(data, metadata);\n\n\t\t// Update global stats\n\t\tthis.stats.totalVersions += history.getCount() - oldCount;\n\t\tthis.stats.totalSize += history.getTotalSize() - oldSize;\n\n\t\treturn version;\n\t}\n\n\t/**\n\t * Get version history for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {VersionHistory|undefined} Version history\n\t */\n\tgetHistory (recordKey) {\n\t\treturn this.histories.get(recordKey);\n\t}\n\n\t/**\n\t * Get specific version of a record\n\t * @param {string} recordKey - Record key\n\t * @param {number} versionIndex - Version index\n\t * @returns {VersionEntry|undefined} Version entry\n\t */\n\tgetVersion (recordKey, versionIndex) {\n\t\tconst history = this.histories.get(recordKey);\n\n\t\treturn history ? history.getVersion(versionIndex) : undefined;\n\t}\n\n\t/**\n\t * Get latest version of a record\n\t * @param {string} recordKey - Record key\n\t * @returns {VersionEntry|undefined} Latest version\n\t */\n\tgetLatestVersion (recordKey) {\n\t\tconst history = this.histories.get(recordKey);\n\n\t\treturn history ? history.getLatest() : undefined;\n\t}\n\n\t/**\n\t * Check if versioning is enabled for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if versioning is enabled\n\t */\n\tisVersioningEnabled (recordKey) {\n\t\treturn this.histories.has(recordKey);\n\t}\n\n\t/**\n\t * Clean up versions based on retention policies\n\t * @param {Object} [options={}] - Cleanup options\n\t * @param {boolean} [options.force=false] - Force cleanup even if not needed\n\t * @param {string[]} [options.recordKeys] - Specific records to clean up\n\t * @returns {Object} Cleanup results\n\t */\n\tcleanup (options = {}) {\n\t\tconst { recordKeys } = options;\n\t\tconst results = {\n\t\t\thistoriesProcessed: 0,\n\t\t\tversionsRemoved: 0,\n\t\t\tsizeFreed: 0,\n\t\t\tstartTime: new Date()\n\t\t};\n\n\t\tconst keysToProcess = recordKeys || Array.from(this.histories.keys());\n\n\t\tfor (const recordKey of keysToProcess) {\n\t\t\tconst history = this.histories.get(recordKey);\n\t\t\tif (history) {\n\t\t\t\tconst oldCount = history.getCount();\n\t\t\t\tconst oldSize = history.getTotalSize();\n\n\t\t\t\t// Apply retention policy\n\t\t\t\thistory._applyRetentionPolicy();\n\n\t\t\t\tconst newCount = history.getCount();\n\t\t\t\tconst newSize = history.getTotalSize();\n\n\t\t\t\tresults.historiesProcessed++;\n\t\t\t\tresults.versionsRemoved += oldCount - newCount;\n\t\t\t\tresults.sizeFreed += oldSize - newSize;\n\n\t\t\t\t// Remove empty histories\n\t\t\t\tif (newCount === 0) {\n\t\t\t\t\tthis.histories.delete(recordKey);\n\t\t\t\t\tthis.stats.totalHistories--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update global stats\n\t\tthis.stats.totalVersions -= results.versionsRemoved;\n\t\tthis.stats.totalSize -= results.sizeFreed;\n\t\tthis.stats.lastCleanup = new Date();\n\t\tthis.stats.cleanupCount++;\n\n\t\tresults.endTime = new Date();\n\t\tresults.duration = results.endTime.getTime() - results.startTime.getTime();\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Set global retention policy\n\t * @param {Object} policy - Retention policy\n\t * @returns {VersionManager} This instance for chaining\n\t */\n\tsetGlobalPolicy (policy) {\n\t\tthis.globalPolicy = this._validatePolicy(policy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\t// Recalculate stats from histories\n\t\tlet totalVersions = 0;\n\t\tlet totalSize = 0;\n\t\tconst historyStats = [];\n\n\t\tfor (const history of this.histories.values()) {\n\t\t\tconst stats = history.getStats();\n\t\t\thistoryStats.push(stats);\n\t\t\ttotalVersions += stats.versionCount;\n\t\t\ttotalSize += stats.totalSize;\n\t\t}\n\n\t\treturn {\n\t\t\t...this.stats,\n\t\t\ttotalHistories: this.histories.size,\n\t\t\ttotalVersions,\n\t\t\ttotalSize,\n\t\t\taverageVersionsPerRecord: this.histories.size > 0 ? totalVersions / this.histories.size : 0,\n\t\t\taverageSizePerRecord: this.histories.size > 0 ? totalSize / this.histories.size : 0,\n\t\t\tglobalPolicy: this.globalPolicy,\n\t\t\thistories: historyStats\n\t\t};\n\t}\n\n\t/**\n\t * Export version data for backup\n\t * @param {string[]} [recordKeys] - Specific records to export\n\t * @returns {Object} Exportable version data\n\t */\n\texport (recordKeys) {\n\t\tconst keysToExport = recordKeys || Array.from(this.histories.keys());\n\t\tconst exportData = {\n\t\t\tglobalPolicy: this.globalPolicy,\n\t\t\thistories: {},\n\t\t\texportedAt: new Date().toISOString()\n\t\t};\n\n\t\tfor (const recordKey of keysToExport) {\n\t\t\tconst history = this.histories.get(recordKey);\n\t\t\tif (history) {\n\t\t\t\texportData.histories[recordKey] = {\n\t\t\t\t\tpolicy: history.policy,\n\t\t\t\t\tversions: history.versions.map(v => v.toObject()),\n\t\t\t\t\tcreatedAt: history.createdAt.toISOString(),\n\t\t\t\t\tlastAccessed: history.lastAccessed.toISOString()\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn exportData;\n\t}\n\n\t/**\n\t * Import version data from backup\n\t * @param {Object} exportData - Exported version data\n\t * @param {Object} [options={}] - Import options\n\t * @param {boolean} [options.merge=false] - Whether to merge with existing data\n\t * @returns {Object} Import results\n\t */\n\timport (exportData, options = {}) {\n\t\tconst { merge = false } = options;\n\t\tconst results = {\n\t\t\thistoriesImported: 0,\n\t\t\tversionsImported: 0,\n\t\t\terrors: []\n\t\t};\n\n\t\tif (!merge) {\n\t\t\tthis.histories.clear();\n\t\t}\n\n\t\tif (exportData.globalPolicy) {\n\t\t\tthis.globalPolicy = this._validatePolicy(exportData.globalPolicy);\n\t\t}\n\n\t\tfor (const [recordKey, historyData] of Object.entries(exportData.histories)) {\n\t\t\ttry {\n\t\t\t\tconst history = new VersionHistory(recordKey, historyData.policy);\n\t\t\t\thistory.createdAt = new Date(historyData.createdAt);\n\t\t\t\thistory.lastAccessed = new Date(historyData.lastAccessed);\n\n\t\t\t\tfor (const versionData of historyData.versions) {\n\t\t\t\t\tconst version = new VersionEntry(versionData.data, versionData.metadata);\n\t\t\t\t\t// Restore original timestamp\n\t\t\t\t\tObject.defineProperty(version, \"timestamp\", {\n\t\t\t\t\t\tvalue: new Date(versionData.timestamp),\n\t\t\t\t\t\twritable: false\n\t\t\t\t\t});\n\t\t\t\t\thistory.versions.push(version);\n\t\t\t\t\thistory.totalSize += version.size;\n\t\t\t\t\tresults.versionsImported++;\n\t\t\t\t}\n\n\t\t\t\tthis.histories.set(recordKey, history);\n\t\t\t\tresults.historiesImported++;\n\t\t\t} catch (error) {\n\t\t\t\tresults.errors.push({\n\t\t\t\t\trecordKey,\n\t\t\t\t\terror: error.message\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Update stats\n\t\tthis._updateStats();\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Clear all version data\n\t * @returns {Object} Clear results\n\t */\n\tclear () {\n\t\tconst results = {\n\t\t\thistoriesCleared: this.histories.size,\n\t\t\tversionsCleared: this.stats.totalVersions,\n\t\t\tsizeFreed: this.stats.totalSize\n\t\t};\n\n\t\tthis.histories.clear();\n\t\tthis.stats = {\n\t\t\ttotalHistories: 0,\n\t\t\ttotalVersions: 0,\n\t\t\ttotalSize: 0,\n\t\t\tlastCleanup: new Date(),\n\t\t\tcleanupCount: this.stats.cleanupCount\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Validate retention policy\n\t * @param {Object} policy - Policy to validate\n\t * @returns {Object} Validated policy\n\t * @throws {ConfigurationError} If policy is invalid\n\t * @private\n\t */\n\t_validatePolicy (policy) {\n\t\tif (!policy || typeof policy !== \"object\") {\n\t\t\treturn { type: RetentionPolicies.NONE };\n\t\t}\n\n\t\tconst validTypes = Object.values(RetentionPolicies);\n\t\tif (policy.type && !validTypes.includes(policy.type)) {\n\t\t\tthrow new ConfigurationError(`Invalid retention policy type: ${policy.type}`, \"retentionPolicy.type\", policy.type);\n\t\t}\n\n\t\tconst validated = { ...policy };\n\n\t\tif (validated.type === RetentionPolicies.COUNT && validated.maxCount !== undefined) {\n\t\t\tif (typeof validated.maxCount !== \"number\" || validated.maxCount < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxCount must be a positive number\", \"retentionPolicy.maxCount\", validated.maxCount);\n\t\t\t}\n\t\t}\n\n\t\tif (validated.type === RetentionPolicies.TIME && validated.maxAge !== undefined) {\n\t\t\tif (typeof validated.maxAge !== \"number\" || validated.maxAge < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxAge must be a positive number\", \"retentionPolicy.maxAge\", validated.maxAge);\n\t\t\t}\n\t\t}\n\n\t\tif (validated.type === RetentionPolicies.SIZE && validated.maxSize !== undefined) {\n\t\t\tif (typeof validated.maxSize !== \"number\" || validated.maxSize < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxSize must be a positive number\", \"retentionPolicy.maxSize\", validated.maxSize);\n\t\t\t}\n\t\t}\n\n\t\treturn validated;\n\t}\n\n\t/**\n\t * Update global statistics\n\t * @private\n\t */\n\t_updateStats () {\n\t\tlet totalVersions = 0;\n\t\tlet totalSize = 0;\n\n\t\tfor (const history of this.histories.values()) {\n\t\t\ttotalVersions += history.getCount();\n\t\t\ttotalSize += history.getTotalSize();\n\t\t}\n\n\t\tthis.stats.totalHistories = this.histories.size;\n\t\tthis.stats.totalVersions = totalVersions;\n\t\tthis.stats.totalSize = totalSize;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { OperationTypes } from \"./constants.js\";\nimport { randomUUID as uuid } from \"crypto\";\n\n/**\n * Transaction operation entry\n */\nexport class TransactionOperation {\n\t/**\n\t * @param {string} type - Operation type\n\t * @param {string} key - Record key\n\t * @param {*} [oldValue] - Previous value (for rollback)\n\t * @param {*} [newValue] - New value\n\t * @param {Object} [metadata={}] - Additional metadata\n\t */\n\tconstructor (type, key, oldValue, newValue, metadata = {}) {\n\t\tthis.id = uuid();\n\t\tthis.type = type;\n\t\tthis.key = key;\n\t\tthis.oldValue = oldValue;\n\t\tthis.newValue = newValue;\n\t\tthis.metadata = metadata;\n\t\tthis.timestamp = new Date();\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Create rollback operation\n\t * @returns {TransactionOperation} Rollback operation\n\t */\n\tcreateRollback () {\n\t\tswitch (this.type) {\n\t\t\tcase OperationTypes.SET:\n\t\t\t\treturn this.oldValue === undefined ?\n\t\t\t\t\tnew TransactionOperation(OperationTypes.DELETE, this.key, this.newValue, undefined) :\n\t\t\t\t\tnew TransactionOperation(OperationTypes.SET, this.key, this.newValue, this.oldValue);\n\n\t\t\tcase OperationTypes.DELETE:\n\t\t\t\treturn new TransactionOperation(OperationTypes.SET, this.key, undefined, this.oldValue);\n\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(`Cannot create rollback for operation type: ${this.type}`, null, \"rollback\");\n\t\t}\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { TransactionStates, IsolationLevels } from \"./constants.js\";\nimport { TransactionOperation } from \"./transaction-operation.js\";\nimport { randomUUID as uuid } from \"crypto\";\n\n/**\n * Transaction implementation with ACID properties\n */\nexport class Transaction {\n\t/**\n\t * @param {string} [id] - Transaction ID (auto-generated if not provided)\n\t * @param {Object} [options={}] - Transaction options\n\t * @param {number} [options.isolationLevel=IsolationLevels.READ_COMMITTED] - Isolation level\n\t * @param {number} [options.timeout=60000] - Transaction timeout in milliseconds\n\t * @param {boolean} [options.readOnly=false] - Whether transaction is read-only\n\t */\n\tconstructor (id = uuid(), options = {}) {\n\t\tthis.id = id;\n\t\tthis.state = TransactionStates.PENDING;\n\t\tthis.isolationLevel = options.isolationLevel || IsolationLevels.READ_COMMITTED;\n\t\tthis.timeout = options.timeout || 60000;\n\t\tthis.readOnly = options.readOnly || false;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\n\t\t// Operation log for rollback\n\t\tthis.operations = [];\n\n\t\t// Read set for isolation (record keys read during transaction)\n\t\tthis.readSet = new Set();\n\n\t\t// Write set for isolation (record keys written during transaction)\n\t\tthis.writeSet = new Set();\n\n\t\t// Snapshot for repeatable read isolation\n\t\tthis.snapshot = new Map();\n\n\t\t// Validation callback for custom constraints\n\t\tthis.validationCallback = null;\n\n\t\t// Abort reason (set when transaction is aborted)\n\t\tthis.abortReason = null;\n\n\t\tObject.seal(this);\n\t}\n\n\t/**\n\t * Begin the transaction\n\t * @returns {Transaction} This transaction for chaining\n\t * @throws {TransactionError} If transaction is already active\n\t */\n\tbegin () {\n\t\tif (this.state !== TransactionStates.PENDING) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t`Cannot begin transaction in state: ${this.state}`,\n\t\t\t\tthis.id,\n\t\t\t\t\"begin\"\n\t\t\t);\n\t\t}\n\n\t\tthis.state = TransactionStates.ACTIVE;\n\t\tthis.startTime = new Date();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an operation to the transaction log\n\t * @param {string} type - Operation type\n\t * @param {string} key - Record key\n\t * @param {*} [oldValue] - Previous value\n\t * @param {*} [newValue] - New value\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {TransactionOperation} Created operation\n\t * @throws {TransactionError} If transaction is not active or is read-only\n\t */\n\taddOperation (type, key, oldValue, newValue, metadata = {}) {\n\t\tthis._checkActive();\n\n\t\tif (this.readOnly && type !== \"read\") {\n\t\t\tthrow new TransactionError(\n\t\t\t\t\"Cannot perform write operations in read-only transaction\",\n\t\t\t\tthis.id,\n\t\t\t\t\"write\"\n\t\t\t);\n\t\t}\n\n\t\t// Check timeout\n\t\tif (this._isTimedOut()) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t\"Transaction has timed out\",\n\t\t\t\tthis.id,\n\t\t\t\t\"timeout\"\n\t\t\t);\n\t\t}\n\n\t\tconst operation = new TransactionOperation(type, key, oldValue, newValue, metadata);\n\t\tthis.operations.push(operation);\n\n\t\t// Track read and write sets\n\t\tif (type === \"read\") {\n\t\t\tthis.readSet.add(key);\n\t\t} else {\n\t\t\tthis.writeSet.add(key);\n\t\t}\n\n\t\treturn operation;\n\t}\n\n\t/**\n\t * Set validation callback for custom constraints\n\t * @param {Function} callback - Validation function\n\t * @returns {Transaction} This transaction for chaining\n\t */\n\tsetValidation (callback) {\n\t\tthis.validationCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Validate transaction before commit\n\t * @param {Object} [context] - Validation context\n\t * @returns {boolean} True if validation passes\n\t * @throws {TransactionError} If validation fails\n\t */\n\tvalidate (context = {}) {\n\t\tif (this.validationCallback) {\n\t\t\tconst result = this.validationCallback(this, context);\n\t\t\tif (result !== true) {\n\t\t\t\tconst message = typeof result === \"string\" ? result : \"Transaction validation failed\";\n\t\t\t\tthrow new TransactionError(message, this.id, \"validation\");\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Commit the transaction\n\t * @param {Object} [context] - Commit context\n\t * @returns {Transaction} This transaction for chaining\n\t * @throws {TransactionError} If commit fails\n\t */\n\tcommit (context = {}) {\n\t\tthis._checkActive();\n\n\t\ttry {\n\t\t\t// Validate before commit\n\t\t\tthis.validate(context);\n\n\t\t\tthis.state = TransactionStates.COMMITTED;\n\t\t\tthis.endTime = new Date();\n\n\t\t\treturn this;\n\t\t} catch (error) {\n\t\t\t// Auto-abort on commit failure\n\t\t\tthis.abort();\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Abort the transaction\n\t * @param {string} [reason] - Reason for abort\n\t * @returns {Transaction} This transaction for chaining\n\t */\n\tabort (reason = \"User abort\") {\n\t\tif (this.state === TransactionStates.ABORTED || this.state === TransactionStates.COMMITTED) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.state = TransactionStates.ABORTED;\n\t\tthis.endTime = new Date();\n\t\tthis.abortReason = reason;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get rollback operations (in reverse order)\n\t * @returns {TransactionOperation[]} Array of rollback operations\n\t */\n\tgetRollbackOperations () {\n\t\treturn this.operations\n\t\t\t.slice()\n\t\t\t.reverse()\n\t\t\t.filter(op => op.type !== \"read\") // Filter out read operations\n\t\t\t.map(op => op.createRollback())\n\t\t\t.filter(op => op !== null);\n\t}\n\n\t/**\n\t * Check if transaction is active\n\t * @returns {boolean} True if transaction is active\n\t */\n\tisActive () {\n\t\treturn this.state === TransactionStates.ACTIVE;\n\t}\n\n\t/**\n\t * Check if transaction is committed\n\t * @returns {boolean} True if transaction is committed\n\t */\n\tisCommitted () {\n\t\treturn this.state === TransactionStates.COMMITTED;\n\t}\n\n\t/**\n\t * Check if transaction is aborted\n\t * @returns {boolean} True if transaction is aborted\n\t */\n\tisAborted () {\n\t\treturn this.state === TransactionStates.ABORTED;\n\t}\n\n\t/**\n\t * Get transaction duration\n\t * @returns {number|null} Duration in milliseconds, null if not completed\n\t */\n\tgetDuration () {\n\t\tif (!this.startTime) return null;\n\t\tconst endTime = this.endTime || new Date();\n\n\t\treturn endTime.getTime() - this.startTime.getTime();\n\t}\n\n\t/**\n\t * Get transaction statistics\n\t * @returns {Object} Transaction statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\tstate: this.state,\n\t\t\tisolationLevel: this.isolationLevel,\n\t\t\treadOnly: this.readOnly,\n\t\t\tstartTime: this.startTime,\n\t\t\tendTime: this.endTime,\n\t\t\tduration: this.getDuration(),\n\t\t\toperationCount: this.operations.length,\n\t\t\treadSetSize: this.readSet.size,\n\t\t\twriteSetSize: this.writeSet.size,\n\t\t\tsnapshotSize: this.snapshot.size,\n\t\t\tabortReason: this.abortReason,\n\t\t\ttimedOut: this._isTimedOut()\n\t\t};\n\t}\n\n\t/**\n\t * Export transaction for debugging/logging\n\t * @returns {Object} Exportable transaction data\n\t */\n\texport () {\n\t\treturn {\n\t\t\t...this.getStats(),\n\t\t\toperations: this.operations.map(op => ({\n\t\t\t\tid: op.id,\n\t\t\t\ttype: op.type,\n\t\t\t\tkey: op.key,\n\t\t\t\ttimestamp: op.timestamp,\n\t\t\t\tmetadata: op.metadata\n\t\t\t})),\n\t\t\treadSet: Array.from(this.readSet),\n\t\t\twriteSet: Array.from(this.writeSet)\n\t\t};\n\t}\n\n\t/**\n\t * Check if transaction is active and throw if not\n\t * @throws {TransactionError} If transaction is not active\n\t * @private\n\t */\n\t_checkActive () {\n\t\tif (this.state !== TransactionStates.ACTIVE) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t`Transaction is not active (current state: ${this.state})`,\n\t\t\t\tthis.id,\n\t\t\t\t\"state\"\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Check if transaction has timed out\n\t * @returns {boolean} True if timed out\n\t * @private\n\t */\n\t_isTimedOut () {\n\t\tif (!this.startTime) return false;\n\n\t\treturn Date.now() - this.startTime.getTime() > this.timeout;\n\t}\n}\n","import { ConcurrencyError } from \"./errors.js\";\nimport { LockTypes } from \"./constants.js\";\n\n/**\n * Lock manager for controlling concurrent access\n */\nexport class LockManager {\n\tconstructor () {\n\t\t// Map<recordKey, {type: string, holders: Set<transactionId>, waiters: Array}>\n\t\tthis.locks = new Map();\n\t\tthis.lockTimeout = 30000; // 30 seconds default\n\t}\n\n\t/**\n\t * Acquire a lock on a record\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key to lock\n\t * @param {string} lockType - Type of lock (shared/exclusive)\n\t * @param {number} [timeout] - Lock timeout in milliseconds\n\t * @returns {Promise<boolean>} True if lock acquired\n\t * @throws {ConcurrencyError} If lock cannot be acquired\n\t */\n\tasync acquireLock (transactionId, recordKey, lockType, timeout = this.lockTimeout) {\n\t\tconst startTime = Date.now();\n\n\t\twhile (Date.now() - startTime < timeout) {\n\t\t\tif (this._tryAcquireLock(transactionId, recordKey, lockType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Wait a bit before retrying\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 10));\n\t\t}\n\n\t\tthrow new ConcurrencyError(\n\t\t\t`Failed to acquire ${lockType} lock on record '${recordKey}' within timeout`,\n\t\t\trecordKey,\n\t\t\t\"lock\"\n\t\t);\n\t}\n\n\t/**\n\t * Try to acquire lock immediately\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key\n\t * @param {string} lockType - Lock type\n\t * @returns {boolean} True if lock acquired\n\t * @private\n\t */\n\t_tryAcquireLock (transactionId, recordKey, lockType) {\n\t\tconst existingLock = this.locks.get(recordKey);\n\n\t\tif (!existingLock) {\n\t\t\t// No existing lock, create new one\n\t\t\tthis.locks.set(recordKey, {\n\t\t\t\ttype: lockType,\n\t\t\t\tholders: new Set([transactionId]),\n\t\t\t\twaiters: []\n\t\t\t});\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if already holding the lock\n\t\tif (existingLock.holders.has(transactionId)) {\n\t\t\t// Check for lock upgrade\n\t\t\tif (existingLock.type === LockTypes.SHARED && lockType === LockTypes.EXCLUSIVE) {\n\t\t\t\t// Can upgrade if we're the only holder\n\t\t\t\tif (existingLock.holders.size === 1) {\n\t\t\t\t\texistingLock.type = LockTypes.EXCLUSIVE;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false; // Cannot upgrade with other holders\n\t\t\t}\n\n\t\t\treturn true; // Already have compatible lock\n\t\t}\n\n\t\t// Check compatibility\n\t\tif (lockType === LockTypes.SHARED && existingLock.type === LockTypes.SHARED) {\n\t\t\t// Shared locks are compatible\n\t\t\texistingLock.holders.add(transactionId);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Exclusive locks or mixed locks are not compatible\n\t\treturn false;\n\t}\n\n\t/**\n\t * Release a lock\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if lock was released\n\t */\n\treleaseLock (transactionId, recordKey) {\n\t\tconst lock = this.locks.get(recordKey);\n\t\tif (!lock || !lock.holders.has(transactionId)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlock.holders.delete(transactionId);\n\n\t\t// If no more holders, remove the lock\n\t\tif (lock.holders.size === 0) {\n\t\t\tthis.locks.delete(recordKey);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Release all locks held by a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {number} Number of locks released\n\t */\n\treleaseAllLocks (transactionId) {\n\t\tlet released = 0;\n\n\t\tfor (const [recordKey, lock] of this.locks) {\n\t\t\tif (lock.holders.has(transactionId)) {\n\t\t\t\tlock.holders.delete(transactionId);\n\t\t\t\treleased++;\n\n\t\t\t\t// If no more holders, remove the lock\n\t\t\t\tif (lock.holders.size === 0) {\n\t\t\t\t\tthis.locks.delete(recordKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn released;\n\t}\n\n\t/**\n\t * Check if transaction holds any locks\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {boolean} True if transaction holds locks\n\t */\n\tholdsLocks (transactionId) {\n\t\tfor (const lock of this.locks.values()) {\n\t\t\tif (lock.holders.has(transactionId)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get lock statistics\n\t * @returns {Object} Lock statistics\n\t */\n\tgetStats () {\n\t\tconst stats = {\n\t\t\ttotalLocks: this.locks.size,\n\t\t\tsharedLocks: 0,\n\t\t\texclusiveLocks: 0,\n\t\t\tlockHolders: new Set(),\n\t\t\trecordsLocked: []\n\t\t};\n\n\t\tfor (const [recordKey, lock] of this.locks) {\n\t\t\tif (lock.type === LockTypes.SHARED) {\n\t\t\t\tstats.sharedLocks++;\n\t\t\t} else {\n\t\t\t\tstats.exclusiveLocks++;\n\t\t\t}\n\n\t\t\tfor (const holder of lock.holders) {\n\t\t\t\tstats.lockHolders.add(holder);\n\t\t\t}\n\n\t\t\tstats.recordsLocked.push({\n\t\t\t\trecordKey,\n\t\t\t\ttype: lock.type,\n\t\t\t\tholders: Array.from(lock.holders)\n\t\t\t});\n\t\t}\n\n\t\tstats.uniqueHolders = stats.lockHolders.size;\n\n\t\treturn stats;\n\t}\n}\n","/**\n * Transaction statistics manager for tracking metrics and performance\n */\nexport class TransactionStatistics {\n\tconstructor () {\n\t\tthis.stats = {\n\t\t\ttotalTransactions: 0,\n\t\t\tcommittedTransactions: 0,\n\t\t\tabortedTransactions: 0,\n\t\t\tactiveTransactions: 0,\n\t\t\taverageDuration: 0,\n\t\t\ttotalDuration: 0\n\t\t};\n\t}\n\n\t/**\n\t * Increment total transaction count\n\t */\n\tincrementTotal () {\n\t\tthis.stats.totalTransactions++;\n\t}\n\n\t/**\n\t * Increment committed transaction count\n\t */\n\tincrementCommitted () {\n\t\tthis.stats.committedTransactions++;\n\t}\n\n\t/**\n\t * Increment aborted transaction count\n\t */\n\tincrementAborted () {\n\t\tthis.stats.abortedTransactions++;\n\t}\n\n\t/**\n\t * Increment active transaction count\n\t */\n\tincrementActive () {\n\t\tthis.stats.activeTransactions++;\n\t}\n\n\t/**\n\t * Decrement active transaction count\n\t */\n\tdecrementActive () {\n\t\tthis.stats.activeTransactions--;\n\t}\n\n\t/**\n\t * Update duration statistics based on completed transaction\n\t * @param {Transaction} transaction - Completed transaction\n\t */\n\tupdateDurationStats (transaction) {\n\t\tconst duration = transaction.getDuration();\n\t\tif (duration !== null) {\n\t\t\tthis.stats.totalDuration += duration;\n\t\t\tconst completedTransactions = this.stats.committedTransactions + this.stats.abortedTransactions;\n\t\t\tthis.stats.averageDuration = this.stats.totalDuration / completedTransactions;\n\t\t}\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @param {Object} lockStats - Lock manager statistics\n\t * @param {number} activeCount - Current active transaction count\n\t * @param {number} transactionCounter - Global transaction counter\n\t * @returns {Object} Complete statistics object\n\t */\n\tgetStats (lockStats, activeCount, transactionCounter) {\n\t\treturn {\n\t\t\t...this.stats,\n\t\t\tactiveTransactions: activeCount,\n\t\t\tlockStats,\n\t\t\ttransactionCounter\n\t\t};\n\t}\n\n\t/**\n\t * Reset all statistics to zero\n\t */\n\treset () {\n\t\tthis.stats = {\n\t\t\ttotalTransactions: 0,\n\t\t\tcommittedTransactions: 0,\n\t\t\tabortedTransactions: 0,\n\t\t\tactiveTransactions: 0,\n\t\t\taverageDuration: 0,\n\t\t\ttotalDuration: 0\n\t\t};\n\t}\n\n\t/**\n\t * Get raw statistics object (for internal use)\n\t * @returns {Object} Raw stats object\n\t */\n\tgetRawStats () {\n\t\treturn { ...this.stats };\n\t}\n}\n","/**\n * Analyzer for detecting relationships between transaction keys\n * Handles hierarchical, semantic, pattern, temporal, and functional relationships\n */\nexport class KeyRelationshipAnalyzer {\n\t/**\n\t * Creates a new KeyRelationshipAnalyzer instance\n\t * Initializes caches for pattern and semantic analysis\n\t */\n\tconstructor () {\n\t\t// Pattern cache for performance\n\t\tthis.patternCache = new Map();\n\t\tthis.semanticCache = new Map();\n\t}\n\n\t/**\n\t * Check if two keys are related through various relationship types\n\t * @param {string} key1 - First key\n\t * @param {string} key2 - Second key\n\t * @returns {boolean} True if keys are related\n\t */\n\tareKeysRelated (key1, key2) {\n\t\t// Direct match - always related\n\t\tif (key1 === key2) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for hierarchical relationships\n\t\tif (this._hasHierarchicalKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for semantic relationships\n\t\tif (this._hasSemanticKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for pattern-based relationships\n\t\tif (this._hasPatternBasedKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for composite key relationships\n\t\tif (this._hasCompositeKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for temporal relationships\n\t\tif (this._hasTemporalKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for index-based relationships\n\t\tif (this._hasIndexKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for collection relationships\n\t\tif (this._hasCollectionKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for functional dependencies\n\t\tif (this._hasFunctionalDependency(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key falls within the range that could affect a snapshot\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {string} operationKey - Key from other transaction's operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key could affect snapshot\n\t */\n\tisKeyInSnapshotRange (transaction, operationKey, snapshotKey, expectedValue) {\n\t\t// Direct key match - always affects snapshot\n\t\tif (operationKey === snapshotKey) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for explicit range metadata stored with the snapshot\n\t\tif (this._hasExplicitRangeMetadata(transaction, snapshotKey)) {\n\t\t\treturn this._checkExplicitRange(transaction, operationKey, snapshotKey);\n\t\t}\n\n\t\t// Infer range from snapshot key patterns\n\t\tif (this._isPatternBasedSnapshot(snapshotKey)) {\n\t\t\treturn this._checkPatternBasedRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for hierarchical key relationships\n\t\tif (this._hasHierarchicalRelationship(operationKey, snapshotKey)) {\n\t\t\treturn this._checkHierarchicalRange(operationKey, snapshotKey, expectedValue);\n\t\t}\n\n\t\t// Check for index-based range queries\n\t\tif (this._isIndexBasedSnapshot(transaction, snapshotKey)) {\n\t\t\treturn this._checkIndexBasedRange(transaction, operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for semantic key relationships\n\t\tif (this._hasSemanticRelationship(operationKey, snapshotKey)) {\n\t\t\treturn this._checkSemanticRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for temporal range relationships\n\t\tif (this._isTemporalSnapshot(snapshotKey)) {\n\t\t\treturn this._checkTemporalRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for composite key range relationships\n\t\tif (this._isCompositeKeySnapshot(snapshotKey)) {\n\t\t\treturn this._checkCompositeKeyRange(operationKey, snapshotKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key matches a range specification\n\t * @param {string} key - Key to check\n\t * @param {Object} range - Range specification\n\t * @returns {boolean} True if key is in range\n\t */\n\tkeyMatchesRange (key, range) {\n\t\tif (range.min !== undefined && range.max !== undefined) {\n\t\t\treturn key >= range.min && key <= range.max;\n\t\t}\n\n\t\tif (range.prefix !== undefined) {\n\t\t\treturn key.startsWith(range.prefix);\n\t\t}\n\n\t\tif (range.pattern !== undefined) {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(range.pattern);\n\n\t\t\t\treturn regex.test(key);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if key matches a query specification\n\t * @param {string} key - Key to check\n\t * @param {Object} queryInfo - Query specification\n\t * @returns {boolean} True if key matches query\n\t */\n\tkeyMatchesQuery (key, queryInfo) {\n\t\tif (queryInfo.type === \"range\") {\n\t\t\treturn this.keyMatchesRange(key, queryInfo);\n\t\t}\n\n\t\tif (queryInfo.type === \"prefix\") {\n\t\t\treturn key.startsWith(queryInfo.prefix || \"\");\n\t\t}\n\n\t\tif (queryInfo.type === \"pattern\") {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(queryInfo.pattern || \"\");\n\n\t\t\t\treturn regex.test(key);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (queryInfo.type === \"in\") {\n\t\t\treturn Array.isArray(queryInfo.values) && queryInfo.values.includes(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if key matches an index range\n\t * @param {string} key - Key to check\n\t * @param {Object} indexRange - Index range specification\n\t * @returns {boolean} True if key matches index range\n\t */\n\tkeyMatchesIndexRange (key, indexRange) {\n\t\tif (indexRange.fields && Array.isArray(indexRange.fields)) {\n\t\t\tfor (const field of indexRange.fields) {\n\t\t\t\tif (key.includes(field)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (indexRange.values) {\n\t\t\treturn this.keyMatchesRange(key, indexRange.values);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have a hierarchical relationship\n\t * Analyzes parent-child, sibling, and ancestor-descendant relationships\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have hierarchical relationship\n\t * @private\n\t */\n\t_hasHierarchicalKeyRelationship (key1, key2) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (key1.includes(sep) && key2.includes(sep)) {\n\t\t\t\tconst parts1 = key1.split(sep);\n\t\t\t\tconst parts2 = key2.split(sep);\n\n\t\t\t\tif (this._isParentChildRelationship(parts1, parts2) ||\n\t\t\t\t\tthis._isSiblingRelationship(parts1, parts2) ||\n\t\t\t\t\tthis._isAncestorDescendantRelationship(parts1, parts2)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn key1.startsWith(key2) || key2.startsWith(key1);\n\t}\n\n\t/**\n\t * Check if operation key and snapshot key have hierarchical relationship for snapshot range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if keys have hierarchical relationship\n\t * @private\n\t */\n\t_hasHierarchicalRelationship (operationKey, snapshotKey) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key falls within hierarchical range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key is in hierarchical range\n\t * @private\n\t */\n\t_checkHierarchicalRange (operationKey, snapshotKey, expectedValue) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\tconst opParts = operationKey.split(sep);\n\t\t\t\tconst snapParts = snapshotKey.split(sep);\n\n\t\t\t\tif (this._isParentChildRelationship(opParts, snapParts) ||\n\t\t\t\t\tthis._isSiblingRelationship(opParts, snapParts) ||\n\t\t\t\t\tthis._isCollectionMembership(opParts, snapParts, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have a parent-child relationship\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if there's a parent-child relationship\n\t * @private\n\t */\n\t_isParentChildRelationship (opParts, snapParts) {\n\t\tif (opParts.length > snapParts.length) {\n\t\t\tfor (let i = 0; i < snapParts.length; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (snapParts.length > opParts.length) {\n\t\t\tfor (let i = 0; i < opParts.length; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have a sibling relationship\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if there's a sibling relationship\n\t * @private\n\t */\n\t_isSiblingRelationship (opParts, snapParts) {\n\t\tif (opParts.length === snapParts.length && opParts.length > 1) {\n\t\t\tfor (let i = 0; i < opParts.length - 1; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn opParts[opParts.length - 1] !== snapParts[snapParts.length - 1];\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have an ancestor-descendant relationship\n\t * @param {string[]} parts1 - Parts from first key\n\t * @param {string[]} parts2 - Parts from second key\n\t * @returns {boolean} True if there's an ancestor-descendant relationship\n\t * @private\n\t */\n\t_isAncestorDescendantRelationship (parts1, parts2) {\n\t\tconst shorter = parts1.length < parts2.length ? parts1 : parts2;\n\t\tconst longer = parts1.length < parts2.length ? parts2 : parts1;\n\n\t\tif (shorter.length < longer.length) {\n\t\t\tfor (let i = 0; i < shorter.length; i++) {\n\t\t\t\tif (shorter[i] !== longer[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key parts indicate collection membership relative to snapshot\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key is collection member\n\t * @private\n\t */\n\t_isCollectionMembership (opParts, snapParts, expectedValue) {\n\t\tif (Array.isArray(expectedValue) ||\n\t\t\texpectedValue && typeof expectedValue === \"object\" && expectedValue.length !== undefined) {\n\t\t\treturn this._isParentChildRelationship(opParts, snapParts) ||\n\t\t\t\tthis._isSiblingRelationship(opParts, snapParts);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have semantic relationship based on their content meaning\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have semantic relationship\n\t * @private\n\t */\n\t_hasSemanticKeyRelationship (key1, key2) {\n\t\tconst semantics1 = this._extractSemanticIdentifiers(key1);\n\t\tconst semantics2 = this._extractSemanticIdentifiers(key2);\n\n\t\tfor (const sem1 of semantics1) {\n\t\t\tfor (const sem2 of semantics2) {\n\t\t\t\tif (this._areSemanticallySimilar(sem1, sem2)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._hasEntityRelationship(semantics1, semantics2);\n\t}\n\n\t/**\n\t * Check if operation key and snapshot key have semantic relationship for snapshot range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if keys have semantic relationship\n\t * @private\n\t */\n\t_hasSemanticRelationship (operationKey, snapshotKey) {\n\t\tconst semanticPrefixes = [\n\t\t\t\"user\", \"account\", \"profile\", \"session\",\n\t\t\t\"order\", \"product\", \"cart\", \"payment\",\n\t\t\t\"post\", \"comment\", \"thread\", \"message\",\n\t\t\t\"document\", \"file\", \"folder\", \"workspace\"\n\t\t];\n\n\t\tfor (const prefix of semanticPrefixes) {\n\t\t\tif (operationKey.toLowerCase().includes(prefix) &&\n\t\t\t\tsnapshotKey.toLowerCase().includes(prefix)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key falls within semantic range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if operation key is in semantic range\n\t * @private\n\t */\n\t_checkSemanticRange (operationKey, snapshotKey) {\n\t\tconst opSemantics = this._extractSemanticIdentifiers(operationKey);\n\t\tconst snapSemantics = this._extractSemanticIdentifiers(snapshotKey);\n\n\t\tfor (const opSemantic of opSemantics) {\n\t\t\tfor (const snapSemantic of snapSemantics) {\n\t\t\t\tif (this._areSemanticallySimilar(opSemantic, snapSemantic)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Extract semantic identifiers from a key string using pattern matching\n\t * @param {string} key - Key to extract semantic identifiers from\n\t * @returns {string[]} Array of semantic identifiers found in the key\n\t * @private\n\t */\n\t_extractSemanticIdentifiers (key) {\n\t\tconst cacheKey = `semantic:${key}`;\n\t\tif (this.semanticCache.has(cacheKey)) {\n\t\t\treturn this.semanticCache.get(cacheKey);\n\t\t}\n\n\t\tconst identifiers = [];\n\t\tconst patterns = [\n\t\t\t/(\\w+):(\\w+)/g, // entity:id\n\t\t\t/(\\w+)_(\\w+)/g, // entity_id\n\t\t\t/([a-z]+)([A-Z]\\w+)/g // entityId (camelCase)\n\t\t];\n\n\t\tfor (const pattern of patterns) {\n\t\t\tlet match;\n\t\t\twhile ((match = pattern.exec(key)) !== null) {\n\t\t\t\tidentifiers.push(match[1].toLowerCase());\n\t\t\t\tif (match[2]) {\n\t\t\t\t\tidentifiers.push(match[2].toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.semanticCache.set(cacheKey, identifiers);\n\n\t\treturn identifiers;\n\t}\n\n\t/**\n\t * Check if two semantic identifiers are similar\n\t * Handles singular/plural forms and semantic equivalence\n\t * @param {string} id1 - First identifier\n\t * @param {string} id2 - Second identifier\n\t * @returns {boolean} True if identifiers are semantically similar\n\t * @private\n\t */\n\t_areSemanticallySimilar (id1, id2) {\n\t\tif (id1 === id2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst singularPlural = [\n\t\t\t[\"user\", \"users\"], [\"account\", \"accounts\"], [\"profile\", \"profiles\"],\n\t\t\t[\"order\", \"orders\"], [\"product\", \"products\"], [\"item\", \"items\"],\n\t\t\t[\"post\", \"posts\"], [\"comment\", \"comments\"], [\"message\", \"messages\"],\n\t\t\t[\"file\", \"files\"], [\"document\", \"documents\"], [\"folder\", \"folders\"]\n\t\t];\n\n\t\tfor (const [singular, plural] of singularPlural) {\n\t\t\tif (id1 === singular && id2 === plural ||\n\t\t\t\tid1 === plural && id2 === singular) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two semantic identifier arrays have entity relationships\n\t * @param {string[]} semantics1 - Semantic identifiers from first key\n\t * @param {string[]} semantics2 - Semantic identifiers from second key\n\t * @returns {boolean} True if entities have defined relationships\n\t * @private\n\t */\n\t_hasEntityRelationship (semantics1, semantics2) {\n\t\tconst entityRelations = [\n\t\t\t[\"user\", \"profile\"], [\"user\", \"account\"], [\"user\", \"session\"],\n\t\t\t[\"profile\", \"account\"], [\"account\", \"session\"],\n\t\t\t[\"user\", \"order\"], [\"user\", \"cart\"], [\"user\", \"payment\"],\n\t\t\t[\"order\", \"product\"], [\"order\", \"payment\"], [\"cart\", \"product\"],\n\t\t\t[\"user\", \"post\"], [\"user\", \"comment\"], [\"user\", \"message\"],\n\t\t\t[\"post\", \"comment\"], [\"thread\", \"message\"], [\"document\", \"file\"],\n\t\t\t[\"user\", \"workspace\"], [\"workspace\", \"document\"], [\"workspace\", \"folder\"],\n\t\t\t[\"folder\", \"file\"], [\"document\", \"file\"]\n\t\t];\n\n\t\tfor (const [entity1, entity2] of entityRelations) {\n\t\t\tconst hasEntity1InBoth = semantics1.includes(entity1) && semantics2.includes(entity2);\n\t\t\tconst hasEntity2InBoth = semantics1.includes(entity2) && semantics2.includes(entity1);\n\n\t\t\tif (hasEntity1InBoth || hasEntity2InBoth) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have pattern-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have pattern-based relationship\n\t * @private\n\t */\n\t_hasPatternBasedKeyRelationship (key1, key2) {\n\t\tif (this._isPatternBasedSnapshot(key1)) {\n\t\t\treturn this._checkPatternBasedRange(key2, key1);\n\t\t}\n\n\t\tif (this._isPatternBasedSnapshot(key2)) {\n\t\t\treturn this._checkPatternBasedRange(key1, key2);\n\t\t}\n\n\t\treturn this._haveSimilarPatterns(key1, key2);\n\t}\n\n\t/**\n\t * Check if a snapshot key contains pattern-based wildcards or indicators\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key contains pattern-based elements\n\t * @private\n\t */\n\t_isPatternBasedSnapshot (snapshotKey) {\n\t\treturn snapshotKey.includes(\"*\") ||\n\t\t\tsnapshotKey.includes(\"?\") ||\n\t\t\tsnapshotKey.includes(\"[\") ||\n\t\t\tsnapshotKey.includes(\"{\") ||\n\t\t\tsnapshotKey.endsWith(\"_range\") ||\n\t\t\tsnapshotKey.endsWith(\"_pattern\");\n\t}\n\n\t/**\n\t * Check if operation key matches a pattern-based snapshot key range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Pattern-based snapshot key\n\t * @returns {boolean} True if operation key matches pattern\n\t * @private\n\t */\n\t_checkPatternBasedRange (operationKey, snapshotKey) {\n\t\tif (snapshotKey.includes(\"*\")) {\n\t\t\tconst pattern = snapshotKey.replace(/\\*/g, \".*\");\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${pattern}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\tconst prefix = snapshotKey.split(\"*\")[0];\n\n\t\t\t\treturn operationKey.startsWith(prefix);\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"?\")) {\n\t\t\tconst pattern = snapshotKey.replace(/\\?/g, \".\");\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${pattern}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"[\")) {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${snapshotKey}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"{\") && snapshotKey.includes(\"}\")) {\n\t\t\tconst beforeBrace = snapshotKey.substring(0, snapshotKey.indexOf(\"{\"));\n\t\t\tconst afterBrace = snapshotKey.substring(snapshotKey.indexOf(\"}\") + 1);\n\t\t\tconst choices = snapshotKey.substring(\n\t\t\t\tsnapshotKey.indexOf(\"{\") + 1,\n\t\t\t\tsnapshotKey.indexOf(\"}\")\n\t\t\t).split(\",\");\n\n\t\t\tfor (const choice of choices) {\n\t\t\t\tconst fullPattern = beforeBrace + choice.trim() + afterBrace;\n\t\t\t\tif (operationKey === fullPattern || operationKey.startsWith(fullPattern)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.endsWith(\"_range\") || snapshotKey.endsWith(\"_pattern\")) {\n\t\t\tconst baseKey = snapshotKey.replace(/_range$|_pattern$/, \"\");\n\n\t\t\treturn operationKey.startsWith(baseKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have similar structural patterns\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have similar patterns\n\t * @private\n\t */\n\t_haveSimilarPatterns (key1, key2) {\n\t\tconst pattern1 = this._extractKeyPattern(key1);\n\t\tconst pattern2 = this._extractKeyPattern(key2);\n\n\t\treturn this._patternsAreSimilar(pattern1, pattern2);\n\t}\n\n\t/**\n\t * Extract structural pattern from a key by normalizing variable components\n\t * @param {string} key - Key to extract pattern from\n\t * @returns {string} Normalized pattern string\n\t * @private\n\t */\n\t_extractKeyPattern (key) {\n\t\tconst cacheKey = `pattern:${key}`;\n\t\tif (this.patternCache.has(cacheKey)) {\n\t\t\treturn this.patternCache.get(cacheKey);\n\t\t}\n\n\t\tconst pattern = key\n\t\t\t.replace(/\\d+/g, \"#\") // Numbers become #\n\t\t\t.replace(/[a-f0-9]{8,}/g, \"&\") // Hashes/UUIDs become &\n\t\t\t.replace(/\\w{1,3}(?=:|_|-)/g, \"@\"); // Short prefixes become @\n\n\t\tthis.patternCache.set(cacheKey, pattern);\n\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Check if two patterns are similar based on similarity threshold\n\t * @param {string} pattern1 - First pattern to compare\n\t * @param {string} pattern2 - Second pattern to compare\n\t * @returns {boolean} True if patterns are similar (>70% similarity)\n\t * @private\n\t */\n\t_patternsAreSimilar (pattern1, pattern2) {\n\t\tif (pattern1 === pattern2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst similarity = this._calculatePatternSimilarity(pattern1, pattern2);\n\n\t\treturn similarity > 0.7;\n\t}\n\n\t/**\n\t * Calculate similarity score between two patterns using Levenshtein distance\n\t * @param {string} pattern1 - First pattern\n\t * @param {string} pattern2 - Second pattern\n\t * @returns {number} Similarity score between 0 and 1\n\t * @private\n\t */\n\t_calculatePatternSimilarity (pattern1, pattern2) {\n\t\tconst len1 = pattern1.length;\n\t\tconst len2 = pattern2.length;\n\t\tconst maxLen = Math.max(len1, len2);\n\n\t\tif (maxLen === 0) return 1;\n\n\t\tconst distance = this._levenshteinDistance(pattern1, pattern2);\n\n\t\treturn 1 - distance / maxLen;\n\t}\n\n\t/**\n\t * Calculate Levenshtein distance between two strings\n\t * @param {string} str1 - First string\n\t * @param {string} str2 - Second string\n\t * @returns {number} Edit distance between strings\n\t * @private\n\t */\n\t_levenshteinDistance (str1, str2) {\n\t\tconst matrix = [];\n\n\t\tfor (let i = 0; i <= str2.length; i++) {\n\t\t\tmatrix[i] = [i];\n\t\t}\n\n\t\tfor (let j = 0; j <= str1.length; j++) {\n\t\t\tmatrix[0][j] = j;\n\t\t}\n\n\t\tfor (let i = 1; i <= str2.length; i++) {\n\t\t\tfor (let j = 1; j <= str1.length; j++) {\n\t\t\t\tif (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n\t\t\t\t\tmatrix[i][j] = matrix[i - 1][j - 1];\n\t\t\t\t} else {\n\t\t\t\t\tmatrix[i][j] = Math.min(\n\t\t\t\t\t\tmatrix[i - 1][j - 1] + 1, // substitution\n\t\t\t\t\t\tmatrix[i][j - 1] + 1, // insertion\n\t\t\t\t\t\tmatrix[i - 1][j] + 1 // deletion\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn matrix[str2.length][str1.length];\n\t}\n\n\t/**\n\t * Check if two keys have temporal relationship based on time-related components\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have temporal relationship\n\t * @private\n\t */\n\t_hasTemporalKeyRelationship (key1, key2) {\n\t\tif (this._isTemporalSnapshot(key1) && this._isTemporalSnapshot(key2)) {\n\t\t\tconst temporal1 = this._extractTemporalComponents(key1);\n\t\t\tconst temporal2 = this._extractTemporalComponents(key2);\n\n\t\t\treturn this._haveTemporalOverlap(temporal1, temporal2);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a snapshot key contains temporal/time-related keywords\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key contains temporal indicators\n\t * @private\n\t */\n\t_isTemporalSnapshot (snapshotKey) {\n\t\tconst temporalKeywords = [\n\t\t\t\"timestamp\", \"time\", \"date\", \"created\", \"updated\", \"modified\",\n\t\t\t\"datetime\", \"ts\", \"epoch\", \"iso\", \"utc\", \"log\", \"event\", \"history\"\n\t\t];\n\n\t\treturn temporalKeywords.some(keyword =>\n\t\t\tsnapshotKey.toLowerCase().includes(keyword)\n\t\t);\n\t}\n\n\t/**\n\t * Check if operation key falls within temporal range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Temporal snapshot key\n\t * @returns {boolean} True if operation key is in temporal range\n\t * @private\n\t */\n\t_checkTemporalRange (operationKey, snapshotKey) {\n\t\tif (this._isTemporalSnapshot(operationKey)) {\n\t\t\tconst opTemporal = this._extractTemporalComponents(operationKey);\n\t\t\tconst snapTemporal = this._extractTemporalComponents(snapshotKey);\n\n\t\t\treturn this._haveTemporalOverlap(opTemporal, snapTemporal);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Extract temporal components from a key using regex patterns\n\t * @param {string} key - Key to extract temporal components from\n\t * @returns {Object} Object with temporal component flags\n\t * @private\n\t */\n\t_extractTemporalComponents (key) {\n\t\tconst components = {\n\t\t\thasDate: false,\n\t\t\thasTime: false,\n\t\t\thasTimestamp: false,\n\t\t\thasEpoch: false\n\t\t};\n\n\t\tif ((/\\d{4}-\\d{2}-\\d{2}/).test(key)) components.hasDate = true;\n\t\tif ((/\\d{2}:\\d{2}:\\d{2}/).test(key)) components.hasTime = true;\n\t\tif ((/\\d{13}/).test(key)) components.hasTimestamp = true;\n\t\tif ((/\\d{10}/).test(key)) components.hasEpoch = true;\n\n\t\treturn components;\n\t}\n\n\t/**\n\t * Check if two temporal component objects have overlapping temporal elements\n\t * @param {Object} opTemporal - Temporal components from operation key\n\t * @param {Object} snapTemporal - Temporal components from snapshot key\n\t * @returns {boolean} True if temporal components overlap\n\t * @private\n\t */\n\t_haveTemporalOverlap (opTemporal, snapTemporal) {\n\t\treturn opTemporal.hasDate && snapTemporal.hasDate ||\n\t\t\topTemporal.hasTime && snapTemporal.hasTime ||\n\t\t\topTemporal.hasTimestamp && snapTemporal.hasTimestamp ||\n\t\t\topTemporal.hasEpoch && snapTemporal.hasEpoch;\n\t}\n\n\t/**\n\t * Check if two keys have composite key relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have composite key relationship\n\t * @private\n\t */\n\t_hasCompositeKeyRelationship (key1, key2) {\n\t\treturn this._checkCompositeKeyRange(key1, key2) ||\n\t\t\tthis._checkCompositeKeyRange(key2, key1);\n\t}\n\n\t/**\n\t * Check if a snapshot key represents a composite key structure\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key is composite key structure\n\t * @private\n\t */\n\t_isCompositeKeySnapshot (snapshotKey) {\n\t\treturn snapshotKey.includes(\":\") ||\n\t\t\tsnapshotKey.includes(\"#\") ||\n\t\t\tsnapshotKey.includes(\"|\") ||\n\t\t\tsnapshotKey.includes(\"@\") ||\n\t\t\tsnapshotKey.split(\"_\").length > 2 ||\n\t\t\tsnapshotKey.split(\"-\").length > 2;\n\t}\n\n\t/**\n\t * Check if operation key falls within composite key range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Composite snapshot key\n\t * @returns {boolean} True if operation key is in composite key range\n\t * @private\n\t */\n\t_checkCompositeKeyRange (operationKey, snapshotKey) {\n\t\tconst separators = [\":\", \"#\", \"|\", \"@\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\tconst opParts = operationKey.split(sep);\n\t\t\t\tconst snapParts = snapshotKey.split(sep);\n\n\t\t\t\tif (this._hasCompositeKeyOverlap(opParts, snapParts)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key parts overlap with snapshot key parts in composite key\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if key parts have composite overlap\n\t * @private\n\t */\n\t_hasCompositeKeyOverlap (opParts, snapParts) {\n\t\tconst minLength = Math.min(opParts.length, snapParts.length);\n\n\t\tfor (let i = 1; i <= minLength; i++) {\n\t\t\tlet allMatch = true;\n\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\tif (opParts[j] !== snapParts[j]) {\n\t\t\t\t\tallMatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allMatch) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have index-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have index relationship\n\t * @private\n\t */\n\t_hasIndexKeyRelationship (key1, key2) {\n\t\tconst isIndex1 = this._isIndexKey(key1);\n\t\tconst isIndex2 = this._isIndexKey(key2);\n\n\t\tif (isIndex1 || isIndex2) {\n\t\t\tconst base1 = this._extractBaseKeyFromIndex(key1);\n\t\t\tconst base2 = this._extractBaseKeyFromIndex(key2);\n\n\t\t\treturn base1 === base2 ||\n\t\t\t\tkey1.startsWith(base2) ||\n\t\t\t\tkey2.startsWith(base1) ||\n\t\t\t\tbase1.startsWith(base2) ||\n\t\t\t\tbase2.startsWith(base1);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key represents an index key structure\n\t * @param {string} key - Key to check\n\t * @returns {boolean} True if key is an index key\n\t * @private\n\t */\n\t_isIndexKey (key) {\n\t\treturn key.includes(\"_index\") ||\n\t\t\tkey.includes(\"_idx\") ||\n\t\t\tkey.startsWith(\"idx_\") ||\n\t\t\tkey.includes(\"_key\") ||\n\t\t\tkey.includes(\"_lookup\");\n\t}\n\n\t/**\n\t * Extract base key from an index key by removing index-specific suffixes\n\t * @param {string} indexKey - Index key to extract base from\n\t * @returns {string} Base key without index identifiers\n\t * @private\n\t */\n\t_extractBaseKeyFromIndex (indexKey) {\n\t\treturn indexKey\n\t\t\t.replace(/_index.*$/, \"\")\n\t\t\t.replace(/_idx.*$/, \"\")\n\t\t\t.replace(/^idx_/, \"\")\n\t\t\t.replace(/_key.*$/, \"\")\n\t\t\t.replace(/_lookup.*$/, \"\");\n\t}\n\n\t/**\n\t * Check if a snapshot key represents an index-based query\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if snapshot is index-based\n\t * @private\n\t */\n\t_isIndexBasedSnapshot (transaction, snapshotKey) {\n\t\treturn snapshotKey.includes(\"_index\") ||\n\t\t\tsnapshotKey.includes(\"_idx\") ||\n\t\t\tsnapshotKey.startsWith(\"idx_\") ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:index_range`);\n\t}\n\n\t/**\n\t * Check if operation key falls within index-based range of snapshot key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Index-based snapshot key\n\t * @returns {boolean} True if operation key is in index range\n\t * @private\n\t */\n\t_checkIndexBasedRange (transaction, operationKey, snapshotKey) {\n\t\tconst indexRange = transaction.snapshot.get(`${snapshotKey}:index_range`);\n\t\tif (indexRange) {\n\t\t\treturn this.keyMatchesIndexRange(operationKey, indexRange);\n\t\t}\n\n\t\tif (snapshotKey.includes(\"_index\") || snapshotKey.includes(\"_idx\")) {\n\t\t\tconst baseKey = snapshotKey.replace(/_index.*$|_idx.*$/, \"\");\n\n\t\t\treturn operationKey.startsWith(baseKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have collection-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have collection relationship\n\t * @private\n\t */\n\t_hasCollectionKeyRelationship (key1, key2) {\n\t\tconst isCollection1 = this._isCollectionKey(key1);\n\t\tconst isCollection2 = this._isCollectionKey(key2);\n\n\t\tif (isCollection1 || isCollection2) {\n\t\t\tconst base1 = this._extractCollectionBase(key1);\n\t\t\tconst base2 = this._extractCollectionBase(key2);\n\n\t\t\treturn base1 === base2 ||\n\t\t\t\tkey1.startsWith(base2) ||\n\t\t\t\tkey2.startsWith(base1);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key represents a collection structure\n\t * @param {string} key - Key to check\n\t * @returns {boolean} True if key is a collection key\n\t * @private\n\t */\n\t_isCollectionKey (key) {\n\t\tconst collectionIndicators = [\n\t\t\t\"_list\", \"_array\", \"_set\", \"_collection\",\n\t\t\t\"_items\", \"_elements\", \"_members\", \"_entries\"\n\t\t];\n\n\t\treturn collectionIndicators.some(indicator => key.includes(indicator));\n\t}\n\n\t/**\n\t * Extract base key from a collection key by removing collection-specific suffixes\n\t * @param {string} collectionKey - Collection key to extract base from\n\t * @returns {string} Base key without collection identifiers\n\t * @private\n\t */\n\t_extractCollectionBase (collectionKey) {\n\t\tconst indicators = [\"_list\", \"_array\", \"_set\", \"_collection\", \"_items\", \"_elements\", \"_members\", \"_entries\"];\n\n\t\tfor (const indicator of indicators) {\n\t\t\tif (collectionKey.includes(indicator)) {\n\t\t\t\treturn collectionKey.replace(indicator, \"\");\n\t\t\t}\n\t\t}\n\n\t\treturn collectionKey;\n\t}\n\n\t/**\n\t * Check if two keys have functional dependency relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have functional dependency\n\t * @private\n\t */\n\t_hasFunctionalDependency (key1, key2) {\n\t\tconst dependencies = [\n\t\t\t[\"user_id\", \"user_email\"], [\"user_id\", \"user_profile\"],\n\t\t\t[\"account_id\", \"user_id\"], [\"session_id\", \"user_id\"],\n\t\t\t[\"order_id\", \"user_id\"], [\"order_id\", \"order_total\"],\n\t\t\t[\"payment_id\", \"order_id\"], [\"shipping_id\", \"order_id\"],\n\t\t\t[\"post_id\", \"user_id\"], [\"comment_id\", \"post_id\"],\n\t\t\t[\"message_id\", \"thread_id\"], [\"file_id\", \"folder_id\"],\n\t\t\t[\"document_id\", \"workspace_id\"], [\"task_id\", \"project_id\"]\n\t\t];\n\n\t\tconst norm1 = this._normalizeKeyForDependency(key1);\n\t\tconst norm2 = this._normalizeKeyForDependency(key2);\n\n\t\tfor (const [dep1, dep2] of dependencies) {\n\t\t\tif (norm1.includes(dep1) && norm2.includes(dep2) ||\n\t\t\t\tnorm1.includes(dep2) && norm2.includes(dep1)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Normalize a key for functional dependency comparison by converting to standard format\n\t * @param {string} key - Key to normalize\n\t * @returns {string} Normalized key in lowercase with underscores\n\t * @private\n\t */\n\t_normalizeKeyForDependency (key) {\n\t\treturn key.toLowerCase()\n\t\t\t.replace(/[:\\-/.]/g, \"_\")\n\t\t\t.replace(/([a-z])([A-Z])/g, \"$1_$2\")\n\t\t\t.toLowerCase();\n\t}\n\n\t/**\n\t * Check if transaction snapshot has explicit range metadata for a key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if explicit range metadata exists\n\t * @private\n\t */\n\t_hasExplicitRangeMetadata (transaction, snapshotKey) {\n\t\treturn transaction.snapshot.has(`${snapshotKey}:range`) ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:query`) ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:predicate`);\n\t}\n\n\t/**\n\t * Check if operation key matches explicit range metadata for snapshot key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot with explicit range\n\t * @returns {boolean} True if operation key matches explicit range\n\t * @private\n\t */\n\t_checkExplicitRange (transaction, operationKey, snapshotKey) {\n\t\tconst rangeInfo = transaction.snapshot.get(`${snapshotKey}:range`);\n\t\tif (rangeInfo && typeof rangeInfo === \"object\") {\n\t\t\treturn this.keyMatchesRange(operationKey, rangeInfo);\n\t\t}\n\n\t\tconst queryInfo = transaction.snapshot.get(`${snapshotKey}:query`);\n\t\tif (queryInfo) {\n\t\t\treturn this.keyMatchesQuery(operationKey, queryInfo);\n\t\t}\n\n\t\tconst predicateInfo = transaction.snapshot.get(`${snapshotKey}:predicate`);\n\t\tif (predicateInfo && typeof predicateInfo === \"function\") {\n\t\t\ttry {\n\t\t\t\treturn predicateInfo(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Clear internal caches\n\t */\n\tclearCaches () {\n\t\tthis.patternCache.clear();\n\t\tthis.semanticCache.clear();\n\t}\n}\n","import { IsolationLevels } from \"./constants.js\";\nimport { KeyRelationshipAnalyzer } from \"./key-relationship-analyzer.js\";\n\n/**\n * Deadlock detector using multiple detection strategies\n */\nexport class DeadlockDetector {\n\tconstructor (lockManager) {\n\t\tthis.lockManager = lockManager;\n\t\tthis.keyAnalyzer = new KeyRelationshipAnalyzer();\n\t}\n\n\t/**\n\t * Check for deadlocks using multiple detection strategies\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tdetectDeadlocks (activeTransactions, options = {}) {\n\t\tconst opts = {\n\t\t\tuseLockGraph: true,\n\t\t\tuseResourceGraph: true,\n\t\t\tuseTimeoutDetection: true,\n\t\t\ttimeoutThreshold: 10000,\n\t\t\t...options\n\t\t};\n\n\t\tconst results = {\n\t\t\tdeadlocks: [],\n\t\t\tsuspectedDeadlocks: [],\n\t\t\ttimeoutVictims: [],\n\t\t\twaitForGraph: null,\n\t\t\tresourceGraph: null\n\t\t};\n\n\t\tif (activeTransactions.length < 2) {\n\t\t\treturn results;\n\t\t}\n\n\t\t// 1. Lock-based wait-for graph deadlock detection\n\t\tif (opts.useLockGraph) {\n\t\t\tconst lockDeadlocks = this._detectLockBasedDeadlocks(activeTransactions);\n\t\t\tresults.deadlocks.push(...lockDeadlocks.cycles);\n\t\t\tresults.waitForGraph = lockDeadlocks.graph;\n\t\t}\n\n\t\t// 2. Resource allocation graph deadlock detection\n\t\tif (opts.useResourceGraph) {\n\t\t\tconst resourceDeadlocks = this._detectResourceDeadlocks(activeTransactions);\n\t\t\tresults.deadlocks.push(...resourceDeadlocks.cycles);\n\t\t\tresults.resourceGraph = resourceDeadlocks.graph;\n\t\t}\n\n\t\t// 3. Isolation-level based deadlock detection\n\t\tconst isolationDeadlocks = this._detectIsolationDeadlocks(activeTransactions);\n\t\tresults.suspectedDeadlocks.push(...isolationDeadlocks);\n\n\t\t// 4. Timeout-based deadlock detection (fallback)\n\t\tif (opts.useTimeoutDetection) {\n\t\t\tconst timeoutVictims = this._detectTimeoutVictims(activeTransactions, opts.timeoutThreshold);\n\t\t\tresults.timeoutVictims.push(...timeoutVictims);\n\t\t}\n\n\t\t// Remove duplicates and merge results\n\t\tresults.deadlocks = this._deduplicateDeadlocks(results.deadlocks);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Detect deadlocks using lock-based wait-for graph\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object} Lock-based deadlock detection results\n\t * @private\n\t */\n\t_detectLockBasedDeadlocks (activeTransactions) {\n\t\tconst waitForGraph = this._buildLockWaitForGraph(activeTransactions);\n\t\tconst cycles = this._detectCyclesInGraph(waitForGraph);\n\n\t\treturn {\n\t\t\tgraph: waitForGraph,\n\t\t\tcycles: cycles.map(cycle => ({\n\t\t\t\ttype: \"lock\",\n\t\t\t\ttransactions: cycle,\n\t\t\t\tresources: this._getResourcesInvolvedInCycle(cycle, activeTransactions)\n\t\t\t}))\n\t\t};\n\t}\n\n\t/**\n\t * Build wait-for graph based on lock dependencies\n\t * @param {Transaction[]} transactions - Active transactions\n\t * @returns {Map<string, Set<string>>} Wait-for graph\n\t * @private\n\t */\n\t_buildLockWaitForGraph (transactions) {\n\t\tconst graph = new Map();\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\t// Initialize graph nodes\n\t\tfor (const tx of transactions) {\n\t\t\tgraph.set(tx.id, new Set());\n\t\t}\n\n\t\t// Build edges based on lock conflicts\n\t\tfor (const lockInfo of lockStats.recordsLocked) {\n\t\t\tconst { recordKey, holders } = lockInfo;\n\n\t\t\t// Find transactions waiting for this lock\n\t\t\tconst waitingTransactions = this._findTransactionsWaitingForLock(recordKey, transactions);\n\n\t\t\t// Create edges from waiting transactions to lock holders\n\t\t\tfor (const waitingTx of waitingTransactions) {\n\t\t\t\tfor (const holderId of holders) {\n\t\t\t\t\tif (waitingTx !== holderId && graph.has(waitingTx) && graph.has(holderId)) {\n\t\t\t\t\t\tgraph.get(waitingTx).add(holderId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Find transactions that are waiting for a specific lock\n\t * @param {string} recordKey - Record key\n\t * @param {Transaction[]} transactions - All transactions to check\n\t * @returns {string[]} Transaction IDs waiting for the lock\n\t * @private\n\t */\n\t_findTransactionsWaitingForLock (recordKey, transactions) {\n\t\tconst waiting = [];\n\n\t\tfor (const tx of transactions) {\n\t\t\tconst hasOperationOnKey = tx.writeSet.has(recordKey) || tx.readSet.has(recordKey);\n\t\t\tconst holdsLock = this.lockManager.holdsLocks(tx.id);\n\n\t\t\tif (hasOperationOnKey && !holdsLock) {\n\t\t\t\twaiting.push(tx.id);\n\t\t\t}\n\t\t}\n\n\t\treturn waiting;\n\t}\n\n\t/**\n\t * Detect deadlocks using resource allocation graph\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object} Resource-based deadlock detection results\n\t * @private\n\t */\n\t_detectResourceDeadlocks (activeTransactions) {\n\t\tconst resourceGraph = this._buildResourceAllocationGraph(activeTransactions);\n\t\tconst cycles = this._detectCyclesInResourceGraph(resourceGraph);\n\n\t\treturn {\n\t\t\tgraph: resourceGraph,\n\t\t\tcycles: cycles.map(cycle => ({\n\t\t\t\ttype: \"resource\",\n\t\t\t\ttransactions: cycle.transactions,\n\t\t\t\tresources: cycle.resources\n\t\t\t}))\n\t\t};\n\t}\n\n\t/**\n\t * Build resource allocation graph\n\t * @param {Transaction[]} transactions - Active transactions\n\t * @returns {Object} Resource allocation graph\n\t * @private\n\t */\n\t_buildResourceAllocationGraph (transactions) {\n\t\tconst graph = {\n\t\t\ttransactions: new Map(), // tx -> Set<resources>\n\t\t\tresources: new Map(), // resource -> Set<tx>\n\t\t\twaiting: new Map() // tx -> Set<resources waiting for>\n\t\t};\n\n\t\t// Initialize\n\t\tfor (const tx of transactions) {\n\t\t\tgraph.transactions.set(tx.id, new Set());\n\t\t\tgraph.waiting.set(tx.id, new Set());\n\t\t}\n\n\t\t// Build allocation and waiting relationships\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\tfor (const lockInfo of lockStats.recordsLocked) {\n\t\t\tconst { recordKey, holders } = lockInfo;\n\n\t\t\tif (!graph.resources.has(recordKey)) {\n\t\t\t\tgraph.resources.set(recordKey, new Set());\n\t\t\t}\n\n\t\t\t// Record allocations\n\t\t\tfor (const holderId of holders) {\n\t\t\t\tif (graph.transactions.has(holderId)) {\n\t\t\t\t\tgraph.transactions.get(holderId).add(recordKey);\n\t\t\t\t\tgraph.resources.get(recordKey).add(holderId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Record waiting relationships\n\t\t\tconst waitingTx = this._findTransactionsWaitingForLock(recordKey, transactions);\n\t\t\tfor (const txId of waitingTx) {\n\t\t\t\tif (graph.waiting.has(txId)) {\n\t\t\t\t\tgraph.waiting.get(txId).add(recordKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Detect cycles in a wait-for graph\n\t * @param {Map<string, Set<string>>} graph - Wait-for graph\n\t * @returns {string[][]} Array of cycles (each cycle is array of transaction IDs)\n\t * @private\n\t */\n\t_detectCyclesInGraph (graph) {\n\t\tconst visited = new Set();\n\t\tconst recursionStack = new Set();\n\t\tconst cycles = [];\n\n\t\tconst dfs = (node, path) => {\n\t\t\tif (recursionStack.has(node)) {\n\t\t\t\t// Found a cycle\n\t\t\t\tconst cycleStart = path.indexOf(node);\n\t\t\t\tconst cycle = path.slice(cycleStart);\n\t\t\t\tcycles.push([...cycle, node]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (visited.has(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvisited.add(node);\n\t\t\trecursionStack.add(node);\n\t\t\tpath.push(node);\n\n\t\t\tconst neighbors = graph.get(node) || new Set();\n\t\t\tfor (const neighbor of neighbors) {\n\t\t\t\tdfs(neighbor, [...path]);\n\t\t\t}\n\n\t\t\trecursionStack.delete(node);\n\t\t};\n\n\t\t// Start DFS from each unvisited node\n\t\tfor (const node of graph.keys()) {\n\t\t\tif (!visited.has(node)) {\n\t\t\t\tdfs(node, []);\n\t\t\t}\n\t\t}\n\n\t\treturn cycles;\n\t}\n\n\t/**\n\t * Detect cycles in resource allocation graph\n\t * @param {Object} resourceGraph - Resource allocation graph\n\t * @returns {Object[]} Array of resource-based cycles\n\t * @private\n\t */\n\t_detectCyclesInResourceGraph (resourceGraph) {\n\t\tconst cycles = [];\n\n\t\t// Convert resource graph to wait-for graph\n\t\tconst waitForGraph = new Map();\n\n\t\tfor (const [txId] of resourceGraph.transactions) {\n\t\t\twaitForGraph.set(txId, new Set());\n\t\t}\n\n\t\t// Build wait-for relationships\n\t\tfor (const [waitingTx, wantedResources] of resourceGraph.waiting) {\n\t\t\tfor (const resource of wantedResources) {\n\t\t\t\tconst holders = resourceGraph.resources.get(resource) || new Set();\n\t\t\t\tfor (const holdingTx of holders) {\n\t\t\t\t\tif (waitingTx !== holdingTx) {\n\t\t\t\t\t\twaitForGraph.get(waitingTx).add(holdingTx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Detect cycles in the converted graph\n\t\tconst graphCycles = this._detectCyclesInGraph(waitForGraph);\n\n\t\t// Convert back to resource cycles\n\t\tfor (const cycle of graphCycles) {\n\t\t\tconst resources = this._getResourcesInvolvedInCycle(cycle,\n\t\t\t\tArray.from(resourceGraph.transactions.keys()).map(id => ({ id })));\n\t\t\tcycles.push({\n\t\t\t\ttransactions: cycle,\n\t\t\t\tresources: Array.from(resources)\n\t\t\t});\n\t\t}\n\n\t\treturn cycles;\n\t}\n\n\t/**\n\t * Get resources involved in a deadlock cycle\n\t * @param {string[]} cycle - Array of transaction IDs in cycle\n\t * @param {Transaction[]|Object[]} transactions - Transaction objects or objects with id\n\t * @returns {Set<string>} Set of resource keys involved\n\t * @private\n\t */\n\t_getResourcesInvolvedInCycle (cycle, transactions) {\n\t\tconst resources = new Set();\n\n\t\tfor (const txId of cycle) {\n\t\t\tconst tx = transactions.find(t => t.id === txId);\n\t\t\tif (tx && tx.writeSet && tx.readSet) {\n\t\t\t\tfor (const key of tx.writeSet) {\n\t\t\t\t\tresources.add(key);\n\t\t\t\t}\n\t\t\t\tfor (const key of tx.readSet) {\n\t\t\t\t\tresources.add(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn resources;\n\t}\n\n\t/**\n\t * Detect isolation-level based deadlocks\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object[]} Array of suspected isolation deadlocks\n\t * @private\n\t */\n\t_detectIsolationDeadlocks (activeTransactions) {\n\t\tconst suspectedDeadlocks = [];\n\n\t\tfor (let i = 0; i < activeTransactions.length; i++) {\n\t\t\tfor (let j = i + 1; j < activeTransactions.length; j++) {\n\t\t\t\tconst tx1 = activeTransactions[i];\n\t\t\t\tconst tx2 = activeTransactions[j];\n\n\t\t\t\tif (this._hasIsolationConflict(tx1, tx2)) {\n\t\t\t\t\tsuspectedDeadlocks.push({\n\t\t\t\t\t\ttype: \"isolation\",\n\t\t\t\t\t\ttransactions: [tx1.id, tx2.id],\n\t\t\t\t\t\tconflict: this._getIsolationConflictType(tx1, tx2)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn suspectedDeadlocks;\n\t}\n\n\t/**\n\t * Check if two transactions have isolation conflicts\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if isolation conflict exists\n\t * @private\n\t */\n\t_hasIsolationConflict (tx1, tx2) {\n\t\tif (tx1.isolationLevel >= IsolationLevels.REPEATABLE_READ ||\n\t\t\ttx2.isolationLevel >= IsolationLevels.REPEATABLE_READ) {\n\n\t\t\tconst tx1ReadsWhatTx2Writes = this._readsOtherWrites(tx1, tx2);\n\t\t\tconst tx2ReadsWhatTx1Writes = this._readsOtherWrites(tx2, tx1);\n\n\t\t\treturn tx1ReadsWhatTx2Writes || tx2ReadsWhatTx1Writes;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get the type of isolation conflict between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {string} Conflict type description\n\t * @private\n\t */\n\t_getIsolationConflictType (tx1, tx2) {\n\t\tif (this._readsOtherWrites(tx1, tx2) && this._readsOtherWrites(tx2, tx1)) {\n\t\t\treturn \"bidirectional-dependency\";\n\t\t} else if (this._readsOtherWrites(tx1, tx2)) {\n\t\t\treturn \"tx1-depends-on-tx2\";\n\t\t} else if (this._readsOtherWrites(tx2, tx1)) {\n\t\t\treturn \"tx2-depends-on-tx1\";\n\t\t}\n\n\t\treturn \"unknown\";\n\t}\n\n\t/**\n\t * Check if one transaction reads what another writes\n\t * @param {Transaction} reader - Reading transaction\n\t * @param {Transaction} writer - Writing transaction\n\t * @returns {boolean} True if dependency exists\n\t * @private\n\t */\n\t_readsOtherWrites (reader, writer) {\n\t\tfor (const readKey of reader.readSet) {\n\t\t\tif (writer.writeSet.has(readKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Detect timeout-based deadlock victims\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @param {number} timeoutThreshold - Timeout threshold in milliseconds\n\t * @returns {string[]} Transaction IDs that have timed out\n\t * @private\n\t */\n\t_detectTimeoutVictims (activeTransactions, timeoutThreshold) {\n\t\tconst victims = [];\n\n\t\tfor (const transaction of activeTransactions) {\n\t\t\tconst duration = transaction.getDuration();\n\t\t\tif (duration !== null && duration > timeoutThreshold) {\n\t\t\t\tvictims.push(transaction.id);\n\t\t\t}\n\t\t}\n\n\t\treturn victims;\n\t}\n\n\t/**\n\t * Remove duplicate deadlocks from results\n\t * @param {Object[]} deadlocks - Array of deadlock objects\n\t * @returns {Object[]} Deduplicated deadlocks\n\t * @private\n\t */\n\t_deduplicateDeadlocks (deadlocks) {\n\t\tconst seen = new Set();\n\t\tconst unique = [];\n\n\t\tfor (const deadlock of deadlocks) {\n\t\t\tconst signature = this._createDeadlockSignature(deadlock);\n\n\t\t\tif (!seen.has(signature)) {\n\t\t\t\tseen.add(signature);\n\t\t\t\tunique.push(deadlock);\n\t\t\t}\n\t\t}\n\n\t\treturn unique;\n\t}\n\n\t/**\n\t * Create a normalized signature for a deadlock\n\t * @param {Object} deadlock - Deadlock object\n\t * @returns {string} Normalized signature\n\t * @private\n\t */\n\t_createDeadlockSignature (deadlock) {\n\t\tconst sortedTransactions = [...deadlock.transactions].sort();\n\t\tconst sortedResources = deadlock.resources ? [...deadlock.resources].sort() : [];\n\n\t\treturn `${deadlock.type}:${sortedTransactions.join(\",\")}:${sortedResources.join(\",\")}`;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { IsolationLevels } from \"./constants.js\";\nimport { KeyRelationshipAnalyzer } from \"./key-relationship-analyzer.js\";\n\n/**\n * Validator for transaction isolation levels and conflict detection\n */\nexport class IsolationValidator {\n\tconstructor () {\n\t\tthis.keyAnalyzer = new KeyRelationshipAnalyzer();\n\t}\n\n\t/**\n\t * Validate isolation level requirements for a transaction\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All active transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t */\n\tvalidateIsolation (transaction, allTransactions) {\n\t\tswitch (transaction.isolationLevel) {\n\t\t\tcase IsolationLevels.READ_UNCOMMITTED:\n\t\t\t\t// No validation needed - allows dirty reads\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.READ_COMMITTED:\n\t\t\t\tthis._validateReadCommitted(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.REPEATABLE_READ:\n\t\t\t\tthis._validateRepeatableRead(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.SERIALIZABLE:\n\t\t\t\tthis._validateSerializable(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Unknown isolation level: ${transaction.isolationLevel}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"isolation\"\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Validate READ_COMMITTED isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateReadCommitted (transaction, allTransactions) {\n\t\tfor (const writeKey of transaction.writeSet) {\n\t\t\tconst conflictingTransactions = this._findConflictingWrites(transaction.id, writeKey, allTransactions);\n\t\t\tif (conflictingTransactions.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Write conflict detected on key '${writeKey}' with transactions: ${conflictingTransactions.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"write-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate REPEATABLE_READ isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateRepeatableRead (transaction, allTransactions) {\n\t\t// First validate READ_COMMITTED requirements\n\t\tthis._validateReadCommitted(transaction, allTransactions);\n\n\t\t// Check for repeatable read violations\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tif (this._hasReadSetConflict(transaction, readKey, allTransactions)) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Repeatable read violation: key '${readKey}' was modified by another transaction`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"repeatable-read-violation\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for phantom reads in range queries\n\t\tif (transaction.snapshot.size > 0) {\n\t\t\tfor (const [snapshotKey, snapshotValue] of transaction.snapshot) {\n\t\t\t\tif (this._hasSnapshotConflict(transaction, snapshotKey, snapshotValue, allTransactions)) {\n\t\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t\t`Phantom read detected: snapshot inconsistency for key '${snapshotKey}'`,\n\t\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\t\"phantom-read\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate SERIALIZABLE isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateSerializable (transaction, allTransactions) {\n\t\t// First validate REPEATABLE_READ requirements\n\t\tthis._validateRepeatableRead(transaction, allTransactions);\n\n\t\t// Check for read-write conflicts\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tconst conflictingWrites = this._findConflictingWritesToRead(transaction, readKey, allTransactions);\n\t\t\tif (conflictingWrites.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Serialization conflict: key '${readKey}' was written by concurrent transactions: ${conflictingWrites.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"serialization-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for write-read conflicts\n\t\tfor (const writeKey of transaction.writeSet) {\n\t\t\tconst conflictingReads = this._findConflictingReadsToWrite(transaction, writeKey, allTransactions);\n\t\t\tif (conflictingReads.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Serialization conflict: key '${writeKey}' was read by concurrent transactions: ${conflictingReads.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"serialization-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Find transactions that have conflicting writes to the same key\n\t * @param {string} excludeTransactionId - Transaction ID to exclude from search\n\t * @param {string} key - Key to check for conflicts\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingWrites (excludeTransactionId, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, transaction] of allTransactions) {\n\t\t\tif (txId !== excludeTransactionId &&\n\t\t\t\ttransaction.isActive() &&\n\t\t\t\ttransaction.writeSet.has(key)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Find transactions that wrote to a key this transaction read\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was read\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingWritesToRead (transaction, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\totherTx.writeSet.has(key) &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Find transactions that read a key this transaction wrote\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was written\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingReadsToWrite (transaction, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\totherTx.readSet.has(key) &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Check if a read key has conflicts with other transactions\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was read\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if conflict detected\n\t * @private\n\t */\n\t_hasReadSetConflict (transaction, key, allTransactions) {\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isCommitted() &&\n\t\t\t\totherTx.writeSet.has(key) &&\n\t\t\t\totherTx.startTime > transaction.startTime &&\n\t\t\t\totherTx.endTime < new Date()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if snapshot has conflicts indicating phantom reads\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if conflict detected\n\t * @private\n\t */\n\t_hasSnapshotConflict (transaction, key, expectedValue, allTransactions) {\n\t\t// Check if any other transaction modified this specific key\n\t\tif (this._hasReadSetConflict(transaction, key, allTransactions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for phantom reads in range-based operations\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id && this._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tif (this._hasPhantomConflict(transaction, otherTx, key, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for serialization anomalies specific to snapshots\n\t\tif (this._hasSerializationAnomalyInSnapshot(transaction, key, allTransactions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if another transaction creates phantom reads for this transaction's snapshot\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {Transaction} otherTransaction - Other concurrent transaction\n\t * @param {string} key - Snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if phantom conflict detected\n\t * @private\n\t */\n\t_hasPhantomConflict (transaction, otherTransaction, key, expectedValue) {\n\t\tfor (const operation of otherTransaction.operations) {\n\t\t\tif (operation.type !== \"read\") {\n\t\t\t\tif (operation.key === key) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this.keyAnalyzer.isKeyInSnapshotRange(transaction, operation.key, key, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for serialization anomalies in snapshot data\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {string} key - Snapshot key\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if serialization anomaly detected\n\t * @private\n\t */\n\t_hasSerializationAnomalyInSnapshot (transaction, key, allTransactions) {\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\n\t\t\t\tif (this._hasWriteSkewAnomaly(transaction, otherTx, key)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._hasDependencyCycle(transaction, otherTx)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for write-skew anomalies between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @param {string} key - Key being checked\n\t * @returns {boolean} True if write-skew detected\n\t * @private\n\t */\n\t_hasWriteSkewAnomaly (tx1, tx2, key) {\n\t\tconst tx1ReadsRelated = this._hasRelatedReads(tx1, key);\n\t\tconst tx2ReadsRelated = this._hasRelatedReads(tx2, key);\n\n\t\tif (!tx1ReadsRelated || !tx2ReadsRelated) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tx1Writes = Array.from(tx1.writeSet);\n\t\tconst tx2Writes = Array.from(tx2.writeSet);\n\t\tconst hasOverlappingWrites = tx1Writes.some(k => tx2Writes.includes(k));\n\n\t\tif (hasOverlappingWrites) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn tx1Writes.length > 0 && tx2Writes.length > 0;\n\t}\n\n\t/**\n\t * Check if transaction has reads related to a key\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Reference key\n\t * @returns {boolean} True if has related reads\n\t * @private\n\t */\n\t_hasRelatedReads (transaction, key) {\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tif (this.keyAnalyzer.areKeysRelated(readKey, key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for dependency cycles between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if dependency cycle detected\n\t * @private\n\t */\n\t_hasDependencyCycle (tx1, tx2) {\n\t\tconst tx1ReadsTx2Writes = this._readsOtherWrites(tx1, tx2);\n\t\tconst tx2ReadsTx1Writes = this._readsOtherWrites(tx2, tx1);\n\n\t\treturn tx1ReadsTx2Writes && tx2ReadsTx1Writes;\n\t}\n\n\t/**\n\t * Check if one transaction reads what another writes\n\t * @param {Transaction} reader - Reading transaction\n\t * @param {Transaction} writer - Writing transaction\n\t * @returns {boolean} True if dependency exists\n\t * @private\n\t */\n\t_readsOtherWrites (reader, writer) {\n\t\tfor (const readKey of reader.readSet) {\n\t\t\tif (writer.writeSet.has(readKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two transactions have overlapping execution periods\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if transactions overlap in time\n\t * @private\n\t */\n\t_transactionsOverlap (tx1, tx2) {\n\t\tif (!tx1.startTime || !tx2.startTime) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tx1Start = tx1.startTime.getTime();\n\t\tconst tx1End = tx1.endTime ? tx1.endTime.getTime() : Date.now();\n\t\tconst tx2Start = tx2.startTime.getTime();\n\t\tconst tx2End = tx2.endTime ? tx2.endTime.getTime() : Date.now();\n\n\t\treturn tx1Start < tx2End && tx2Start < tx1End;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { LockTypes } from \"./constants.js\";\nimport { Transaction } from \"./transaction-individual.js\";\nimport { LockManager } from \"./lock-manager.js\";\nimport { TransactionStatistics } from \"./transaction-statistics.js\";\nimport { DeadlockDetector } from \"./deadlock-detector.js\";\nimport { IsolationValidator } from \"./isolation-validator.js\";\n\n/**\n * Refactored transaction manager for coordinating multiple transactions\n * Delegates complex operations to specialized classes\n */\nexport class TransactionManager {\n\tconstructor () {\n\t\t// Active transactions\n\t\tthis.transactions = new Map();\n\n\t\t// Lock manager for concurrency control\n\t\tthis.lockManager = new LockManager();\n\n\t\t// Global transaction counter\n\t\tthis.transactionCounter = 0;\n\n\t\t// Specialized components\n\t\tthis.statistics = new TransactionStatistics();\n\t\tthis.deadlockDetector = new DeadlockDetector(this.lockManager);\n\t\tthis.isolationValidator = new IsolationValidator();\n\t}\n\n\t/**\n\t * Begin a new transaction\n\t * @param {Object} [options={}] - Transaction options\n\t * @returns {Transaction} New transaction instance\n\t */\n\tbegin (options = {}) {\n\t\tconst transaction = new Transaction(undefined, options);\n\t\ttransaction.begin();\n\n\t\tthis.transactions.set(transaction.id, transaction);\n\t\tthis.transactionCounter++;\n\t\tthis.statistics.incrementTotal();\n\t\tthis.statistics.incrementActive();\n\n\t\treturn transaction;\n\t}\n\n\t/**\n\t * Get transaction by ID\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {Transaction|undefined} Transaction instance\n\t */\n\tgetTransaction (transactionId) {\n\t\treturn this.transactions.get(transactionId);\n\t}\n\n\t/**\n\t * Commit a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @param {Object} [context] - Commit context\n\t * @returns {Transaction} Committed transaction\n\t * @throws {TransactionError} If transaction not found or commit fails\n\t */\n\tasync commit (transactionId, context = {}) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"commit\");\n\t\t}\n\n\t\ttry {\n\t\t\t// Acquire locks for all writes\n\t\t\tfor (const key of transaction.writeSet) {\n\t\t\t\tawait this.lockManager.acquireLock(transactionId, key, LockTypes.EXCLUSIVE);\n\t\t\t}\n\n\t\t\t// Perform isolation level checks using specialized validator\n\t\t\tthis.isolationValidator.validateIsolation(transaction, this.transactions);\n\n\t\t\t// Commit the transaction\n\t\t\ttransaction.commit(context);\n\n\t\t\t// Update statistics\n\t\t\tthis.statistics.incrementCommitted();\n\t\t\tthis.statistics.decrementActive();\n\t\t\tthis.statistics.updateDurationStats(transaction);\n\n\t\t\treturn transaction;\n\t\t} catch (error) {\n\t\t\t// Auto-abort on failure\n\t\t\tthis.abort(transactionId, error.message);\n\t\t\tthrow error;\n\t\t/* c8 ignore next */ } finally {\n\t\t\t// Always release locks\n\t\t\tthis.lockManager.releaseAllLocks(transactionId);\n\t\t}\n\t}\n\n\t/**\n\t * Abort a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} [reason] - Reason for abort\n\t * @returns {Transaction} Aborted transaction\n\t * @throws {TransactionError} If transaction not found\n\t */\n\tabort (transactionId, reason = \"Manual abort\") {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"abort\");\n\t\t}\n\n\t\ttransaction.abort(reason);\n\n\t\t// Release all locks\n\t\tthis.lockManager.releaseAllLocks(transactionId);\n\n\t\t// Update statistics\n\t\tthis.statistics.incrementAborted();\n\t\tthis.statistics.decrementActive();\n\t\tthis.statistics.updateDurationStats(transaction);\n\n\t\treturn transaction;\n\t}\n\n\t/**\n\t * Clean up completed transactions\n\t * @param {number} [maxAge=3600000] - Maximum age in milliseconds (default: 1 hour)\n\t * @returns {number} Number of transactions cleaned up\n\t */\n\tcleanup (maxAge = 3600000) {\n\t\tconst cutoffTime = Date.now() - maxAge;\n\t\tlet cleaned = 0;\n\n\t\tfor (const [id, transaction] of this.transactions) {\n\t\t\t// Special case: maxAge of 0 means clean ALL completed transactions\n\t\t\tif (transaction.endTime && (maxAge === 0 || transaction.endTime.getTime() < cutoffTime)) {\n\t\t\t\tthis.transactions.delete(id);\n\t\t\t\tcleaned++;\n\t\t\t}\n\t\t}\n\n\t\treturn cleaned;\n\t}\n\n\t/**\n\t * Get all active transactions\n\t * @returns {Transaction[]} Array of active transactions\n\t */\n\tgetActiveTransactions () {\n\t\treturn Array.from(this.transactions.values()).filter(t => t.isActive());\n\t}\n\n\t/**\n\t * Check for deadlocks using specialized detector\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tdetectDeadlocks (options = {}) {\n\t\tconst activeTransactions = this.getActiveTransactions();\n\n\t\treturn this.deadlockDetector.detectDeadlocks(activeTransactions, options);\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst activeCount = this.getActiveTransactions().length;\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\treturn this.statistics.getStats(lockStats, activeCount, this.transactionCounter);\n\t}\n\n\t/**\n\t * Reset all statistics\n\t */\n\tresetStats () {\n\t\tthis.statistics.reset();\n\t}\n\n\t/**\n\t * Get access to specialized components for advanced usage\n\t * @returns {Object} Specialized components\n\t */\n\tgetComponents () {\n\t\treturn {\n\t\t\tstatistics: this.statistics,\n\t\t\tdeadlockDetector: this.deadlockDetector,\n\t\t\tisolationValidator: this.isolationValidator,\n\t\t\tlockManager: this.lockManager\n\t\t};\n\t}\n\n\t/**\n\t * Validate isolation for a specific transaction (for testing/debugging)\n\t * @param {string} transactionId - Transaction ID to validate\n\t * @throws {TransactionError} If validation fails\n\t */\n\tvalidateTransactionIsolation (transactionId) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"validate\");\n\t\t}\n\n\t\tthis.isolationValidator.validateIsolation(transaction, this.transactions);\n\t}\n\n\t/**\n\t * Force deadlock detection and return results\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tcheckForDeadlocks (options = {}) {\n\t\treturn this.detectDeadlocks(options);\n\t}\n\n\t/**\n\t * Get detailed transaction information for debugging\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {Object|null} Detailed transaction info or null if not found\n\t */\n\tgetTransactionDetails (transactionId) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...transaction.getStats(),\n\t\t\tlockInfo: this.lockManager.getStats().recordsLocked.filter(\n\t\t\t\tlock => lock.holders.includes(transactionId)\n\t\t\t)\n\t\t};\n\t}\n\n\t/**\n\t * Get system health information\n\t * @returns {Object} System health metrics\n\t */\n\tgetSystemHealth () {\n\t\tconst stats = this.getStats();\n\t\tconst deadlockResults = this.detectDeadlocks();\n\n\t\treturn {\n\t\t\tactiveTransactions: stats.activeTransactions,\n\t\t\ttotalTransactions: stats.totalTransactions,\n\t\t\tcommitRate: stats.totalTransactions > 0 ? stats.committedTransactions / stats.totalTransactions : 0,\n\t\t\taverageDuration: stats.averageDuration,\n\t\t\thasDeadlocks: deadlockResults.deadlocks.length > 0,\n\t\t\tsuspectedDeadlocks: deadlockResults.suspectedDeadlocks.length,\n\t\t\ttimeoutVictims: deadlockResults.timeoutVictims.length,\n\t\t\ttotalLocks: stats.lockStats.totalLocks,\n\t\t\tlockUtilization: stats.lockStats.totalLocks > 0 ? stats.lockStats.uniqueHolders / stats.lockStats.totalLocks : 0\n\t\t};\n\t}\n}\n","/**\n * Query operation types\n */\nexport const QueryTypes = {\n\tFIND: \"find\",\n\tFILTER: \"filter\",\n\tSEARCH: \"search\",\n\tWHERE: \"where\",\n\tSORT: \"sort\",\n\tLIMIT: \"limit\",\n\tAGGREGATE: \"aggregate\"\n};\n\n/**\n * Cost estimation factors\n */\nexport const CostFactors = {\n\tINDEX_LOOKUP: 1,\n\tFULL_SCAN: 100,\n\tFILTER_EVALUATION: 10,\n\tSORT_OPERATION: 50,\n\tMEMORY_ACCESS: 1,\n\tCOMPARISON: 2,\n\tREGEX_MATCH: 20\n};\n\n/**\n * Query execution plan step\n */\nexport class QueryPlanStep {\n\t/**\n\t * @param {string} operation - Operation type\n\t * @param {Object} [options={}] - Operation options\n\t * @param {number} [estimatedCost=0] - Estimated cost of this step\n\t * @param {number} [estimatedRows=0] - Estimated number of rows processed\n\t */\n\tconstructor (operation, options = {}, estimatedCost = 0, estimatedRows = 0) {\n\t\tthis.operation = operation;\n\t\tthis.options = options;\n\t\tthis.estimatedCost = estimatedCost;\n\t\tthis.estimatedRows = estimatedRows;\n\t\tthis.actualCost = null;\n\t\tthis.actualRows = null;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\t}\n\n\t/**\n\t * Start execution timing\n\t */\n\tstartExecution () {\n\t\tthis.startTime = Date.now();\n\t}\n\n\t/**\n\t * End execution timing\n\t * @param {number} actualRows - Actual number of rows processed\n\t */\n\tendExecution (actualRows) {\n\t\tthis.endTime = Date.now();\n\t\tthis.actualCost = this.endTime - this.startTime;\n\t\tthis.actualRows = actualRows;\n\t}\n\n\t/**\n\t * Get execution statistics\n\t * @returns {Object} Execution statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\toperation: this.operation,\n\t\t\toptions: this.options,\n\t\t\testimatedCost: this.estimatedCost,\n\t\t\testimatedRows: this.estimatedRows,\n\t\t\tactualCost: this.actualCost,\n\t\t\tactualRows: this.actualRows,\n\t\t\tcostAccuracy: this.actualCost && this.estimatedCost ?\n\t\t\t\tMath.abs(this.actualCost - this.estimatedCost) / this.estimatedCost :\n\t\t\t\tnull,\n\t\t\trowAccuracy: this.actualRows !== null && this.estimatedRows ?\n\t\t\t\tMath.abs(this.actualRows - this.estimatedRows) / this.estimatedRows :\n\t\t\t\tnull\n\t\t};\n\t}\n}\n\n/**\n * Query execution plan\n */\nexport class QueryPlan {\n\t/**\n\t * @param {string} queryId - Unique query identifier\n\t * @param {Object} originalQuery - Original query object\n\t */\n\tconstructor (queryId, originalQuery) {\n\t\tthis.queryId = queryId;\n\t\tthis.originalQuery = originalQuery;\n\t\tthis.steps = [];\n\t\tthis.totalEstimatedCost = 0;\n\t\tthis.totalEstimatedRows = 0;\n\t\tthis.totalActualCost = null;\n\t\tthis.totalActualRows = null;\n\t\tthis.createdAt = new Date();\n\t\tthis.executedAt = null;\n\t\tthis.completedAt = null;\n\t}\n\n\t/**\n\t * Add a step to the execution plan\n\t * @param {QueryPlanStep} step - Query plan step\n\t * @returns {QueryPlan} This plan for chaining\n\t */\n\taddStep (step) {\n\t\tthis.steps.push(step);\n\t\tthis.totalEstimatedCost += step.estimatedCost;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start plan execution\n\t */\n\tstartExecution () {\n\t\tthis.executedAt = new Date();\n\t}\n\n\t/**\n\t * Complete plan execution\n\t * @param {number} actualRows - Final number of rows returned\n\t */\n\tcompleteExecution (actualRows) {\n\t\tthis.completedAt = new Date();\n\t\tthis.totalActualRows = actualRows;\n\t\tthis.totalActualCost = this.completedAt.getTime() - (this.executedAt?.getTime() || this.createdAt.getTime());\n\t}\n\n\t/**\n\t * Get execution statistics\n\t * @returns {Object} Execution statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tqueryId: this.queryId,\n\t\t\toriginalQuery: this.originalQuery,\n\t\t\tstepCount: this.steps.length,\n\t\t\ttotalEstimatedCost: this.totalEstimatedCost,\n\t\t\ttotalEstimatedRows: this.totalEstimatedRows,\n\t\t\ttotalActualCost: this.totalActualCost,\n\t\t\ttotalActualRows: this.totalActualRows,\n\t\t\tcreatedAt: this.createdAt,\n\t\t\texecutedAt: this.executedAt,\n\t\t\tcompletedAt: this.completedAt,\n\t\t\tsteps: this.steps.map(step => step.getStats()),\n\t\t\tefficiency: this.totalActualCost && this.totalEstimatedCost ?\n\t\t\t\tthis.totalEstimatedCost / this.totalActualCost :\n\t\t\t\tnull\n\t\t};\n\t}\n\n\t/**\n\t * Export plan for debugging\n\t * @returns {Object} Exportable plan data\n\t */\n\texport () {\n\t\treturn {\n\t\t\t...this.getStats(),\n\t\t\texplanation: this._generateExplanation()\n\t\t};\n\t}\n\n\t/**\n\t * Generate human-readable explanation of the plan\n\t * @returns {string[]} Array of explanation lines\n\t * @private\n\t */\n\t_generateExplanation () {\n\t\tconst explanation = [];\n\n\t\texplanation.push(`Query Plan for: ${JSON.stringify(this.originalQuery)}`);\n\t\texplanation.push(`Estimated cost: ${this.totalEstimatedCost}, rows: ${this.totalEstimatedRows}`);\n\n\t\tif (this.totalActualCost !== null) {\n\t\t\texplanation.push(`Actual cost: ${this.totalActualCost}, rows: ${this.totalActualRows}`);\n\t\t}\n\n\t\texplanation.push(\"\");\n\t\texplanation.push(\"Execution steps:\");\n\n\t\tthis.steps.forEach((step, index) => {\n\t\t\tconst stats = step.getStats();\n\t\t\texplanation.push(`${index + 1}. ${stats.operation} (cost: ${stats.estimatedCost}, rows: ${stats.estimatedRows})`);\n\n\t\t\tif (stats.actualCost !== null) {\n\t\t\t\texplanation.push(`   Actual: cost: ${stats.actualCost}, rows: ${stats.actualRows}`);\n\t\t\t}\n\t\t});\n\n\t\treturn explanation;\n\t}\n}\n\n/**\n * Statistics about data distribution for cost estimation\n */\nexport class DataStatistics {\n\tconstructor () {\n\t\tthis.totalRecords = 0;\n\t\tthis.indexStatistics = new Map(); // Map<indexName, {cardinality, selectivity, histogram}>\n\t\tthis.fieldStatistics = new Map(); // Map<fieldName, {nullCount, uniqueValues, dataType, avgLength}>\n\t\tthis.lastUpdated = new Date();\n\t}\n\n\t/**\n\t * Update statistics from current data\n\t * @param {Map} records - Current record data\n\t * @param {Map} indexes - Current index data\n\t */\n\tupdate (records, indexes) {\n\t\tthis.totalRecords = records.size;\n\t\tthis.lastUpdated = new Date();\n\n\t\t// Update field statistics\n\t\tthis._updateFieldStatistics(records);\n\n\t\t// Update index statistics\n\t\tthis._updateIndexStatistics(indexes);\n\t}\n\n\t/**\n\t * Get selectivity estimate for a field value\n\t * @param {string} fieldName - Field name\n\t * @returns {number} Selectivity estimate (0-1)\n\t */\n\tgetSelectivity (fieldName) {\n\t\tconst fieldStats = this.fieldStatistics.get(fieldName);\n\t\tif (!fieldStats) {\n\t\t\treturn 0.1; // Default selectivity\n\t\t}\n\n\t\t// Simple selectivity estimation\n\t\treturn 1 / (fieldStats.uniqueValues || 1);\n\t}\n\n\t/**\n\t * Get cardinality estimate for an index\n\t * @param {string} indexName - Index name\n\t * @returns {number} Cardinality estimate\n\t */\n\tgetIndexCardinality (indexName) {\n\t\tconst indexStats = this.indexStatistics.get(indexName);\n\n\t\treturn indexStats ? indexStats.cardinality : this.totalRecords;\n\t}\n\n\t/**\n\t * Update field statistics\n\t * @param {Map} records - Record data\n\t * @private\n\t */\n\t_updateFieldStatistics (records) {\n\t\tconst fieldData = new Map();\n\n\t\t// Collect field data\n\t\tfor (const record of records.values()) {\n\t\t\tfor (const [fieldName, value] of Object.entries(record)) {\n\t\t\t\tif (!fieldData.has(fieldName)) {\n\t\t\t\t\tfieldData.set(fieldName, {\n\t\t\t\t\t\tvalues: new Set(),\n\t\t\t\t\t\tnullCount: 0,\n\t\t\t\t\t\ttotalLength: 0,\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst data = fieldData.get(fieldName);\n\t\t\t\tdata.count++;\n\n\t\t\t\tif (value === null || value === undefined) {\n\t\t\t\t\tdata.nullCount++;\n\t\t\t\t} else {\n\t\t\t\t\tdata.values.add(value);\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\tdata.totalLength += value.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Convert to statistics\n\t\tfor (const [fieldName, data] of fieldData) {\n\t\t\tthis.fieldStatistics.set(fieldName, {\n\t\t\t\tuniqueValues: data.values.size,\n\t\t\t\tnullCount: data.nullCount,\n\t\t\t\tdataType: this._inferDataType(data.values),\n\t\t\t\tavgLength: data.totalLength / data.count || 0,\n\t\t\t\tcardinality: data.values.size / this.totalRecords\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Update index statistics\n\t * @param {Map} indexes - Index data\n\t * @private\n\t */\n\t_updateIndexStatistics (indexes) {\n\t\tfor (const [indexName, indexStorage] of indexes) {\n\t\t\tconst stats = indexStorage.getStats();\n\t\t\tthis.indexStatistics.set(indexName, {\n\t\t\t\tcardinality: stats.totalKeys,\n\t\t\t\tselectivity: stats.totalKeys / this.totalRecords || 1,\n\t\t\t\tavgEntriesPerKey: stats.totalEntries / stats.totalKeys || 1,\n\t\t\t\tmemoryUsage: stats.memoryUsage\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Infer data type from values\n\t * @param {Set} values - Set of values\n\t * @returns {string} Inferred data type\n\t * @private\n\t */\n\t_inferDataType (values) {\n\t\tconst sample = Array.from(values).slice(0, 10);\n\t\tconst types = new Set(sample.map(v => typeof v));\n\n\t\tif (types.size === 1) {\n\t\t\treturn types.values().next().value;\n\t\t}\n\n\t\treturn \"mixed\";\n\t}\n}\n\n/**\n * Query optimizer that creates efficient execution plans\n */\nexport class QueryOptimizer {\n\t/**\n\t * @param {Object} [options={}] - Optimizer options\n\t * @param {boolean} [options.collectStatistics=true] - Whether to collect query statistics\n\t * @param {number} [options.statisticsUpdateInterval=1000] - How often to update statistics (queries)\n\t */\n\tconstructor (options = {}) {\n\t\tthis.options = {\n\t\t\tcollectStatistics: true,\n\t\t\tstatisticsUpdateInterval: 1000,\n\t\t\t...options\n\t\t};\n\n\t\tthis.statistics = new DataStatistics();\n\t\tthis.queryCounter = 0;\n\t\tthis.planCache = new Map();\n\t\tthis.executionHistory = [];\n\t\tthis.maxHistorySize = 1000;\n\t\tthis.cacheHits = 0;\n\t\tthis.totalCacheRequests = 0;\n\n\t\t// Cost model adjustments based on learning\n\t\tthis.costAdjustments = new Map([\n\t\t\t[\"INDEX_LOOKUP\", 1.0],\n\t\t\t[\"FULL_SCAN\", 1.0],\n\t\t\t[\"FILTER_EVALUATION\", 1.0],\n\t\t\t[\"SORT_OPERATION\", 1.0],\n\t\t\t[\"MEMORY_ACCESS\", 1.0],\n\t\t\t[\"COMPARISON\", 1.0],\n\t\t\t[\"REGEX_MATCH\", 1.0]\n\t\t]);\n\t\tthis.lastCostModelUpdate = new Date();\n\t}\n\n\t/**\n\t * Create an optimized query plan\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Query context (available indexes, etc.)\n\t * @returns {QueryPlan} Optimized query plan\n\t */\n\tcreatePlan (query, context) {\n\t\tconst queryId = `query_${++this.queryCounter}`;\n\t\tconst plan = new QueryPlan(queryId, query);\n\n\t\t// Track cache request\n\t\tthis.totalCacheRequests++;\n\n\t\t// Check plan cache first\n\t\tconst cacheKey = this._generateCacheKey(query);\n\t\tconst cachedPlan = this.planCache.get(cacheKey);\n\t\tif (cachedPlan && this._isCacheValid(cachedPlan)) {\n\t\t\t// Cache hit\n\t\t\tthis.cacheHits++;\n\n\t\t\treturn this._copyPlan(cachedPlan, queryId);\n\t\t}\n\n\t\t// Cache miss - create optimized plan\n\t\tthis._buildOptimizedPlan(plan, query, context);\n\n\t\t// Cache the plan\n\t\tthis.planCache.set(cacheKey, plan);\n\n\t\treturn plan;\n\t}\n\n\t/**\n\t * Update statistics with current data\n\t * @param {Map} records - Current records\n\t * @param {Map} indexes - Current indexes\n\t */\n\tupdateStatistics (records, indexes) {\n\t\tthis.statistics.update(records, indexes);\n\t}\n\n\t/**\n\t * Record plan execution for learning\n\t * @param {QueryPlan} plan - Executed plan\n\t */\n\trecordExecution (plan) {\n\t\tif (!this.options.collectStatistics) return;\n\n\t\tthis.executionHistory.push(plan.getStats());\n\n\t\t// Limit history size\n\t\tif (this.executionHistory.length > this.maxHistorySize) {\n\t\t\tthis.executionHistory.shift();\n\t\t}\n\n\t\t// Periodically update statistics\n\t\tif (this.queryCounter % this.options.statisticsUpdateInterval === 0) {\n\t\t\tthis._updateCostModel();\n\t\t}\n\t}\n\n\t/**\n\t * Get optimal execution strategy for a query\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Available indexes and options\n\t * @returns {Object} Execution strategy\n\t */\n\tgetOptimalStrategy (query, context) {\n\t\tconst strategies = this._generateStrategies(query, context);\n\n\t\t// Estimate costs for each strategy\n\t\tconst costedStrategies = strategies.map(strategy => ({\n\t\t\t...strategy,\n\t\t\testimatedCost: this._estimateStrategyCost(strategy)\n\t\t}));\n\n\t\t// Sort by estimated cost\n\t\tcostedStrategies.sort((a, b) => a.estimatedCost - b.estimatedCost);\n\n\t\treturn costedStrategies[0] || { type: \"full_scan\", estimatedCost: this._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords };\n\t}\n\n\t/**\n\t * Get optimizer statistics\n\t * @returns {Object} Optimizer statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tqueryCounter: this.queryCounter,\n\t\t\tplanCacheSize: this.planCache.size,\n\t\t\texecutionHistorySize: this.executionHistory.length,\n\t\t\tdataStatistics: {\n\t\t\t\ttotalRecords: this.statistics.totalRecords,\n\t\t\t\tlastUpdated: this.statistics.lastUpdated,\n\t\t\t\tindexCount: this.statistics.indexStatistics.size,\n\t\t\t\tfieldCount: this.statistics.fieldStatistics.size\n\t\t\t},\n\t\t\taverageQueryCost: this._calculateAverageQueryCost(),\n\t\t\tcacheHitRate: this._calculateCacheHitRate(),\n\t\t\tcacheStatistics: {\n\t\t\t\ttotalRequests: this.totalCacheRequests,\n\t\t\t\thits: this.cacheHits,\n\t\t\t\tmisses: this.totalCacheRequests - this.cacheHits,\n\t\t\t\thitRate: this._calculateCacheHitRate()\n\t\t\t},\n\t\t\tcostModel: {\n\t\t\t\tadjustments: Object.fromEntries(this.costAdjustments),\n\t\t\t\tlastUpdated: this.lastCostModelUpdate\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Clear optimizer caches and history\n\t */\n\tclear () {\n\t\tthis.planCache.clear();\n\t\tthis.executionHistory = [];\n\t\tthis.queryCounter = 0;\n\t\tthis.cacheHits = 0;\n\t\tthis.totalCacheRequests = 0;\n\n\t\t// Reset cost adjustments to default values\n\t\tthis.costAdjustments.clear();\n\t\tthis.costAdjustments.set(\"INDEX_LOOKUP\", 1.0);\n\t\tthis.costAdjustments.set(\"FULL_SCAN\", 1.0);\n\t\tthis.costAdjustments.set(\"FILTER_EVALUATION\", 1.0);\n\t\tthis.costAdjustments.set(\"SORT_OPERATION\", 1.0);\n\t\tthis.costAdjustments.set(\"MEMORY_ACCESS\", 1.0);\n\t\tthis.costAdjustments.set(\"COMPARISON\", 1.0);\n\t\tthis.costAdjustments.set(\"REGEX_MATCH\", 1.0);\n\t\tthis.lastCostModelUpdate = new Date();\n\t}\n\n\t/**\n\t * Build optimized execution plan\n\t * @param {QueryPlan} plan - Plan to build\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Query context\n\t * @private\n\t */\n\t_buildOptimizedPlan (plan, query, context) {\n\t\tconst strategy = this.getOptimalStrategy(query, context);\n\n\t\tswitch (strategy.type) {\n\t\t\tcase \"index_lookup\":\n\t\t\t\tthis._addIndexLookupSteps(plan, strategy);\n\t\t\t\tbreak;\n\t\t\tcase \"filtered_scan\":\n\t\t\t\tthis._addFilteredScanSteps(plan, query, strategy);\n\t\t\t\tbreak;\n\t\t\tcase \"full_scan\":\n\t\t\t\tthis._addFullScanSteps(plan);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._addFullScanSteps(plan);\n\t\t}\n\n\t\t// Add post-processing steps\n\t\tthis._addPostProcessingSteps(plan, query);\n\t}\n\n\t/**\n\t * Add index lookup steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} strategy - Execution strategy\n\t * @private\n\t */\n\t_addIndexLookupSteps (plan, strategy) {\n\t\tconst step = new QueryPlanStep(\n\t\t\t\"index_lookup\",\n\t\t\t{\n\t\t\t\tindexName: strategy.indexName,\n\t\t\t\tlookupKey: strategy.lookupKey\n\t\t\t},\n\t\t\tthis._getAdjustedCostFactor(\"INDEX_LOOKUP\"),\n\t\t\tthis._estimateIndexLookupRows(strategy.indexName)\n\t\t);\n\n\t\tplan.addStep(step);\n\t}\n\n\t/**\n\t * Add filtered scan steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} query - Query object\n\t * @param {Object} strategy - Execution strategy\n\t * @private\n\t */\n\t_addFilteredScanSteps (plan, query, strategy) {\n\t\t// First, index lookup for partial filtering\n\t\tif (strategy.indexName) {\n\t\t\tthis._addIndexLookupSteps(plan, strategy);\n\t\t}\n\n\t\t// Then, filter remaining records\n\t\tconst filterStep = new QueryPlanStep(\n\t\t\t\"filter\",\n\t\t\t{ predicate: query.filter || query.where },\n\t\t\tthis._getAdjustedCostFactor(\"FILTER_EVALUATION\") * this.statistics.totalRecords,\n\t\t\tthis.statistics.totalRecords * 0.1 // Assume 10% selectivity\n\t\t);\n\n\t\tplan.addStep(filterStep);\n\t}\n\n\t/**\n\t * Add full scan steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @private\n\t */\n\t_addFullScanSteps (plan) {\n\t\tconst step = new QueryPlanStep(\n\t\t\t\"full_scan\",\n\t\t\t{ scanType: \"sequential\" },\n\t\t\tthis._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords,\n\t\t\tthis.statistics.totalRecords\n\t\t);\n\n\t\tplan.addStep(step);\n\t}\n\n\t/**\n\t * Add post-processing steps (sort, limit, etc.)\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} query - Query object\n\t * @private\n\t */\n\t_addPostProcessingSteps (plan, query) {\n\t\t// Add sort step if needed\n\t\tif (query.sort || query.sortBy) {\n\t\t\tconst sortStep = new QueryPlanStep(\n\t\t\t\t\"sort\",\n\t\t\t\t{ sortField: query.sortBy, sortFunction: query.sort },\n\t\t\t\tthis._getAdjustedCostFactor(\"SORT_OPERATION\") * plan.totalEstimatedRows,\n\t\t\t\tplan.totalEstimatedRows\n\t\t\t);\n\t\t\tplan.addStep(sortStep);\n\t\t}\n\n\t\t// Add limit step if needed\n\t\tif (query.limit) {\n\t\t\tconst limitStep = new QueryPlanStep(\n\t\t\t\t\"limit\",\n\t\t\t\t{ offset: query.offset || 0, max: query.limit },\n\t\t\t\tthis._getAdjustedCostFactor(\"MEMORY_ACCESS\"),\n\t\t\t\tMath.min(query.limit, plan.totalEstimatedRows)\n\t\t\t);\n\t\t\tplan.addStep(limitStep);\n\t\t}\n\t}\n\n\t/**\n\t * Generate possible execution strategies\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Available indexes and options\n\t * @returns {Array} Array of possible strategies\n\t * @private\n\t */\n\t_generateStrategies (query, context) {\n\t\tconst strategies = [];\n\n\t\t// Strategy 1: Full scan (always available)\n\t\tstrategies.push({ type: \"full_scan\" });\n\n\t\t// Strategy 2: Index-based lookup\n\t\tif (query.find && context.indexManager) {\n\t\t\tconst fields = Object.keys(query.find);\n\t\t\tconst optimalIndex = context.indexManager.getOptimalIndex(fields);\n\n\t\t\tif (optimalIndex) {\n\t\t\t\tstrategies.push({\n\t\t\t\t\ttype: \"index_lookup\",\n\t\t\t\t\tindexName: optimalIndex,\n\t\t\t\t\tlookupKey: this._generateLookupKey(query.find, fields)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Strategy 3: Filtered scan with partial index\n\t\tif ((query.filter || query.where) && context.indexManager) {\n\t\t\tconst availableIndexes = context.indexManager.listIndexes();\n\n\t\t\tfor (const indexName of availableIndexes) {\n\t\t\t\tstrategies.push({\n\t\t\t\t\ttype: \"filtered_scan\",\n\t\t\t\t\tindexName,\n\t\t\t\t\tpartialFilter: true\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn strategies;\n\t}\n\n\t/**\n\t * Estimate cost of an execution strategy\n\t * @param {Object} strategy - Execution strategy\n\t * @returns {number} Estimated cost\n\t * @private\n\t */\n\t_estimateStrategyCost (strategy) {\n\t\tswitch (strategy.type) {\n\t\t\tcase \"index_lookup\":\n\t\t\t\treturn this._getAdjustedCostFactor(\"INDEX_LOOKUP\") +\n\t\t\t\t\tthis._estimateIndexLookupRows(strategy.indexName, strategy.lookupKey) * this._getAdjustedCostFactor(\"MEMORY_ACCESS\");\n\n\t\t\tcase \"filtered_scan\": {\n\t\t\t\tconst indexCost = strategy.indexName ? this._getAdjustedCostFactor(\"INDEX_LOOKUP\") : 0;\n\t\t\t\tconst filterCost = this._getAdjustedCostFactor(\"FILTER_EVALUATION\") * this.statistics.totalRecords;\n\n\t\t\t\treturn indexCost + filterCost;\n\t\t\t}\n\n\t\t\tcase \"full_scan\":\n\t\t\t\treturn this._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords;\n\n\t\t\tdefault:\n\t\t\t\treturn Number.MAX_SAFE_INTEGER;\n\t\t}\n\t}\n\n\t/**\n\t * Get cost factor adjusted by learned performance data\n\t * @param {string} factorName - Name of the cost factor\n\t * @returns {number} Adjusted cost factor\n\t * @private\n\t */\n\t_getAdjustedCostFactor (factorName) {\n\t\tconst baseCost = CostFactors[factorName] || 1;\n\t\tconst adjustment = this.costAdjustments.get(factorName) || 1.0;\n\n\t\treturn baseCost * adjustment;\n\t}\n\n\t/**\n\t * Estimate number of rows returned by index lookup\n\t * @param {string} indexName - Index name\n\t * @returns {number} Estimated row count\n\t * @private\n\t */\n\t_estimateIndexLookupRows (indexName) {\n\t\tconst indexStats = this.statistics.indexStatistics.get(indexName);\n\t\tif (!indexStats) {\n\t\t\treturn this.statistics.totalRecords * 0.1; // Default 10%\n\t\t}\n\n\t\treturn Math.max(1, this.statistics.totalRecords / indexStats.cardinality);\n\t}\n\n\t/**\n\t * Generate cache key for query\n\t * @param {Object} query - Query object\n\t * @returns {string} Cache key\n\t * @private\n\t */\n\t_generateCacheKey (query) {\n\t\treturn JSON.stringify(query);\n\t}\n\n\t/**\n\t * Check if cached plan is still valid\n\t * @param {QueryPlan} cachedPlan - Cached plan\n\t * @returns {boolean} True if cache is valid\n\t * @private\n\t */\n\t_isCacheValid (cachedPlan) {\n\t\t// Simple cache invalidation based on time\n\t\tconst maxAge = 5 * 60 * 1000; // 5 minutes\n\n\t\treturn Date.now() - cachedPlan.createdAt.getTime() < maxAge;\n\t}\n\n\t/**\n\t * Copy a cached plan with new ID\n\t * @param {QueryPlan} originalPlan - Original plan\n\t * @param {string} newQueryId - New query ID\n\t * @returns {QueryPlan} Copied plan\n\t * @private\n\t */\n\t_copyPlan (originalPlan, newQueryId) {\n\t\tconst newPlan = new QueryPlan(newQueryId, originalPlan.originalQuery);\n\n\t\tfor (const step of originalPlan.steps) {\n\t\t\tconst newStep = new QueryPlanStep(\n\t\t\t\tstep.operation,\n\t\t\t\tstep.options,\n\t\t\t\tstep.estimatedCost,\n\t\t\t\tstep.estimatedRows\n\t\t\t);\n\t\t\tnewPlan.addStep(newStep);\n\t\t}\n\n\t\treturn newPlan;\n\t}\n\n\t/**\n\t * Generate lookup key from query criteria\n\t * @param {Object} criteria - Query criteria\n\t * @param {string[]} fields - Field names\n\t * @returns {string} Lookup key\n\t * @private\n\t */\n\t_generateLookupKey (criteria, fields) {\n\t\treturn fields.sort().map(field => String(criteria[field])).join(\"|\");\n\t}\n\n\t/**\n\t * Update cost model based on execution history\n\t * @private\n\t */\n\t_updateCostModel () {\n\t\tif (this.executionHistory.length < 10) {\n\t\t\treturn; // Need sufficient data for meaningful analysis\n\t\t}\n\n\t\tthis.lastCostModelUpdate = new Date();\n\n\t\t// Analyze each operation type separately\n\t\tconst operationStats = this._analyzeOperationPerformance();\n\n\t\t// Update cost adjustments based on performance analysis\n\t\tfor (const [operation, stats] of operationStats) {\n\t\t\tif (stats.sampleSize >= 3) { // Only process operations with sufficient data\n\t\t\t\tconst currentAdjustment = this.costAdjustments.get(operation) || 1.0;\n\t\t\t\tlet newAdjustment = currentAdjustment;\n\n\t\t\t\t// Calculate performance ratio (actual vs estimated)\n\t\t\t\tconst performanceRatio = stats.avgActualCost / stats.avgEstimatedCost;\n\n\t\t\t\tif (stats.consistency > 0.7) { // Only adjust if performance is consistent\n\t\t\t\t\t// Gradually adjust towards the observed performance\n\t\t\t\t\tconst learningRate = 0.1; // Conservative learning rate\n\t\t\t\t\tnewAdjustment = currentAdjustment * (1 + learningRate * (performanceRatio - 1));\n\n\t\t\t\t\t// Clamp adjustments to reasonable bounds\n\t\t\t\t\tnewAdjustment = Math.max(0.1, Math.min(10.0, newAdjustment));\n\n\t\t\t\t\tthis.costAdjustments.set(operation, newAdjustment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clear old execution history to prevent memory bloat\n\t\tif (this.executionHistory.length > this.maxHistorySize * 0.8) {\n\t\t\tthis.executionHistory = this.executionHistory.slice(-Math.floor(this.maxHistorySize * 0.6));\n\t\t}\n\t}\n\n\t/**\n\t * Analyze operation performance from execution history\n\t * @returns {Map} Map of operation -> performance statistics\n\t * @private\n\t */\n\t_analyzeOperationPerformance () {\n\t\tconst operationStats = new Map();\n\n\t\t// Process each execution in history\n\t\tfor (const execution of this.executionHistory) {\n\t\t\tif (execution.steps && Array.isArray(execution.steps)) {\n\t\t\t\t// Analyze each step in the execution\n\t\t\t\tfor (const step of execution.steps) {\n\t\t\t\t\tif (step.operation && step.actualCost !== null && step.estimatedCost !== 0) {\n\t\t\t\t\t\tconst operation = this._mapOperationToCostFactor(step.operation);\n\t\t\t\t\t\tif (operation) {\n\t\t\t\t\t\t\tif (!operationStats.has(operation)) {\n\t\t\t\t\t\t\t\toperationStats.set(operation, {\n\t\t\t\t\t\t\t\t\tsampleSize: 0,\n\t\t\t\t\t\t\t\t\ttotalActualCost: 0,\n\t\t\t\t\t\t\t\t\ttotalEstimatedCost: 0,\n\t\t\t\t\t\t\t\t\tcosts: [],\n\t\t\t\t\t\t\t\t\testimatedCosts: []\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst stats = operationStats.get(operation);\n\t\t\t\t\t\t\tstats.sampleSize++;\n\t\t\t\t\t\t\tstats.totalActualCost += step.actualCost;\n\t\t\t\t\t\t\tstats.totalEstimatedCost += step.estimatedCost;\n\t\t\t\t\t\t\tstats.costs.push(step.actualCost);\n\t\t\t\t\t\t\tstats.estimatedCosts.push(step.estimatedCost);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Calculate derived statistics\n\t\tfor (const [, stats] of operationStats) {\n\t\t\tstats.avgActualCost = stats.totalActualCost / stats.sampleSize;\n\t\t\tstats.avgEstimatedCost = stats.totalEstimatedCost / stats.sampleSize;\n\n\t\t\t// Calculate consistency (inverse of coefficient of variation)\n\t\t\tconst variance = this._calculateVariance(stats.costs, stats.avgActualCost);\n\t\t\tconst stdDev = Math.sqrt(variance);\n\t\t\tconst coefficientOfVariation = stdDev / stats.avgActualCost;\n\t\t\tstats.consistency = Math.max(0, 1 - coefficientOfVariation);\n\n\t\t\t// Calculate accuracy (how close estimates were to actual)\n\t\t\tconst accuracyScores = stats.costs.map((actual, i) => {\n\t\t\t\tconst estimated = stats.estimatedCosts[i];\n\n\t\t\t\treturn 1 - Math.abs(actual - estimated) / Math.max(actual, estimated);\n\t\t\t});\n\t\t\tstats.accuracy = accuracyScores.reduce((sum, score) => sum + score, 0) / accuracyScores.length;\n\t\t}\n\n\t\treturn operationStats;\n\t}\n\n\t/**\n\t * Map step operation to cost factor name\n\t * @param {string} operation - Operation name from step\n\t * @returns {string|null} Cost factor name\n\t * @private\n\t */\n\t_mapOperationToCostFactor (operation) {\n\t\tconst mapping = {\n\t\t\t\"index_lookup\": \"INDEX_LOOKUP\",\n\t\t\t\"full_scan\": \"FULL_SCAN\",\n\t\t\t\"filter\": \"FILTER_EVALUATION\",\n\t\t\t\"sort\": \"SORT_OPERATION\",\n\t\t\t\"limit\": \"MEMORY_ACCESS\",\n\t\t\t\"regex\": \"REGEX_MATCH\"\n\t\t};\n\n\t\treturn mapping[operation] || null;\n\t}\n\n\t/**\n\t * Calculate variance of a set of values\n\t * @param {number[]} values - Array of values\n\t * @param {number} mean - Mean of the values\n\t * @returns {number} Variance\n\t * @private\n\t */\n\t_calculateVariance (values, mean) {\n\t\tif (values.length <= 1) return 0;\n\n\t\tconst squaredDifferences = values.map(value => Math.pow(value - mean, 2));\n\n\t\treturn squaredDifferences.reduce((sum, diff) => sum + diff, 0) / (values.length - 1);\n\t}\n\n\t/**\n\t * Calculate average query cost from history\n\t * @returns {number} Average query cost\n\t * @private\n\t */\n\t_calculateAverageQueryCost () {\n\t\tif (this.executionHistory.length === 0) return 0;\n\n\t\tconst totalCost = this.executionHistory.reduce((sum, plan) => sum + (plan.totalActualCost || 0), 0);\n\n\t\treturn totalCost / this.executionHistory.length;\n\t}\n\n\t/**\n\t * Calculate cache hit rate\n\t * @returns {number} Cache hit rate (0-1)\n\t * @private\n\t */\n\t_calculateCacheHitRate () {\n\t\tif (this.totalCacheRequests === 0) return 0;\n\n\t\treturn this.cacheHits / this.totalCacheRequests;\n\t}\n}\n","/**\n * Deep immutability implementation with structural sharing\n */\nexport class ImmutableStore {\n\t/**\n\t * @param {Map} [data] - Initial data\n\t */\n\tconstructor (data = new Map()) {\n\t\tthis._data = new Map(data);\n\t\tthis._frozenViews = new WeakMap();\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get a deeply frozen view of the data\n\t * @param {string} key - Record key\n\t * @returns {Object|null} Frozen record or null\n\t */\n\tget (key) {\n\t\tconst record = this._data.get(key);\n\t\tif (!record) return null;\n\n\t\t// Check if we already have a frozen view\n\t\tif (this._frozenViews.has(record)) {\n\t\t\treturn this._frozenViews.get(record);\n\t\t}\n\n\t\t// Create deeply frozen view\n\t\tconst frozen = this._deepFreeze(structuredClone(record));\n\t\tthis._frozenViews.set(record, frozen);\n\n\t\treturn frozen;\n\t}\n\n\t/**\n\t * Create new store with updated record (structural sharing)\n\t * @param {string} key - Record key\n\t * @param {Object} record - Record data\n\t * @returns {ImmutableStore} New store instance\n\t */\n\tset (key, record) {\n\t\tconst newData = new Map(this._data);\n\t\tnewData.set(key, record);\n\n\t\treturn new ImmutableStore(newData);\n\t}\n\n\t/**\n\t * Create new store without record\n\t * @param {string} key - Record key to remove\n\t * @returns {ImmutableStore} New store instance\n\t */\n\tdelete (key) {\n\t\tconst newData = new Map(this._data);\n\t\tnewData.delete(key);\n\n\t\treturn new ImmutableStore(newData);\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if exists\n\t */\n\thas (key) {\n\t\treturn this._data.has(key);\n\t}\n\n\t/**\n\t * Get all keys\n\t * @returns {string[]} Array of keys\n\t */\n\tkeys () {\n\t\treturn Array.from(this._data.keys());\n\t}\n\n\t/**\n\t * Get store size\n\t * @returns {number} Number of records\n\t */\n\tget size () {\n\t\treturn this._data.size;\n\t}\n\n\t/**\n\t * Get all entries\n\t * @returns {Array<[string, Object]>} Array of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn Array.from(this._data.entries());\n\t}\n\n\t/**\n\t * Deep freeze an object\n\t * @param {*} obj - Object to freeze\n\t * @returns {*} Frozen object\n\t * @private\n\t */\n\t_deepFreeze (obj) {\n\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\treturn obj;\n\t\t}\n\n\t\tif (Array.isArray(obj)) {\n\t\t\tobj.forEach(item => this._deepFreeze(item));\n\t\t} else {\n\t\t\tObject.values(obj).forEach(value => this._deepFreeze(value));\n\t\t}\n\n\t\treturn Object.freeze(obj);\n\t}\n}\n","/**\n * Streaming support for large datasets\n */\nexport class DataStream {\n\t/**\n\t * @param {Iterator} iterator - Data iterator\n\t * @param {Object} [options={}] - Stream options\n\t */\n\tconstructor (iterator, options = {}) {\n\t\tthis.iterator = iterator;\n\t\tthis.options = {\n\t\t\tbatchSize: 1000,\n\t\t\tbufferSize: 10000,\n\t\t\t...options\n\t\t};\n\t\tthis.buffer = [];\n\t\tthis.ended = false;\n\t\tthis.position = 0;\n\t}\n\n\t/**\n\t * Read next batch of records\n\t * @param {number} [size] - Batch size\n\t * @returns {Promise<Record[]>} Array of records\n\t */\n\tasync read (size = this.options.batchSize) {\n\t\tconst batch = [];\n\n\t\twhile (batch.length < size && !this.ended) {\n\t\t\tconst { value, done } = this.iterator.next();\n\n\t\t\tif (done) {\n\t\t\t\tthis.ended = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbatch.push(value);\n\t\t\tthis.position++;\n\t\t}\n\n\t\treturn batch;\n\t}\n\n\t/**\n\t * Read all remaining records\n\t * @returns {Promise<Record[]>} All records\n\t */\n\tasync readAll () {\n\t\tconst records = [];\n\n\t\twhile (!this.ended) {\n\t\t\tconst batch = await this.read();\n\t\t\trecords.push(...batch);\n\t\t}\n\n\t\treturn records;\n\t}\n\n\t/**\n\t * Apply transformation to stream\n\t * @param {Function} transform - Transform function\n\t * @returns {DataStream} New transformed stream\n\t */\n\tmap (transform) {\n\t\tconst transformedIterator = {\n\t\t\tnext: () => {\n\t\t\t\tconst { value, done } = this.iterator.next();\n\n\t\t\t\treturn done ? { done: true } : { value: transform(value), done: false };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(transformedIterator, this.options);\n\t}\n\n\t/**\n\t * Filter stream records\n\t * @param {Function} predicate - Filter predicate\n\t * @returns {DataStream} New filtered stream\n\t */\n\tfilter (predicate) {\n\t\tconst filteredIterator = {\n\t\t\tnext: () => {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst { value, done } = this.iterator.next();\n\t\t\t\t\tif (done) return { done: true };\n\t\t\t\t\tif (predicate(value)) return { value, done: false };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(filteredIterator, this.options);\n\t}\n\n\t/**\n\t * Take limited number of records\n\t * @param {number} limit - Maximum records\n\t * @returns {DataStream} New limited stream\n\t */\n\ttake (limit) {\n\t\tlet count = 0;\n\t\tconst limitedIterator = {\n\t\t\tnext: () => {\n\t\t\t\tif (count >= limit) return { done: true };\n\t\t\t\tconst { value, done } = this.iterator.next();\n\t\t\t\tif (done) return { done: true };\n\t\t\t\tcount++;\n\n\t\t\t\treturn { value, done: false };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(limitedIterator, this.options);\n\t}\n\n\t/**\n\t * Get stream statistics\n\t * @returns {Object} Stream statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tposition: this.position,\n\t\t\tended: this.ended,\n\t\t\tbufferSize: this.buffer.length,\n\t\t\toptions: this.options\n\t\t};\n\t}\n}\n","import { ImmutableStore } from \"./immutable-store.js\";\n\n/**\n * Manages storage operations with support for both mutable and immutable stores\n */\nexport class StorageManager {\n\t/**\n\t * @param {Object} config - Storage configuration\n\t */\n\tconstructor (config = {}) {\n\t\tthis.config = {\n\t\t\timmutable: false,\n\t\t\t...config\n\t\t};\n\n\t\t// Initialize storage based on configuration\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = new ImmutableStore();\n\t\t} else {\n\t\t\tthis._store = new Map();\n\t\t}\n\t}\n\n\t/**\n\t * Get a record from storage\n\t * @param {string} key - Record key\n\t * @returns {Object|null} Record data or null\n\t */\n\tget (key) {\n\t\treturn this._store.get(key) || null;\n\t}\n\n\t/**\n\t * Set a record in storage\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @returns {boolean} Success status\n\t */\n\tset (key, data) {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = this._store.set(key, data);\n\t\t} else {\n\t\t\tthis._store.set(key, data);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete a record from storage\n\t * @param {string} key - Record key\n\t * @returns {boolean} Success status\n\t */\n\tdelete (key) {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = this._store.delete(key);\n\t\t} else {\n\t\t\tthis._store.delete(key);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if record exists in storage\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if exists\n\t */\n\thas (key) {\n\t\treturn this._store.has(key);\n\t}\n\n\t/**\n\t * Get all storage keys\n\t * @returns {string[]} Array of keys\n\t */\n\tkeys () {\n\t\tif (this.config.immutable) {\n\t\t\treturn this._store.keys();\n\t\t}\n\n\t\treturn Array.from(this._store.keys());\n\t}\n\n\t/**\n\t * Get all storage values\n\t * @returns {IterableIterator<Object>} Iterable of values\n\t */\n\tvalues () {\n\t\treturn this._store.values();\n\t}\n\n\t/**\n\t * Get all storage entries\n\t * @returns {IterableIterator<[string, Object]>} Iterable of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn this._store.entries();\n\t}\n\n\t/**\n\t * Get storage size\n\t * @returns {number} Number of records\n\t */\n\tget size () {\n\t\treturn this._store.size;\n\t}\n\n\t/**\n\t * Clear all storage\n\t */\n\tclear () {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = new ImmutableStore();\n\t\t} else {\n\t\t\tthis._store.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Get underlying store (for compatibility)\n\t * @returns {Map|ImmutableStore} The underlying store\n\t */\n\tgetStore () {\n\t\treturn this._store;\n\t}\n\n\t/**\n\t * Estimate storage memory usage\n\t * @returns {number} Estimated bytes\n\t */\n\testimateMemoryUsage () {\n\t\tlet dataSize = 0;\n\t\tfor (const [key, value] of this.entries()) {\n\t\t\tdataSize += JSON.stringify({ key, value }).length * 2; // UTF-16 estimate\n\t\t}\n\n\t\treturn dataSize;\n\t}\n}\n","import { randomUUID as uuid } from \"crypto\";\nimport { ValidationError, RecordNotFoundError, HaroError } from \"./errors.js\";\nimport { RecordFactory } from \"./record.js\";\n\n/**\n * Manages CRUD operations with validation and error handling\n */\nexport class CRUDManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {VersionManager} [dependencies.versionManager] - Version manager\n\t * @param {Object} dependencies.config - Configuration\n\t */\n\tconstructor ({ storageManager, indexManager, versionManager = null, config }) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.versionManager = versionManager;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Set or update a record with comprehensive validation and error handling\n\t * @param {string|null} key - Record key or null for auto-generation\n\t * @param {Object} [data={}] - Record data\n\t * @param {Object} [options={}] - Operation options\n\t * @returns {Record} Created/updated record\n\t * @throws {ValidationError} If data validation fails\n\t */\n\tset (key, data = {}, options = {}) {\n\t\ttry {\n\t\t\tconst {\n\t\t\t\toverride = false,\n\t\t\t\tvalidate = true\n\t\t\t} = options;\n\n\t\t\t// Generate key if not provided\n\t\t\tif (key === null) {\n\t\t\t\tkey = data[this.config.key] ?? uuid();\n\t\t\t}\n\n\t\t\t// Ensure key is in data\n\t\t\tconst recordData = { ...data, [this.config.key]: key };\n\n\t\t\t// Validate against schema if configured\n\t\t\tif (validate && this.config.schema) {\n\t\t\t\tthis.config.schema.validate(recordData);\n\t\t\t}\n\n\t\t\t// Get existing record for merging and versioning\n\t\t\tconst existingRecord = this.storageManager.has(key) ? this.storageManager.get(key) : null;\n\t\t\tlet finalData = recordData;\n\n\t\t\t// Handle merging vs override\n\t\t\tif (existingRecord && !override) {\n\t\t\t\tfinalData = this._mergeRecords(existingRecord, recordData);\n\t\t\t}\n\n\t\t\t// Store version if versioning enabled\n\t\t\tif (this.versionManager && existingRecord) {\n\t\t\t\tthis.versionManager.addVersion(key, existingRecord);\n\t\t\t}\n\n\t\t\t// Update indexes\n\t\t\tif (existingRecord) {\n\t\t\t\tthis.indexManager.removeRecord(key, existingRecord);\n\t\t\t}\n\t\t\tthis.indexManager.addRecord(key, finalData);\n\n\t\t\t// Store record\n\t\t\tthis.storageManager.set(key, finalData);\n\n\t\t\t// Create record wrapper\n\t\t\tconst record = RecordFactory.create(key, finalData);\n\n\t\t\treturn record;\n\n\t\t} catch (error) {\n\t\t\tif (error instanceof HaroError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new ValidationError(`Failed to set record: ${error.message}`, \"record\", data);\n\t\t}\n\t}\n\n\t/**\n\t * Get a record by key with consistent return format\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Get options\n\t * @returns {Record|null} Record instance or null if not found\n\t */\n\tget (key, options = {}) {\n\t\tconst { includeVersions = false } = options;\n\n\t\tconst recordData = this.storageManager.get(key);\n\n\t\tif (!recordData) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst record = RecordFactory.create(key, recordData);\n\n\t\t// Add version information if requested\n\t\tif (includeVersions && this.versionManager) {\n\t\t\tconst history = this.versionManager.getHistory(key);\n\t\t\tif (history) {\n\t\t\t\tconst metadata = { versions: history.versions };\n\n\t\t\t\treturn RecordFactory.create(key, recordData, metadata);\n\t\t\t}\n\t\t}\n\n\t\treturn record;\n\t}\n\n\t/**\n\t * Delete a record with proper cleanup\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Delete options\n\t * @returns {boolean} True if deleted successfully\n\t * @throws {RecordNotFoundError} If record not found\n\t */\n\tdelete (key) {\n\t\tif (!this.storageManager.has(key)) {\n\t\t\tthrow new RecordNotFoundError(key, this.config.id);\n\t\t}\n\n\t\tconst recordData = this.storageManager.get(key);\n\n\t\t// Remove from indexes\n\t\tthis.indexManager.removeRecord(key, recordData);\n\n\t\t// Remove from store\n\t\tthis.storageManager.delete(key);\n\n\t\t// Cleanup versions\n\t\tif (this.versionManager) {\n\t\t\tthis.versionManager.disableVersioning(key);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if record exists\n\t */\n\thas (key) {\n\t\treturn this.storageManager.has(key);\n\t}\n\n\t/**\n\t * Merge two records\n\t * @param {Object} existing - Existing record\n\t * @param {Object} updates - Updates to apply\n\t * @returns {Object} Merged record\n\t * @private\n\t */\n\t_mergeRecords (existing, updates) {\n\t\tif (Array.isArray(existing) && Array.isArray(updates)) {\n\t\t\treturn [...existing, ...updates];\n\t\t}\n\n\t\tif (typeof existing === \"object\" && typeof updates === \"object\") {\n\t\t\tconst merged = { ...existing };\n\t\t\tfor (const [key, value] of Object.entries(updates)) {\n\t\t\t\tif (typeof value === \"object\" && value !== null && !Array.isArray(value) &&\n\t\t\t\t\ttypeof existing[key] === \"object\" && existing[key] !== null && !Array.isArray(existing[key])) {\n\t\t\t\t\tmerged[key] = this._mergeRecords(existing[key], value);\n\t\t\t\t} else {\n\t\t\t\t\tmerged[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn merged;\n\t\t}\n\n\t\treturn updates;\n\t}\n}\n","import { QueryError } from \"./errors.js\";\nimport { RecordCollection, RecordFactory } from \"./record.js\";\n\n/**\n * Manages complex querying operations and criteria matching\n */\nexport class QueryManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {QueryOptimizer} [dependencies.queryOptimizer] - Query optimizer\n\t */\n\tconstructor ({ storageManager, indexManager, queryOptimizer = null }) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.queryOptimizer = queryOptimizer;\n\t}\n\n\t/**\n\t * Find records using optimized queries\n\t * @param {Object} [criteria={}] - Search criteria\n\t * @param {Object} [options={}] - Query options\n\t * @returns {RecordCollection} Collection of matching records\n\t */\n\tfind (criteria = {}, options = {}) {\n\t\tconst {\n\t\t\tlimit,\n\t\t\toffset = 0\n\t\t} = options;\n\n\t\ttry {\n\t\t\t// Create query plan if optimizer is available\n\t\t\tlet plan = null;\n\t\t\tif (this.queryOptimizer) {\n\t\t\t\tconst query = { find: criteria, limit, offset };\n\t\t\t\tconst context = { indexManager: this.indexManager };\n\t\t\t\tplan = this.queryOptimizer.createPlan(query, context);\n\t\t\t\tplan.startExecution();\n\t\t\t}\n\n\t\t\t// Use index if available\n\t\t\tconst fields = Object.keys(criteria);\n\t\t\tconst optimalIndex = this.indexManager.getOptimalIndex(fields);\n\n\t\t\tlet recordKeys;\n\t\t\tif (optimalIndex) {\n\t\t\t\trecordKeys = this.indexManager.findByCriteria(criteria);\n\t\t\t} else {\n\t\t\t\t// Fallback to full scan\n\t\t\t\trecordKeys = new Set(this.storageManager.keys());\n\t\t\t}\n\n\t\t\t// Convert to records and filter\n\t\t\tconst records = [];\n\t\t\tfor (const key of recordKeys) {\n\t\t\t\tconst recordData = this.storageManager.get(key);\n\t\t\t\tif (this._matchesCriteria(recordData, criteria)) {\n\t\t\t\t\trecords.push(RecordFactory.create(key, recordData));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply pagination\n\t\t\tconst start = offset;\n\t\t\tconst end = limit ? start + limit : records.length;\n\t\t\tconst paginatedRecords = records.slice(start, end);\n\n\t\t\tif (plan) {\n\t\t\t\tplan.completeExecution(paginatedRecords.length);\n\t\t\t\tthis.queryOptimizer.recordExecution(plan);\n\t\t\t}\n\n\t\t\treturn new RecordCollection(paginatedRecords);\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Find operation failed: ${error.message}`, criteria, \"find\");\n\t\t}\n\t}\n\n\t/**\n\t * Advanced filtering with predicate logic\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\twhere (predicate, options = {}) {\n\t\ttry {\n\t\t\tif (typeof predicate === \"function\") {\n\t\t\t\treturn this._filterByFunction(predicate, options);\n\t\t\t}\n\n\t\t\tif (typeof predicate === \"object\" && predicate !== null) {\n\t\t\t\treturn this._filterByObject(predicate, options);\n\t\t\t}\n\n\t\t\tthrow new QueryError(\"Predicate must be a function or object\", predicate, \"where\");\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Where operation failed: ${error.message}`, predicate, \"where\");\n\t\t}\n\t}\n\n\t/**\n\t * Check if record matches criteria\n\t * @param {Object} record - Record to check\n\t * @param {Object} criteria - Criteria object\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesCriteria (record, criteria) {\n\t\tfor (const [field, value] of Object.entries(criteria)) {\n\t\t\tconst recordValue = record[field];\n\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\tif (!value.test(recordValue)) return false;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (Array.isArray(recordValue)) {\n\t\t\t\t\tif (!value.some(v => recordValue.includes(v))) return false;\n\t\t\t\t} else if (!value.includes(recordValue)) return false;\n\t\t\t} else if (recordValue !== value) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Filter by function predicate\n\t * @param {Function} predicate - Filter function\n\t * @param {Object} options - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t * @private\n\t */\n\t_filterByFunction (predicate, options) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tconst records = [];\n\n\t\tlet count = 0;\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\t// For backwards compatibility, pass plain objects to predicates\n\t\t\tif (predicate(recordData)) {\n\t\t\t\tif (count >= offset) {\n\t\t\t\t\trecords.push(RecordFactory.create(key, recordData));\n\t\t\t\t\tif (limit && records.length >= limit) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(records);\n\t}\n\n\t/**\n\t * Filter by object predicate\n\t * @param {Object} predicate - Filter object\n\t * @param {Object} options - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t * @private\n\t */\n\t_filterByObject (predicate, options) {\n\t\treturn this.find(predicate, options);\n\t}\n\n\t/**\n\t * Search records by value in specified fields\n\t * @param {*} value - Search value\n\t * @param {string|Array<string>} [fields] - Fields to search\n\t * @param {Object} [options={}] - Search options\n\t * @returns {RecordCollection} Matching records\n\t */\n\tsearch (value, fields, options = {}) {\n\t\t// Function-based search (delegate to where)\n\t\tif (typeof value === \"function\") {\n\t\t\treturn this.where(value, options);\n\t\t}\n\n\t\t// If no fields specified, search all available indexes\n\t\tif (!fields) {\n\t\t\tconst availableIndexes = this.indexManager.listIndexes();\n\t\t\tif (availableIndexes.length === 0) {\n\t\t\t\t// No indexes, full scan\n\t\t\t\treturn this._fullScanSearch(value, options);\n\t\t\t}\n\t\t\tfields = availableIndexes;\n\t\t}\n\n\t\tconst fieldArray = Array.isArray(fields) ? fields : [fields];\n\t\tconst matchingKeys = new Set();\n\n\t\t// Try to use indexes for each field\n\t\tfor (const field of fieldArray) {\n\t\t\tif (this.indexManager.hasIndex(field)) {\n\t\t\t\t// Use index-based search\n\t\t\t\tconst indexKeys = this._searchIndex(field, value);\n\t\t\t\tindexKeys.forEach(key => matchingKeys.add(key));\n\t\t\t} else {\n\t\t\t\t// Fallback to field-based search for non-indexed fields\n\t\t\t\tconst searchKeys = this._searchField(field, value);\n\t\t\t\tsearchKeys.forEach(key => matchingKeys.add(key));\n\t\t\t}\n\t\t}\n\n\t\t// Convert keys to RecordCollection\n\t\treturn this._keysToRecordCollection(matchingKeys);\n\t}\n\n\t/**\n\t * Filter records using a predicate function\n\t * @param {Function} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\tfilter (predicate, options = {}) {\n\t\treturn this._filterByFunction(predicate, options);\n\t}\n\n\t/**\n\t * Map over records and transform them\n\t * @param {Function} mapper - Mapping function\n\t * @param {Object} [options={}] - Map options\n\t * @returns {Array} Mapped results\n\t */\n\tmap (mapper, options = {}) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tconst results = [];\n\t\tlet count = 0;\n\n\t\tfor (const [, recordData] of this.storageManager.entries()) {\n\t\t\tif (count >= offset) {\n\t\t\t\t// For backwards compatibility, pass plain objects to mapper\n\t\t\t\tresults.push(mapper(recordData));\n\t\t\t\tif (limit && results.length >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Reduce records to a single value\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} initialValue - Initial value\n\t * @param {Object} [options={}] - Reduce options\n\t * @returns {*} Reduced value\n\t */\n\treduce (reducer, initialValue, options = {}) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tlet accumulator = initialValue;\n\t\tlet count = 0;\n\t\tlet processedCount = 0;\n\n\t\tfor (const [, recordData] of this.storageManager.entries()) {\n\t\t\tif (count >= offset) {\n\t\t\t\t// For backwards compatibility, pass plain objects to reducer\n\t\t\t\taccumulator = reducer(accumulator, recordData, processedCount);\n\t\t\t\tprocessedCount++;\n\t\t\t\tif (limit && processedCount >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Execute a function for each record\n\t * @param {Function} callback - Callback function\n\t * @param {Object} [options={}] - Options\n\t */\n\tforEach (callback, options = {}) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tlet count = 0;\n\t\tlet processedCount = 0;\n\n\t\tfor (const [, recordData] of this.storageManager.entries()) {\n\t\t\tif (count >= offset) {\n\t\t\t\t// For backwards compatibility, pass plain objects to callback\n\t\t\t\tcallback(recordData, processedCount);\n\t\t\t\tprocessedCount++;\n\t\t\t\tif (limit && processedCount >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t}\n\n\t/**\n\t * Search within a specific index\n\t * @param {string} indexName - Index name\n\t * @param {*} value - Search value\n\t * @returns {Set<string>} Set of matching record keys\n\t * @private\n\t */\n\t_searchIndex (indexName, value) {\n\t\tconst matchingKeys = new Set();\n\n\t\ttry {\n\t\t\t// For exact matches, use IndexManager's findByIndex method\n\t\t\tif (typeof value === \"string\" && !value.includes(\"*\") && !value.includes(\"?\")) {\n\t\t\t\tconst exactKeys = this.indexManager.findByIndex(indexName, value);\n\t\t\t\texactKeys.forEach(key => matchingKeys.add(key));\n\t\t\t} else {\n\t\t\t\t// For partial matches, search through all index keys\n\t\t\t\tconst indexStorage = this.indexManager._indexes.get(indexName);\n\t\t\t\tif (indexStorage) {\n\t\t\t\t\tfor (const [indexKey, recordKeys] of indexStorage._storage.entries()) {\n\t\t\t\t\t\tif (this._matchesSearchValue(indexKey, value)) {\n\t\t\t\t\t\t\trecordKeys.forEach(key => matchingKeys.add(key));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {\n\t\t\t// Fallback to empty set on error\n\t\t}\n\n\t\treturn matchingKeys;\n\t}\n\n\t/**\n\t * Search within a specific field (non-indexed)\n\t * @param {string} field - Field name\n\t * @param {*} value - Search value\n\t * @returns {Set<string>} Set of matching record keys\n\t * @private\n\t */\n\t_searchField (field, value) {\n\t\tconst matchingKeys = new Set();\n\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\tconst fieldValue = this._getFieldValue(recordData, field);\n\t\t\tif (this._matchesSearchValue(fieldValue, value)) {\n\t\t\t\tmatchingKeys.add(key);\n\t\t\t}\n\t\t}\n\n\t\treturn matchingKeys;\n\t}\n\n\t/**\n\t * Perform full scan search when no indexes available\n\t * @param {*} value - Search value\n\t * @param {Object} options - Search options\n\t * @returns {RecordCollection} Matching records\n\t * @private\n\t */\n\t_fullScanSearch (value, options) {\n\t\tconst records = [];\n\t\tconst { limit, offset = 0 } = options;\n\t\tlet count = 0;\n\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\tif (this._searchInRecord(recordData, value)) {\n\t\t\t\tif (count >= offset) {\n\t\t\t\t\trecords.push(RecordFactory.create(key, recordData));\n\t\t\t\t\tif (limit && records.length >= limit) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(records);\n\t}\n\n\t/**\n\t * Convert a set of keys to a RecordCollection\n\t * @param {Set<string>|Array<string>} keys - Record keys\n\t * @returns {RecordCollection} Collection of Record objects\n\t * @private\n\t */\n\t_keysToRecordCollection (keys) {\n\t\tconst results = [];\n\t\tfor (const key of keys) {\n\t\t\tconst recordData = this.storageManager.get(key);\n\t\t\tif (recordData) {\n\t\t\t\tresults.push(RecordFactory.create(key, recordData));\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(results);\n\t}\n\n\t/**\n\t * Get field value from record (supports nested fields)\n\t * @param {Object} record - Record object\n\t * @param {string} field - Field path (e.g., \"user.name\")\n\t * @returns {*} Field value\n\t * @private\n\t */\n\t_getFieldValue (record, field) {\n\t\tconst parts = field.split(\".\");\n\t\tlet value = record;\n\n\t\tfor (const part of parts) {\n\t\t\tif (value && typeof value === \"object\") {\n\t\t\t\tvalue = value[part];\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Check if a value matches the search criteria\n\t * @param {*} fieldValue - Field value to test\n\t * @param {*} searchValue - Search value\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesSearchValue (fieldValue, searchValue) {\n\t\tif (searchValue instanceof RegExp) {\n\t\t\treturn searchValue.test(String(fieldValue));\n\t\t}\n\n\t\tif (typeof searchValue === \"string\") {\n\t\t\treturn String(fieldValue).toLowerCase().includes(searchValue.toLowerCase());\n\t\t}\n\n\t\treturn fieldValue === searchValue;\n\t}\n\n\t/**\n\t * Search within a record for a value\n\t * @param {Object} record - Record to search\n\t * @param {*} value - Value to search for\n\t * @returns {boolean} True if found\n\t * @private\n\t */\n\t_searchInRecord (record, value) {\n\t\tconst searchString = String(value).toLowerCase();\n\n\t\tconst searchObject = obj => {\n\t\t\tfor (const val of Object.values(obj)) {\n\t\t\t\tif (val !== null && val !== undefined) {\n\t\t\t\t\tif (typeof val === \"object\") {\n\t\t\t\t\t\tif (Array.isArray(val)) {\n\t\t\t\t\t\t\tif (val.some(item => String(item).toLowerCase().includes(searchString))) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (searchObject(val)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (String(val).toLowerCase().includes(searchString)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\treturn searchObject(record);\n\t}\n}\n","import { QueryError, TransactionError } from \"./errors.js\";\n\n/**\n * Manages batch operations with transaction support\n */\nexport class BatchManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {CRUDManager} dependencies.crudManager - CRUD manager\n\t * @param {TransactionManager} [dependencies.transactionManager] - Transaction manager\n\t * @param {LifecycleManager} dependencies.lifecycleManager - Lifecycle manager\n\t */\n\tconstructor ({ crudManager, transactionManager = null, lifecycleManager }) {\n\t\tthis.crudManager = crudManager;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.lifecycleManager = lifecycleManager;\n\t}\n\n\t/**\n\t * Batch operations with transaction support\n\t * @param {Array} operations - Array of operations or records\n\t * @param {string} [type='set'] - Operation type\n\t * @param {Object} [options={}] - Batch options\n\t * @returns {Promise<Array>|Array} Array of results (Promise when using transactions)\n\t */\n\tbatch (operations, type = \"set\", options = {}) {\n\t\tconst {\n\t\t\ttransaction = null,\n\t\t\tatomic = false\n\t\t} = options;\n\n\t\ttry {\n\t\t\t// Use transaction for atomic operations\n\t\t\tif (atomic || transaction) {\n\t\t\t\treturn this._executeBatchInTransaction(operations, type, transaction);\n\t\t\t}\n\n\t\t\t// Execute operations individually\n\t\t\tconst results = [];\n\t\t\tfor (const operation of operations) {\n\t\t\t\ttry {\n\t\t\t\t\tlet result;\n\t\t\t\t\tif (type === \"set\") {\n\t\t\t\t\t\tresult = this.crudManager.set(null, operation, { batch: true });\n\t\t\t\t\t} else if (type === \"del\") {\n\t\t\t\t\t\tthis.crudManager.delete(operation, { batch: true });\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(result);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tresults.push(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trigger batch lifecycle hook\n\t\t\tthis.lifecycleManager.onbatch(results, type);\n\n\t\t\treturn results;\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Batch operation failed: ${error.message}`, operations, \"batch\");\n\t\t}\n\t}\n\n\t/**\n\t * Execute batch in transaction\n\t * @param {Array} operations - Operations to execute\n\t * @param {string} type - Operation type\n\t * @param {Transaction} [transaction] - Existing transaction\n\t * @returns {Promise<Array>} Operation results\n\t * @private\n\t */\n\tasync _executeBatchInTransaction (operations, type, transaction) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new TransactionError(\"Transaction manager not available for atomic batch operations\");\n\t\t}\n\n\t\tconst ownTransaction = !transaction;\n\t\tif (ownTransaction) {\n\t\t\ttransaction = this.transactionManager.begin();\n\t\t}\n\n\t\ttry {\n\t\t\tconst results = [];\n\t\t\tfor (const operation of operations) {\n\t\t\t\tif (type === \"set\") {\n\t\t\t\t\tconst result = this._executeSetInTransaction(null, operation, transaction);\n\t\t\t\t\tresults.push(result);\n\t\t\t\t} else if (type === \"del\") {\n\t\t\t\t\tthis._executeDeleteInTransaction(operation, transaction);\n\t\t\t\t\tresults.push(true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ownTransaction) {\n\t\t\t\tawait this.transactionManager.commit(transaction.id);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t} catch (error) {\n\t\t\tif (ownTransaction) {\n\t\t\t\tthis.transactionManager.abort(transaction.id, error.message);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Execute set operation in transaction\n\t * @param {string|null} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Transaction} transaction - Transaction instance\n\t * @returns {Record} Created record\n\t * @private\n\t */\n\t_executeSetInTransaction (key, data, transaction) {\n\t\t// Add operation to transaction log\n\t\tconst oldValue = key ? this.crudManager.storageManager.get(key) : null;\n\t\ttransaction.addOperation(\"set\", key, oldValue, data);\n\n\t\t// Execute operation\n\t\treturn this.crudManager.set(key, data, { batch: true });\n\t}\n\n\t/**\n\t * Execute delete operation in transaction\n\t * @param {string} key - Record key\n\t * @param {Transaction} transaction - Transaction instance\n\t * @private\n\t */\n\t_executeDeleteInTransaction (key, transaction) {\n\t\t// Add operation to transaction log\n\t\tconst oldValue = this.crudManager.storageManager.get(key);\n\t\ttransaction.addOperation(\"delete\", key, oldValue);\n\n\t\t// Execute operation\n\t\tthis.crudManager.delete(key, { batch: true });\n\t}\n}\n","import { DataStream } from \"./data-stream.js\";\n\n/**\n * Manages streaming operations for large datasets\n */\nexport class StreamManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t */\n\tconstructor ({ storageManager }) {\n\t\tthis.storageManager = storageManager;\n\t}\n\n\t/**\n\t * Create a data stream for large datasets\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Data stream instance\n\t */\n\tstream (options = {}) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\tconst iterator = {\n\t\t\tnext: () => {\n\t\t\t\tif (index < entries.length) {\n\t\t\t\t\treturn { value: entries[index++], done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a filtered stream\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Filtered stream\n\t */\n\tstreamWhere (predicate, options = {}) {\n\t\tconst iterator = this._createFilteredIterator(predicate);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a transformed stream\n\t * @param {Function} transform - Transform function\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Transformed stream\n\t */\n\tstreamMap (transform, options = {}) {\n\t\tconst iterator = this._createTransformIterator(transform);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a limited stream\n\t * @param {number} limit - Maximum number of records\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Limited stream\n\t */\n\tstreamTake (limit, options = {}) {\n\t\tconst iterator = this._createLimitedIterator(limit);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create iterator for filtered data\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @returns {Iterator} Filtered iterator\n\t * @private\n\t */\n\t_createFilteredIterator (predicate) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\twhile (index < entries.length) {\n\t\t\t\t\tconst [key, value] = entries[index++];\n\n\t\t\t\t\tif (typeof predicate === \"function\") {\n\t\t\t\t\t\tif (predicate({ key, ...value })) {\n\t\t\t\t\t\t\treturn { value: [key, value], done: false };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof predicate === \"object\") {\n\t\t\t\t\t\tif (this._matchesCriteria(value, predicate)) {\n\t\t\t\t\t\t\treturn { value: [key, value], done: false };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create iterator for transformed data\n\t * @param {Function} transform - Transform function\n\t * @returns {Iterator} Transform iterator\n\t * @private\n\t */\n\t_createTransformIterator (transform) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tif (index < entries.length) {\n\t\t\t\t\tconst [key, value] = entries[index++];\n\t\t\t\t\tconst transformed = transform({ key, ...value });\n\n\t\t\t\t\treturn { value: [key, transformed], done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create iterator for limited data\n\t * @param {number} limit - Record limit\n\t * @returns {Iterator} Limited iterator\n\t * @private\n\t */\n\t_createLimitedIterator (limit) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tif (index < limit && index < entries.length) {\n\t\t\t\t\tconst entry = entries[index++];\n\n\t\t\t\t\treturn { value: entry, done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Check if record matches criteria\n\t * @param {Object} record - Record to check\n\t * @param {Object} criteria - Criteria object\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesCriteria (record, criteria) {\n\t\tfor (const [field, value] of Object.entries(criteria)) {\n\t\t\tconst recordValue = record[field];\n\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\tif (!value.test(recordValue)) return false;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (Array.isArray(recordValue)) {\n\t\t\t\t\tif (!value.some(v => recordValue.includes(v))) return false;\n\t\t\t\t} else if (!value.includes(recordValue)) return false;\n\t\t\t} else if (recordValue !== value) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","/**\n * Manages statistics gathering and memory usage estimation\n */\nexport class StatisticsManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {VersionManager} [dependencies.versionManager] - Version manager\n\t * @param {TransactionManager} [dependencies.transactionManager] - Transaction manager\n\t * @param {QueryOptimizer} [dependencies.queryOptimizer] - Query optimizer\n\t * @param {Object} dependencies.config - Configuration\n\t */\n\tconstructor ({\n\t\tstorageManager,\n\t\tindexManager,\n\t\tversionManager = null,\n\t\ttransactionManager = null,\n\t\tqueryOptimizer = null,\n\t\tconfig\n\t}) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.versionManager = versionManager;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.queryOptimizer = queryOptimizer;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst stats = {\n\t\t\trecords: this.storageManager.size,\n\t\t\tconfiguration: this.config,\n\t\t\tindexes: this.indexManager.getStats(),\n\t\t\tmemory: this._estimateMemoryUsage()\n\t\t};\n\n\t\tif (this.versionManager) {\n\t\t\tstats.versions = this.versionManager.getStats();\n\t\t}\n\n\t\tif (this.transactionManager) {\n\t\t\tstats.transactions = this.transactionManager.getStats();\n\t\t}\n\n\t\tif (this.queryOptimizer) {\n\t\t\tstats.queries = this.queryOptimizer.getStats();\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\t/**\n\t * Get storage statistics\n\t * @returns {Object} Storage statistics\n\t */\n\tgetStorageStats () {\n\t\treturn {\n\t\t\tsize: this.storageManager.size,\n\t\t\tmemoryUsage: this.storageManager.estimateMemoryUsage(),\n\t\t\ttype: this.config.immutable ? \"immutable\" : \"mutable\"\n\t\t};\n\t}\n\n\t/**\n\t * Get index statistics\n\t * @returns {Object} Index statistics\n\t */\n\tgetIndexStats () {\n\t\treturn this.indexManager.getStats();\n\t}\n\n\t/**\n\t * Get version statistics\n\t * @returns {Object|null} Version statistics\n\t */\n\tgetVersionStats () {\n\t\treturn this.versionManager ? this.versionManager.getStats() : null;\n\t}\n\n\t/**\n\t * Get transaction statistics\n\t * @returns {Object|null} Transaction statistics\n\t */\n\tgetTransactionStats () {\n\t\treturn this.transactionManager ? this.transactionManager.getStats() : null;\n\t}\n\n\t/**\n\t * Get query optimization statistics\n\t * @returns {Object|null} Query statistics\n\t */\n\tgetQueryStats () {\n\t\treturn this.queryOptimizer ? this.queryOptimizer.getStats() : null;\n\t}\n\n\t/**\n\t * Get performance metrics\n\t * @returns {Object} Performance metrics\n\t */\n\tgetPerformanceMetrics () {\n\t\tconst stats = this.getStats();\n\n\t\treturn {\n\t\t\trecordsPerIndex: stats.records / Math.max(1, Object.keys(stats.indexes).length),\n\t\t\tmemoryPerRecord: stats.memory.total / Math.max(1, stats.records),\n\t\t\tindexEfficiency: this._calculateIndexEfficiency(stats),\n\t\t\toverheadRatio: stats.memory.overhead / Math.max(1, stats.memory.data)\n\t\t};\n\t}\n\n\t/**\n\t * Estimate memory usage\n\t * @returns {Object} Memory usage statistics\n\t * @private\n\t */\n\t_estimateMemoryUsage () {\n\t\tconst dataSize = this.storageManager.estimateMemoryUsage();\n\t\tconst indexSize = this.indexManager.getStats().totalMemoryUsage || 0;\n\t\tconst versionSize = this.versionManager ? this.versionManager.getStats().totalSize : 0;\n\n\t\treturn {\n\t\t\ttotal: dataSize + indexSize + versionSize,\n\t\t\tdata: dataSize,\n\t\t\tindexes: indexSize,\n\t\t\tversions: versionSize,\n\t\t\toverhead: indexSize + versionSize\n\t\t};\n\t}\n\n\t/**\n\t * Calculate index efficiency\n\t * @param {Object} stats - Statistics object\n\t * @returns {number} Efficiency percentage\n\t * @private\n\t */\n\t_calculateIndexEfficiency (stats) {\n\t\tif (!stats.indexes || !stats.queries) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst totalQueries = stats.queries.totalExecutions || 1;\n\t\tconst indexedQueries = stats.queries.indexedExecutions || 0;\n\n\t\treturn indexedQueries / totalQueries * 100;\n\t}\n\n\t/**\n\t * Generate performance report\n\t * @returns {Object} Performance report\n\t */\n\tgenerateReport () {\n\t\tconst stats = this.getStats();\n\t\tconst performance = this.getPerformanceMetrics();\n\n\t\treturn {\n\t\t\tsummary: {\n\t\t\t\ttotalRecords: stats.records,\n\t\t\t\ttotalMemory: stats.memory.total,\n\t\t\t\tactiveIndexes: Object.keys(stats.indexes).length,\n\t\t\t\tversioning: !!this.versionManager,\n\t\t\t\ttransactions: !!this.transactionManager,\n\t\t\t\toptimization: !!this.queryOptimizer\n\t\t\t},\n\t\t\tperformance,\n\t\t\tbreakdown: {\n\t\t\t\tstorage: this.getStorageStats(),\n\t\t\t\tindexes: this.getIndexStats(),\n\t\t\t\tversions: this.getVersionStats(),\n\t\t\t\ttransactions: this.getTransactionStats(),\n\t\t\t\tqueries: this.getQueryStats()\n\t\t\t},\n\t\t\trecommendations: this._generateRecommendations(stats, performance)\n\t\t};\n\t}\n\n\t/**\n\t * Generate performance recommendations\n\t * @param {Object} stats - Statistics object\n\t * @param {Object} performance - Performance metrics\n\t * @returns {Array} Array of recommendations\n\t * @private\n\t */\n\t_generateRecommendations (stats, performance) {\n\t\tconst recommendations = [];\n\n\t\tif (performance.indexEfficiency < 50) {\n\t\t\trecommendations.push(\"Consider adding more indexes for frequently queried fields\");\n\t\t}\n\n\t\tif (performance.overheadRatio > 2) {\n\t\t\trecommendations.push(\"High memory overhead detected - consider optimizing indexes or version retention\");\n\t\t}\n\n\t\tif (stats.records > 10000 && !this.queryOptimizer) {\n\t\t\trecommendations.push(\"Enable query optimization for better performance with large datasets\");\n\t\t}\n\n\t\tif (stats.memory.versions > stats.memory.data) {\n\t\t\trecommendations.push(\"Version storage is larger than data - consider adjusting retention policy\");\n\t\t}\n\n\t\treturn recommendations;\n\t}\n}\n","import { ValidationError } from \"./errors.js\";\n\n/**\n * Manages lifecycle hooks and events\n */\nexport class LifecycleManager {\n\t/**\n\t * @param {Object} [hooks={}] - Custom lifecycle hooks\n\t */\n\tconstructor (hooks = {}) {\n\t\t// Default no-op hooks\n\t\tthis.hooks = {\n\t\t\tbeforeSet: () => {},\n\t\t\tonset: () => {},\n\t\t\tbeforeDelete: () => {},\n\t\t\tondelete: () => {},\n\t\t\tbeforeClear: () => {},\n\t\t\tonclear: () => {},\n\t\t\tonbatch: () => {},\n\t\t\t...hooks\n\t\t};\n\t}\n\n\t/**\n\t * Register a lifecycle hook\n\t * @param {string} event - Event name\n\t * @param {Function} handler - Event handler\n\t */\n\tregisterHook (event, handler) {\n\t\tif (typeof handler !== \"function\") {\n\t\t\tthrow new ValidationError(`Hook handler for '${event}' must be a function`, \"handler\", handler);\n\t\t}\n\t\tthis.hooks[event] = handler;\n\t}\n\n\t/**\n\t * Unregister a lifecycle hook\n\t * @param {string} event - Event name\n\t */\n\tunregisterHook (event) {\n\t\tthis.hooks[event] = () => {};\n\t}\n\n\t/**\n\t * Execute a lifecycle hook\n\t * @param {string} event - Event name\n\t * @param {...*} args - Arguments to pass to hook\n\t * @returns {*} Hook result\n\t */\n\texecuteHook (event, ...args) {\n\t\tif (this.hooks[event]) {\n\t\t\treturn this.hooks[event](...args);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Before set hook\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} options - Operation options\n\t */\n\tbeforeSet (key, data, options) {\n\t\treturn this.executeHook(\"beforeSet\", key, data, options);\n\t}\n\n\t/**\n\t * On set hook\n\t * @param {Record} record - Created/updated record\n\t * @param {Object} options - Operation options\n\t */\n\tonset (record, options) {\n\t\treturn this.executeHook(\"onset\", record, options);\n\t}\n\n\t/**\n\t * Before delete hook\n\t * @param {string} key - Record key\n\t * @param {boolean} batch - Is batch operation\n\t */\n\tbeforeDelete (key, batch) {\n\t\treturn this.executeHook(\"beforeDelete\", key, batch);\n\t}\n\n\t/**\n\t * On delete hook\n\t * @param {string} key - Deleted record key\n\t */\n\tondelete (key) {\n\t\treturn this.executeHook(\"ondelete\", key);\n\t}\n\n\t/**\n\t * Before clear hook\n\t */\n\tbeforeClear () {\n\t\treturn this.executeHook(\"beforeClear\");\n\t}\n\n\t/**\n\t * On clear hook\n\t */\n\tonclear () {\n\t\treturn this.executeHook(\"onclear\");\n\t}\n\n\t/**\n\t * On batch hook\n\t * @param {Array} results - Batch operation results\n\t * @param {string} type - Operation type\n\t */\n\tonbatch (results, type) {\n\t\treturn this.executeHook(\"onbatch\", results, type);\n\t}\n\n\t/**\n\t * Get all registered hooks\n\t * @returns {Object} Hooks object\n\t */\n\tgetHooks () {\n\t\treturn { ...this.hooks };\n\t}\n\n\t/**\n\t * Check if hook is registered\n\t * @param {string} event - Event name\n\t * @returns {boolean} True if hook exists\n\t */\n\thasHook (event) {\n\t\treturn event in this.hooks && typeof this.hooks[event] === \"function\";\n\t}\n\n\t/**\n\t * Clear all hooks (reset to no-ops)\n\t */\n\tclearHooks () {\n\t\tfor (const event in this.hooks) {\n\t\t\tthis.hooks[event] = () => {};\n\t\t}\n\t}\n}\n","import { randomUUID as uuid } from \"crypto\";\nimport {\n\tConfigurationError,\n\tTransactionError,\n\tErrorRecovery\n} from \"./errors.js\";\nimport { DataTypes } from \"./data-types.js\";\nimport { FieldConstraint } from \"./field-constraint.js\";\nimport { Schema } from \"./schema.js\";\nimport { ConfigValidator } from \"./config-validator.js\";\nimport { Constraints } from \"./constraints.js\";\nimport { IsolationLevels } from \"./constants.js\";\nimport { Record, RecordCollection, RecordFactory } from \"./record.js\";\nimport { IndexManager, IndexTypes } from \"./index-manager.js\";\nimport { VersionManager, RetentionPolicies } from \"./version-manager.js\";\nimport { TransactionManager } from \"./transaction-manager.js\";\nimport { QueryOptimizer, QueryTypes } from \"./query-optimizer.js\";\nimport { ImmutableStore } from \"./immutable-store.js\";\nimport { DataStream } from \"./data-stream.js\";\nimport { StorageManager } from \"./storage-manager.js\";\nimport { CRUDManager } from \"./crud-manager.js\";\nimport { QueryManager } from \"./query-manager.js\";\nimport { BatchManager } from \"./batch-manager.js\";\nimport { StreamManager } from \"./stream-manager.js\";\nimport { StatisticsManager } from \"./statistics-manager.js\";\nimport { LifecycleManager } from \"./lifecycle-manager.js\";\n\n\n/**\n * Haro class with all design flaws addressed and enterprise features added\n */\nexport class Haro {\n\t/**\n\t * @param {Array|Object} [data] - Initial data or configuration\n\t * @param {Object} [config={}] - Configuration options\n\t */\n\tconstructor (data = null, config = {}) {\n\t\t// Set defaults first\n\t\tconst defaults = {\n\t\t\tdelimiter: \"|\",\n\t\t\tid: uuid(),\n\t\t\timmutable: false,\n\t\t\tindex: [],\n\t\t\tkey: \"id\",\n\t\t\tversioning: false,\n\t\t\tschema: null,\n\t\t\tretentionPolicy: { type: RetentionPolicies.NONE },\n\t\t\tenableTransactions: false,\n\t\t\tenableOptimization: true\n\t\t};\n\n\t\t// Handle parameter overloading and merge with defaults\n\t\tlet userConfig;\n\t\tif (Array.isArray(data) || data === null) {\n\t\t\tuserConfig = ConfigValidator.validate(config);\n\t\t\tthis.initialData = data;\n\t\t} else {\n\t\t\tuserConfig = ConfigValidator.validate(data);\n\t\t\tthis.initialData = null;\n\t\t}\n\n\t\t// Merge defaults with user configuration (user config takes precedence)\n\t\tthis.config = { ...defaults, ...userConfig };\n\n\t\t// Initialize core managers\n\t\tthis.storageManager = new StorageManager({ immutable: this.config.immutable });\n\t\tthis.indexManager = new IndexManager(this.config.delimiter);\n\t\tthis.versionManager = this.config.versioning ?\n\t\t\tnew VersionManager(this.config.retentionPolicy) :\n\t\t\tnull;\n\t\tthis.transactionManager = this.config.enableTransactions ?\n\t\t\tnew TransactionManager() :\n\t\t\tnull;\n\t\tthis.queryOptimizer = this.config.enableOptimization ?\n\t\t\tnew QueryOptimizer() :\n\t\t\tnull;\n\n\t\t// Initialize lifecycle manager\n\t\tthis.lifecycleManager = new LifecycleManager();\n\n\t\t// Initialize specialized managers\n\t\tthis.crudManager = new CRUDManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tversionManager: this.versionManager,\n\t\t\tconfig: this.config\n\t\t});\n\n\t\tthis.queryManager = new QueryManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tqueryOptimizer: this.queryOptimizer\n\t\t});\n\n\t\tthis.batchManager = new BatchManager({\n\t\t\tcrudManager: this.crudManager,\n\t\t\ttransactionManager: this.transactionManager,\n\t\t\tlifecycleManager: this.lifecycleManager\n\t\t});\n\n\t\tthis.streamManager = new StreamManager({\n\t\t\tstorageManager: this.storageManager\n\t\t});\n\n\t\tthis.statisticsManager = new StatisticsManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tversionManager: this.versionManager,\n\t\t\ttransactionManager: this.transactionManager,\n\t\t\tqueryOptimizer: this.queryOptimizer,\n\t\t\tconfig: this.config\n\t\t});\n\n\t\t// Create indexes\n\t\tfor (const indexField of this.config.index) {\n\t\t\tthis.indexManager.createIndex(indexField, indexField);\n\t\t}\n\n\t\t// Properties for backward compatibility\n\t\tObject.defineProperty(this, \"data\", {\n\t\t\tget: () => this.storageManager.getStore(),\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(this, \"size\", {\n\t\t\tget: () => this.storageManager.size,\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(this, \"registry\", {\n\t\t\tget: () => this.storageManager.keys(),\n\t\t\tenumerable: true\n\t\t});\n\n\t\t// Initialize with data if provided\n\t\tif (this.initialData && Array.isArray(this.initialData)) {\n\t\t\tthis.batch(this.initialData);\n\t\t}\n\t}\n\n\t/**\n\t * Set or update a record with comprehensive validation and error handling\n\t * @param {string|null} key - Record key or null for auto-generation\n\t * @param {Object} [data={}] - Record data\n\t * @param {Object} [options={}] - Operation options\n\t * @returns {Record} Created/updated record\n\t * @throws {ValidationError} If data validation fails\n\t */\n\tset (key, data = {}, options = {}) {\n\t\tconst {\n\t\t\tbatch = false,\n\t\t\ttransaction = null\n\t\t} = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"set\", key, data, options);\n\t\t}\n\n\t\t// Trigger lifecycle hook\n\t\tthis.lifecycleManager.beforeSet(key, data, options);\n\n\t\t// Delegate to CRUD manager\n\t\tconst record = this.crudManager.set(key, data, options);\n\n\t\t// Trigger lifecycle hook\n\t\tif (!batch) {\n\t\t\tthis.lifecycleManager.onset(record, options);\n\t\t}\n\n\t\treturn record;\n\t}\n\n\t/**\n\t * Get a record by key with consistent return format\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Get options\n\t * @returns {Record|null} Record instance or null if not found\n\t */\n\tget (key, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"get\", key, options);\n\t\t}\n\n\t\t// Delegate to CRUD manager\n\t\treturn this.crudManager.get(key, options);\n\t}\n\n\t/**\n\t * Delete a record with proper cleanup\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Delete options\n\t * @returns {boolean} True if deleted successfully\n\t * @throws {RecordNotFoundError} If record not found\n\t */\n\tdelete (key, options = {}) {\n\t\tconst {\n\t\t\tbatch = false,\n\t\t\ttransaction = null\n\t\t} = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"delete\", key, options);\n\t\t}\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.beforeDelete(key, batch);\n\n\t\t// Delegate to CRUD manager\n\t\tconst result = this.crudManager.delete(key, options);\n\n\t\t// Lifecycle hook\n\t\tif (!batch) {\n\t\t\tthis.lifecycleManager.ondelete(key);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if record exists\n\t */\n\thas (key) {\n\t\treturn this.crudManager.has(key);\n\t}\n\n\t/**\n\t * Get all record keys (backwards compatibility)\n\t * @returns {Array<string>} Array of record keys\n\t */\n\tkeys () {\n\t\treturn this.storageManager.keys();\n\t}\n\n\t/**\n\t * Get all record values (backwards compatibility)\n\t * @returns {IterableIterator<Object>} Iterable of record values\n\t */\n\tvalues () {\n\t\treturn this.storageManager.values();\n\t}\n\n\t/**\n\t * Get all record entries as [key, value] pairs (backwards compatibility)\n\t * @returns {IterableIterator<[string, Object]>} Iterable of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn this.storageManager.entries();\n\t}\n\n\t/**\n\t * Convert store to array (backwards compatibility)\n\t * @returns {Array<Object>} Array of all records\n\t */\n\ttoArray () {\n\t\treturn Array.from(this.values());\n\t}\n\n\t/**\n\t * Filter records using a predicate (backwards compatibility)\n\t * @param {Function} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\tfilter (predicate, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.filter(predicate, options);\n\t}\n\n\t/**\n\t * Search records (backwards compatibility)\n\t * @param {*} value - Search value\n\t * @param {string|Array<string>} [fields] - Fields to search\n\t * @param {Object} [options={}] - Search options\n\t * @returns {RecordCollection} Matching records\n\t */\n\tsearch (value, fields, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.search(value, fields, options);\n\t}\n\n\n\t/**\n\t * Map over records (backwards compatibility)\n\t * @param {Function} mapper - Mapping function\n\t * @param {Object} [options={}] - Map options\n\t * @returns {Array} Mapped results\n\t */\n\tmap (mapper, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.map(mapper, options);\n\t}\n\n\t/**\n\t * Reduce records (backwards compatibility)\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} [initialValue] - Initial value\n\t * @param {Object} [options={}] - Reduce options\n\t * @returns {*} Reduced result\n\t */\n\treduce (reducer, initialValue, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.reduce(reducer, initialValue, options);\n\t}\n\n\t/**\n\t * Iterate over records (backwards compatibility)\n\t * @param {Function} callback - Callback function\n\t * @param {Object} [options={}] - Options\n\t */\n\tforEach (callback, options = {}) {\n\t\t// Delegate to QueryManager\n\t\tthis.queryManager.forEach(callback, options);\n\t}\n\n\t/**\n\t * Sort records (backwards compatibility)\n\t * @param {Function} [compareFn] - Compare function\n\t * @returns {Array<Object>} Sorted records\n\t */\n\tsort (compareFn) {\n\t\treturn this.toArray().sort(compareFn);\n\t}\n\n\t/**\n\t * Sort records by field (backwards compatibility)\n\t * @param {string} field - Field to sort by\n\t * @param {boolean} [ascending=true] - Sort direction\n\t * @returns {Array<Object>} Sorted records\n\t */\n\tsortBy (field, ascending = true) {\n\t\treturn this.sort((a, b) => {\n\t\t\tconst aVal = a[field];\n\t\t\tconst bVal = b[field];\n\t\t\tif (aVal < bVal) return ascending ? -1 : 1;\n\t\t\tif (aVal > bVal) return ascending ? 1 : -1;\n\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\t/**\n\t * Find records using optimized queries\n\t * @param {Object} [criteria={}] - Search criteria\n\t * @param {Object} [options={}] - Query options\n\t * @returns {RecordCollection} Collection of matching records\n\t */\n\tfind (criteria = {}, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"find\", criteria, options);\n\t\t}\n\n\t\t// Delegate to query manager\n\t\treturn this.queryManager.find(criteria, options);\n\t}\n\n\t/**\n\t * Advanced filtering with predicate logic\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\twhere (predicate, options = {}) {\n\t\t// Delegate to query manager\n\t\treturn this.queryManager.where(predicate, options);\n\t}\n\n\t/**\n\t * Batch operations with transaction support\n\t * @param {Array} operations - Array of operations or records\n\t * @param {string} [type='set'] - Operation type\n\t * @param {Object} [options={}] - Batch options\n\t * @returns {Promise<Array>|Array} Array of results (Promise when using transactions)\n\t */\n\tbatch (operations, type = \"set\", options = {}) {\n\t\t// Delegate to batch manager\n\t\treturn this.batchManager.batch(operations, type, options);\n\t}\n\n\t/**\n\t * Begin a new transaction\n\t * @param {Object} [options={}] - Transaction options\n\t * @returns {Transaction} New transaction\n\t * @throws {ConfigurationError} If transactions not enabled\n\t */\n\tbeginTransaction (options = {}) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\treturn this.transactionManager.begin(options);\n\t}\n\n\t/**\n\t * Commit a transaction\n\t * @param {string|Transaction} transaction - Transaction ID or instance\n\t * @returns {Transaction} Committed transaction\n\t */\n\tasync commitTransaction (transaction) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\tconst transactionId = typeof transaction === \"string\" ? transaction : transaction.id;\n\n\t\treturn await this.transactionManager.commit(transactionId);\n\t}\n\n\t/**\n\t * Abort a transaction\n\t * @param {string|Transaction} transaction - Transaction ID or instance\n\t * @param {string} [reason] - Abort reason\n\t * @returns {Transaction} Aborted transaction\n\t */\n\tabortTransaction (transaction, reason) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\tconst transactionId = typeof transaction === \"string\" ? transaction : transaction.id;\n\n\t\treturn this.transactionManager.abort(transactionId, reason);\n\t}\n\n\t/**\n\t * Create a data stream for large datasets\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Data stream instance\n\t */\n\tstream (options = {}) {\n\t\t// Delegate to stream manager\n\t\treturn this.streamManager.stream(options);\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\t// Delegate to statistics manager\n\t\treturn this.statisticsManager.getStats();\n\t}\n\n\t/**\n\t * Clear all data and reset state\n\t * @param {Object} [options={}] - Clear options\n\t */\n\tclear (options = {}) {\n\t\tconst {\n\t\t\tpreserveIndexes = false,\n\t\t\tpreserveVersions = false\n\t\t} = options;\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.beforeClear();\n\n\t\t// Clear storage\n\t\tthis.storageManager.clear();\n\n\t\t// Clear indexes\n\t\tif (!preserveIndexes) {\n\t\t\tthis.indexManager.clear();\n\t\t}\n\n\t\t// Clear versions\n\t\tif (!preserveVersions && this.versionManager) {\n\t\t\tthis.versionManager.clear();\n\t\t}\n\n\t\t// Clear query cache\n\t\tif (this.queryOptimizer) {\n\t\t\tthis.queryOptimizer.clear();\n\t\t}\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.onclear();\n\t}\n\n\t// Lifecycle hooks (backward compatibility - delegate to lifecycle manager)\n\tbeforeSet (key, data, options) {\n\t\treturn this.lifecycleManager.beforeSet(key, data, options);\n\t}\n\tonset (record, options) {\n\t\treturn this.lifecycleManager.onset(record, options);\n\t}\n\tbeforeDelete (key, batch) {\n\t\treturn this.lifecycleManager.beforeDelete(key, batch);\n\t}\n\tondelete (key) {\n\t\treturn this.lifecycleManager.ondelete(key);\n\t}\n\tbeforeClear () {\n\t\treturn this.lifecycleManager.beforeClear();\n\t}\n\tonclear () {\n\t\treturn this.lifecycleManager.onclear();\n\t}\n\tonbatch (results, type) {\n\t\treturn this.lifecycleManager.onbatch(results, type);\n\t}\n\n\n\t/**\n\t * Execute operation in transaction\n\t * @param {Transaction} transaction - Transaction instance\n\t * @param {string} operation - Operation type\n\t * @param {...*} args - Operation arguments\n\t * @returns {*} Operation result\n\t * @private\n\t */\n\t_executeInTransaction (transaction, operation, ...args) {\n\t\t// Handle different operation parameter patterns\n\t\tswitch (operation) {\n\t\t\tcase \"set\": {\n\t\t\t\tconst [key, data, options = {}] = args;\n\t\t\t\tconst oldValue = this.storageManager.get(key);\n\n\t\t\t\ttransaction.addOperation(operation, key, oldValue, data);\n\n\t\t\t\treturn this.set(key, data, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"get\": {\n\t\t\t\tconst [key, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", key);\n\n\t\t\t\treturn this.get(key, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"delete\": {\n\t\t\t\tconst [key, options = {}] = args;\n\t\t\t\tconst oldValue = this.storageManager.get(key);\n\n\t\t\t\ttransaction.addOperation(operation, key, oldValue);\n\n\t\t\t\treturn this.delete(key, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"find\": {\n\t\t\t\tconst [criteria, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", \"find_operation\", null, criteria);\n\n\t\t\t\treturn this.find(criteria, { ...options, transaction: null });\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(`Unknown operation: ${operation}`, transaction.id, operation);\n\t\t}\n\t}\n\n\t/**\n\t * Get a limited subset of records with pagination support\n\t * @param {number} [offset=0] - Number of records to skip\n\t * @param {number} [max=0] - Maximum number of records to return (0 = all)\n\t * @returns {Array<Object>} Array of records within the specified range\n\t */\n\tlimit (offset = 0, max = 0) {\n\t\t// Get keys first (much more efficient than getting all values)\n\t\tconst keys = this.keys();\n\t\tconst start = Math.max(0, offset);\n\t\tconst end = max > 0 ? start + max : keys.length;\n\n\t\t// Get only the subset of keys we need\n\t\tconst limitedKeys = keys.slice(start, end);\n\n\t\t// Batch retrieve only the records we need\n\t\tconst results = [];\n\t\tfor (const key of limitedKeys) {\n\t\t\tresults.push(this.storageManager.get(key));\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Rebuild indexes for specified fields or all fields\n\t * @param {string|Array<string>} [fields] - Specific fields to reindex (optional)\n\t * @returns {Haro} Store instance for chaining\n\t */\n\treindex (fields) {\n\t\tif (fields) {\n\t\t\t// For specific fields, we need to rebuild all indexes\n\t\t\t// that contain those fields (IndexManager doesn't support partial rebuild)\n\t\t\tthis.indexManager.rebuild(this.entries());\n\t\t} else {\n\t\t\t// Rebuild all indexes\n\t\t\tthis.indexManager.rebuild(this.entries());\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Export store data or indexes for persistence\n\t * @param {string} [type='records'] - Type of data to export: 'records' or 'indexes'\n\t * @returns {Array} Array of [key, value] pairs or serialized index structure\n\t */\n\tdump (type = \"records\") {\n\t\tif (type === \"indexes\") {\n\t\t\t// Export index definitions and statistics\n\t\t\tconst indexData = {};\n\t\t\tconst indexNames = this.indexManager.listIndexes();\n\n\t\t\tfor (const name of indexNames) {\n\t\t\t\tconst definition = this.indexManager.getIndexDefinition(name);\n\t\t\t\tindexData[name] = {\n\t\t\t\t\tfields: definition.fields,\n\t\t\t\t\ttype: definition.type,\n\t\t\t\t\tdelimiter: definition.delimiter,\n\t\t\t\t\tunique: definition.unique\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn indexData;\n\t\t}\n\n\t\t// Default to records\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Import and restore data from a dump\n\t * @param {Array} data - Data to import (from dump)\n\t * @param {string} [type='records'] - Type of data: 'records' or 'indexes'\n\t * @returns {boolean} True if operation succeeded\n\t */\n\toverride (data, type = \"records\") {\n\t\ttry {\n\t\t\tif (type === \"indexes\") {\n\t\t\t\t// Recreate indexes from definitions\n\t\t\t\tthis.indexManager.clear();\n\n\t\t\t\tfor (const [name, definition] of Object.entries(data)) {\n\t\t\t\t\tthis.indexManager.createIndex(name, definition.fields, {\n\t\t\t\t\t\ttype: definition.type,\n\t\t\t\t\t\tdelimiter: definition.delimiter,\n\t\t\t\t\t\tunique: definition.unique\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Rebuild indexes with current data\n\t\t\t\tthis.reindex();\n\t\t\t} else {\n\t\t\t\t// Clear existing data\n\t\t\t\tthis.clear();\n\n\t\t\t\t// Import records\n\t\t\t\tfor (const [key, value] of data) {\n\t\t\t\t\tthis.set(key, value, true); // Use batch mode\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Generate a RFC4122 v4 UUID\n\t * @returns {string} UUID string\n\t */\n\tuuid () {\n\t\treturn uuid();\n\t}\n\n\t/**\n\t * Deep clone utility function\n\t * @param {*} obj - Object to clone\n\t * @returns {*} Cloned object\n\t */\n\tclone (obj) {\n\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\treturn obj;\n\t\t}\n\n\t\tif (obj instanceof Date) {\n\t\t\treturn new Date(obj.getTime());\n\t\t}\n\n\t\tif (obj instanceof RegExp) {\n\t\t\treturn new RegExp(obj);\n\t\t}\n\n\t\tif (Array.isArray(obj)) {\n\t\t\treturn obj.map(item => this.clone(item));\n\t\t}\n\n\t\tconst cloned = {};\n\t\tfor (const [key, value] of Object.entries(obj)) {\n\t\t\tcloned[key] = this.clone(value);\n\t\t}\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * Merge multiple objects into one\n\t * @param {Object} target - Target object\n\t * @param {...Object} sources - Source objects to merge\n\t * @param {boolean} [deep=true] - Whether to perform deep merge\n\t * @returns {Object} Merged object\n\t */\n\tmerge (target, ...sources) {\n\t\tif (!target || typeof target !== \"object\") {\n\t\t\treturn target;\n\t\t}\n\n\t\tconst result = this.clone(target);\n\n\t\tfor (const source of sources) {\n\t\t\tif (source && typeof source === \"object\") {\n\t\t\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\t\t\tif (typeof value === \"object\" && value !== null && !Array.isArray(value) &&\n\t\t\t\t\t\ttypeof result[key] === \"object\" && result[key] !== null && !Array.isArray(result[key])) {\n\t\t\t\t\t\tresult[key] = this.merge(result[key], value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult[key] = this.clone(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Freeze objects for immutability\n\t * @param {...Object} objects - Objects to freeze\n\t * @returns {Object|Array} Frozen object(s)\n\t */\n\tfreeze (...objects) {\n\t\tconst freeze = obj => {\n\t\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\t\treturn obj;\n\t\t\t}\n\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tobj.forEach(item => freeze(item));\n\t\t\t} else {\n\t\t\t\tObject.values(obj).forEach(value => freeze(value));\n\t\t\t}\n\n\t\t\treturn Object.freeze(obj);\n\t\t};\n\n\t\tif (objects.length === 1) {\n\t\t\treturn freeze(objects[0]);\n\t\t}\n\n\t\treturn objects.map(obj => freeze(obj));\n\t}\n\n}\n\n/**\n * Factory function for creating Haro instances\n * @param {Array|Object} [data] - Initial data or configuration\n * @param {Object} [config={}] - Configuration options\n * @returns {Haro} New Haro instance\n */\nexport function haro (data = null, config = {}) {\n\treturn new Haro(data, config);\n}\n\n// Export types and utilities\nexport {\n\tDataTypes,\n\tFieldConstraint,\n\tSchema,\n\tConstraints,\n\tRecord,\n\tRecordCollection,\n\tRecordFactory,\n\tIndexTypes,\n\tRetentionPolicies,\n\tIsolationLevels,\n\tQueryTypes,\n\tErrorRecovery,\n\tImmutableStore,\n\tDataStream\n};\n\n// Default export\nexport default Haro;\n\n"],"names":["randomUUID","HaroError","Error","constructor","message","code","context","super","this","name","timestamp","Date","toISOString","captureStackTrace","toJSON","stack","ValidationError","field","value","RecordNotFoundError","key","storeName","IndexError","indexName","operation","ConfigurationError","configKey","configValue","QueryError","query","TransactionError","transactionId","TypeConstraintError","expected","actual","ConcurrencyError","resource","ErrorRecovery","isRecoverable","error","includes","getRecoveryActions","createRecoveryStrategy","actions","retryable","backoffMs","DataTypes","STRING","NUMBER","BOOLEAN","OBJECT","ARRAY","DATE","UUID","EMAIL","URL","ANY","TypeDetector","getValueType","Array","isArray","basicType","isUUID","isEmail","isURL","isTypeMatch","actualType","expectedType","test","url","Boolean","FieldConstraint","type","required","default","defaultValue","validator","min","max","enum","enumValues","pattern","validate","fieldName","undefined","length","join","customResult","Schema","fields","strict","stripUnknown","record","validated","fieldNames","Object","keys","recordKeys","unknownFields","filter","addField","constraint","removeField","ConfigValidator","config","delimiter","id","immutable","index","indexField","versioning","schema","Constraints","requiredString","options","optionalString","requiredNumber","optionalNumber","uuid","email","values","date","TransactionStates","OperationTypes","IsolationLevels","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","LockTypes","Record","data","metadata","_key","_data","_metadata","createdAt","updatedAt","version","freeze","get","has","getFields","update","updates","metadataUpdates","newData","newMetadata","toObject","includeMetadata","result","JSON","stringify","equals","other","clone","structuredClone","getSize","matches","predicate","entries","every","recordValue","RegExp","some","v","toString","Symbol","iterator","RecordCollection","records","_records","at","first","last","map","mapper","find","sort","comparator","slice","start","end","reduce","reducer","initialValue","toArray","toObjects","toPairs","groupBy","keySelector","groups","Map","getKey","set","push","unique","seen","Set","add","forEach","callback","RecordFactory","create","fromObject","keyField","createCollection","items","item","emptyCollection","IndexTypes","SINGLE","COMPOSITE","PARTIAL","IndexDefinition","transform","_determineType","stats","totalKeys","totalEntries","memoryUsage","lastUpdated","suggestedType","generateKeys","_extractKeys","_generateCompositeKeys","String","newKeys","existingKey","val","newKey","updateStats","keyCount","entryCount","memoryDelta","IndexStorage","_storage","_refCounts","indexKey","recordKey","recordSet","remove","removed","delete","newCount","from","getStats","size","_estimateMemoryUsage","clear","IndexManager","_definitions","_indexes","_stats","totalOperations","totalTime","lastOptimized","createIndex","definition","dropIndex","hasIndex","getIndexDefinition","listIndexes","addRecord","recordData","startTime","now","storage","indexKeys","existingRecords","_updatePerformanceStats","removeRecord","updateRecord","oldData","findByIndex","findByCriteria","criteria","indexNames","getOptimalIndex","sortedFields","indexFields","candidates","coverage","a","b","rebuild","indexStats","totalMemory","indexes","totalIndexes","totalMemoryUsage","performance","averageOperationTime","operationTime","RetentionPolicies","COUNT","TIME","SIZE","NONE","VersionEntry","_calculateSize","isOlderThan","maxAge","getTime","getAge","VersionHistory","policy","versions","totalSize","lastAccessed","addVersion","_applyRetentionPolicy","getVersion","getLatest","getOldest","getVersionsInRange","getCount","getTotalSize","count","removeOlderThan","oldCount","cutoffTime","keep","_applyCountPolicy","_applyTimePolicy","_applySizePolicy","maxCount","splice","maxSize","shift","versionCount","averageSize","oldestVersion","newestVersion","VersionManager","globalPolicy","_validatePolicy","histories","totalHistories","totalVersions","lastCleanup","cleanupCount","enableVersioning","history","disableVersioning","oldSize","getHistory","versionIndex","getLatestVersion","isVersioningEnabled","cleanup","results","historiesProcessed","versionsRemoved","sizeFreed","keysToProcess","newSize","endTime","duration","setGlobalPolicy","historyStats","averageVersionsPerRecord","averageSizePerRecord","keysToExport","exportData","exportedAt","import","merge","historiesImported","versionsImported","errors","historyData","versionData","defineProperty","writable","_updateStats","historiesCleared","versionsCleared","validTypes","TransactionOperation","oldValue","newValue","createRollback","Transaction","state","isolationLevel","timeout","readOnly","operations","readSet","writeSet","snapshot","validationCallback","abortReason","seal","begin","addOperation","_checkActive","_isTimedOut","setValidation","commit","abort","reason","getRollbackOperations","reverse","op","isActive","isCommitted","isAborted","getDuration","operationCount","readSetSize","writeSetSize","snapshotSize","timedOut","LockManager","locks","lockTimeout","acquireLock","lockType","_tryAcquireLock","Promise","resolve","setTimeout","existingLock","holders","waiters","releaseLock","lock","releaseAllLocks","released","holdsLocks","totalLocks","sharedLocks","exclusiveLocks","lockHolders","recordsLocked","holder","uniqueHolders","TransactionStatistics","totalTransactions","committedTransactions","abortedTransactions","activeTransactions","averageDuration","totalDuration","incrementTotal","incrementCommitted","incrementAborted","incrementActive","decrementActive","updateDurationStats","transaction","lockStats","activeCount","transactionCounter","reset","getRawStats","KeyRelationshipAnalyzer","patternCache","semanticCache","areKeysRelated","key1","key2","_hasHierarchicalKeyRelationship","_hasSemanticKeyRelationship","_hasPatternBasedKeyRelationship","_hasCompositeKeyRelationship","_hasTemporalKeyRelationship","_hasIndexKeyRelationship","_hasCollectionKeyRelationship","_hasFunctionalDependency","isKeyInSnapshotRange","operationKey","snapshotKey","expectedValue","_hasExplicitRangeMetadata","_checkExplicitRange","_isPatternBasedSnapshot","_checkPatternBasedRange","_hasHierarchicalRelationship","_checkHierarchicalRange","_isIndexBasedSnapshot","_checkIndexBasedRange","_hasSemanticRelationship","_checkSemanticRange","_isTemporalSnapshot","_checkTemporalRange","_isCompositeKeySnapshot","_checkCompositeKeyRange","keyMatchesRange","range","prefix","startsWith","keyMatchesQuery","queryInfo","keyMatchesIndexRange","indexRange","separators","sep","parts1","split","parts2","_isParentChildRelationship","_isSiblingRelationship","_isAncestorDescendantRelationship","opParts","snapParts","_isCollectionMembership","i","shorter","longer","semantics1","_extractSemanticIdentifiers","semantics2","sem1","sem2","_areSemanticallySimilar","_hasEntityRelationship","semanticPrefixes","toLowerCase","opSemantics","snapSemantics","opSemantic","snapSemantic","cacheKey","identifiers","patterns","match","exec","id1","id2","singularPlural","singular","plural","entityRelations","entity1","entity2","hasEntity1InBoth","hasEntity2InBoth","_haveSimilarPatterns","endsWith","replace","beforeBrace","substring","indexOf","afterBrace","choices","choice","fullPattern","trim","baseKey","pattern1","_extractKeyPattern","pattern2","_patternsAreSimilar","_calculatePatternSimilarity","maxLen","Math","_levenshteinDistance","str1","str2","matrix","j","charAt","temporal1","_extractTemporalComponents","temporal2","_haveTemporalOverlap","keyword","opTemporal","snapTemporal","components","hasDate","hasTime","hasTimestamp","hasEpoch","_hasCompositeKeyOverlap","minLength","allMatch","isIndex1","_isIndexKey","isIndex2","base1","_extractBaseKeyFromIndex","base2","isCollection1","_isCollectionKey","isCollection2","_extractCollectionBase","indicator","collectionKey","indicators","dependencies","norm1","_normalizeKeyForDependency","norm2","dep1","dep2","rangeInfo","predicateInfo","clearCaches","DeadlockDetector","lockManager","keyAnalyzer","detectDeadlocks","opts","useLockGraph","useResourceGraph","useTimeoutDetection","timeoutThreshold","deadlocks","suspectedDeadlocks","timeoutVictims","waitForGraph","resourceGraph","lockDeadlocks","_detectLockBasedDeadlocks","cycles","graph","resourceDeadlocks","_detectResourceDeadlocks","isolationDeadlocks","_detectIsolationDeadlocks","_detectTimeoutVictims","_deduplicateDeadlocks","_buildLockWaitForGraph","_detectCyclesInGraph","cycle","transactions","resources","_getResourcesInvolvedInCycle","tx","lockInfo","waitingTransactions","_findTransactionsWaitingForLock","waitingTx","holderId","waiting","hasOperationOnKey","holdsLock","_buildResourceAllocationGraph","_detectCyclesInResourceGraph","txId","visited","recursionStack","dfs","node","path","cycleStart","neighbors","neighbor","wantedResources","holdingTx","graphCycles","t","tx1","tx2","_hasIsolationConflict","conflict","_getIsolationConflictType","tx1ReadsWhatTx2Writes","_readsOtherWrites","tx2ReadsWhatTx1Writes","reader","writer","readKey","victims","deadlock","signature","_createDeadlockSignature","sortedTransactions","sortedResources","IsolationValidator","validateIsolation","allTransactions","_validateReadCommitted","_validateRepeatableRead","_validateSerializable","writeKey","conflictingTransactions","_findConflictingWrites","_hasReadSetConflict","snapshotValue","_hasSnapshotConflict","conflictingWrites","_findConflictingWritesToRead","conflictingReads","_findConflictingReadsToWrite","excludeTransactionId","conflicting","otherTx","_transactionsOverlap","_hasPhantomConflict","_hasSerializationAnomalyInSnapshot","otherTransaction","_hasWriteSkewAnomaly","_hasDependencyCycle","tx1ReadsRelated","_hasRelatedReads","tx2ReadsRelated","tx1Writes","tx2Writes","k","tx1ReadsTx2Writes","tx2ReadsTx1Writes","tx1Start","tx1End","tx2Start","TransactionManager","statistics","deadlockDetector","isolationValidator","getTransaction","cleaned","getActiveTransactions","resetStats","getComponents","validateTransactionIsolation","checkForDeadlocks","getTransactionDetails","getSystemHealth","deadlockResults","commitRate","hasDeadlocks","lockUtilization","QueryTypes","FIND","FILTER","SEARCH","WHERE","SORT","LIMIT","AGGREGATE","CostFactors","INDEX_LOOKUP","FULL_SCAN","FILTER_EVALUATION","SORT_OPERATION","MEMORY_ACCESS","COMPARISON","REGEX_MATCH","QueryPlanStep","estimatedCost","estimatedRows","actualCost","actualRows","startExecution","endExecution","costAccuracy","abs","rowAccuracy","QueryPlan","queryId","originalQuery","steps","totalEstimatedCost","totalEstimatedRows","totalActualCost","totalActualRows","executedAt","completedAt","addStep","step","completeExecution","stepCount","efficiency","explanation","_generateExplanation","DataStatistics","totalRecords","indexStatistics","fieldStatistics","_updateFieldStatistics","_updateIndexStatistics","getSelectivity","fieldStats","uniqueValues","getIndexCardinality","cardinality","fieldData","nullCount","totalLength","dataType","_inferDataType","avgLength","indexStorage","selectivity","avgEntriesPerKey","sample","types","next","QueryOptimizer","collectStatistics","statisticsUpdateInterval","queryCounter","planCache","executionHistory","maxHistorySize","cacheHits","totalCacheRequests","costAdjustments","lastCostModelUpdate","createPlan","plan","_generateCacheKey","cachedPlan","_isCacheValid","_copyPlan","_buildOptimizedPlan","updateStatistics","recordExecution","_updateCostModel","getOptimalStrategy","costedStrategies","_generateStrategies","strategy","_estimateStrategyCost","_getAdjustedCostFactor","planCacheSize","executionHistorySize","dataStatistics","indexCount","fieldCount","averageQueryCost","_calculateAverageQueryCost","cacheHitRate","_calculateCacheHitRate","cacheStatistics","totalRequests","hits","misses","hitRate","costModel","adjustments","fromEntries","_addIndexLookupSteps","_addFilteredScanSteps","_addFullScanSteps","_addPostProcessingSteps","lookupKey","_estimateIndexLookupRows","filterStep","where","scanType","sortBy","sortStep","sortField","sortFunction","limit","limitStep","offset","strategies","indexManager","optimalIndex","_generateLookupKey","availableIndexes","partialFilter","Number","MAX_SAFE_INTEGER","factorName","originalPlan","newQueryId","newPlan","newStep","operationStats","_analyzeOperationPerformance","sampleSize","currentAdjustment","newAdjustment","consistency","avgActualCost","avgEstimatedCost","floor","execution","_mapOperationToCostFactor","costs","estimatedCosts","variance","_calculateVariance","stdDev","sqrt","accuracyScores","estimated","accuracy","sum","score","index_lookup","full_scan","regex","mean","pow","diff","ImmutableStore","_frozenViews","WeakMap","frozen","_deepFreeze","obj","DataStream","batchSize","bufferSize","buffer","ended","position","read","batch","done","readAll","take","StorageManager","_store","getStore","estimateMemoryUsage","dataSize","CRUDManager","storageManager","versionManager","override","existingRecord","finalData","_mergeRecords","includeVersions","existing","merged","QueryManager","queryOptimizer","_matchesCriteria","paginatedRecords","_filterByFunction","_filterByObject","search","_fullScanSearch","fieldArray","matchingKeys","_searchIndex","_searchField","_keysToRecordCollection","accumulator","processedCount","_matchesSearchValue","fieldValue","_getFieldValue","_searchInRecord","parts","part","searchValue","searchString","searchObject","BatchManager","crudManager","transactionManager","lifecycleManager","atomic","_executeBatchInTransaction","onbatch","ownTransaction","_executeSetInTransaction","_executeDeleteInTransaction","StreamManager","stream","streamWhere","_createFilteredIterator","streamMap","_createTransformIterator","streamTake","_createLimitedIterator","StatisticsManager","configuration","memory","queries","getStorageStats","getIndexStats","getVersionStats","getTransactionStats","getQueryStats","getPerformanceMetrics","recordsPerIndex","memoryPerRecord","total","indexEfficiency","_calculateIndexEfficiency","overheadRatio","overhead","indexSize","versionSize","indexedExecutions","totalExecutions","generateReport","summary","activeIndexes","optimization","breakdown","recommendations","_generateRecommendations","LifecycleManager","hooks","beforeSet","onset","beforeDelete","ondelete","beforeClear","onclear","registerHook","event","handler","unregisterHook","executeHook","args","getHooks","hasHook","clearHooks","Haro","defaults","retentionPolicy","enableTransactions","enableOptimization","userConfig","initialData","queryManager","batchManager","streamManager","statisticsManager","enumerable","_executeInTransaction","compareFn","ascending","aVal","bVal","beginTransaction","commitTransaction","abortTransaction","preserveIndexes","preserveVersions","limitedKeys","reindex","dump","indexData","cloned","target","sources","source","objects","haro"],"mappings":"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"}