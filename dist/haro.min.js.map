{"version":3,"file":"haro.min.js","sources":["../src/errors.js","../src/data-types.js","../src/field-constraint.js","../src/schema.js","../src/config-validator.js","../src/constraints.js","../src/constants.js","../src/record.js","../src/index-manager.js","../src/version-manager.js","../src/transaction-operation.js","../src/transaction-individual.js","../src/lock-manager.js","../src/transaction-statistics.js","../src/key-relationship-analyzer.js","../src/deadlock-detector.js","../src/isolation-validator.js","../src/transaction-manager.js","../src/query-optimizer.js","../src/immutable-store.js","../src/data-stream.js","../src/storage-manager.js","../src/crud-manager.js","../src/query-manager.js","../src/batch-manager.js","../src/stream-manager.js","../src/statistics-manager.js","../src/lifecycle-manager.js","../src/haro.js"],"sourcesContent":["/**\n * Base error class for all Haro errors\n */\nexport class HaroError extends Error {\n\t/**\n\t * @param {string} message - Error message\n\t * @param {string} [code] - Error code for programmatic handling\n\t * @param {*} [context] - Additional context about the error\n\t */\n\tconstructor (message, code, context) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tthis.code = code;\n\t\tthis.context = context;\n\t\tthis.timestamp = new Date().toISOString();\n\n\t\t// Ensure proper stack trace\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n\n\t/**\n\t * Convert error to JSON for serialization\n\t * @returns {Object} Serializable error object\n\t */\n\ttoJSON () {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tmessage: this.message,\n\t\t\tcode: this.code,\n\t\t\tcontext: this.context,\n\t\t\ttimestamp: this.timestamp,\n\t\t\tstack: this.stack\n\t\t};\n\t}\n}\n\n/**\n * Validation errors for invalid data or configuration\n */\nexport class ValidationError extends HaroError {\n\tconstructor (message, field, value) {\n\t\tsuper(message, \"VALIDATION_ERROR\", { field, value });\n\t}\n}\n\n/**\n * Record not found errors\n */\nexport class RecordNotFoundError extends HaroError {\n\tconstructor (key, storeName) {\n\t\tsuper(`Record with key '${key}' not found${storeName ? ` in store '${storeName}'` : \"\"}`, \"RECORD_NOT_FOUND\", { key, storeName });\n\t}\n}\n\n/**\n * Index-related errors\n */\nexport class IndexError extends HaroError {\n\tconstructor (message, indexName, operation) {\n\t\tsuper(message, \"INDEX_ERROR\", { indexName, operation });\n\t}\n}\n\n/**\n * Configuration errors\n */\nexport class ConfigurationError extends HaroError {\n\tconstructor (message, configKey, configValue) {\n\t\tsuper(message, \"CONFIGURATION_ERROR\", { configKey, configValue });\n\t}\n}\n\n/**\n * Query errors for invalid queries or operations\n */\nexport class QueryError extends HaroError {\n\tconstructor (message, query, operation) {\n\t\tsuper(message, \"QUERY_ERROR\", { query, operation });\n\t}\n}\n\n/**\n * Transaction errors\n */\nexport class TransactionError extends HaroError {\n\tconstructor (message, transactionId, operation) {\n\t\tsuper(message, \"TRANSACTION_ERROR\", { transactionId, operation });\n\t}\n}\n\n/**\n * Version management errors\n */\nexport class VersionError extends HaroError {\n\tconstructor (message, key, version) {\n\t\tsuper(message, \"VERSION_ERROR\", { key, version });\n\t}\n}\n\n/**\n * Type constraint errors\n */\nexport class TypeConstraintError extends HaroError {\n\tconstructor (message, expected, actual, field) {\n\t\tsuper(message, \"TYPE_CONSTRAINT_ERROR\", { expected, actual, field });\n\t}\n}\n\n/**\n * Concurrency errors for multi-threaded access\n */\nexport class ConcurrencyError extends HaroError {\n\tconstructor (message, resource, operation) {\n\t\tsuper(message, \"CONCURRENCY_ERROR\", { resource, operation });\n\t}\n}\n\n/**\n * Error recovery utilities\n */\nexport class ErrorRecovery {\n\t/**\n\t * Determine if an error is recoverable\n\t * @param {Error} error - Error to analyze\n\t * @returns {boolean} True if error is recoverable\n\t */\n\tstatic isRecoverable (error) {\n\t\tif (!(error instanceof HaroError)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst recoverableCodes = [\n\t\t\t\"RECORD_NOT_FOUND\",\n\t\t\t\"VALIDATION_ERROR\",\n\t\t\t\"QUERY_ERROR\",\n\t\t\t\"TYPE_CONSTRAINT_ERROR\"\n\t\t];\n\n\t\treturn recoverableCodes.includes(error.code);\n\t}\n\n\t/**\n\t * Get suggested recovery actions for an error\n\t * @param {HaroError} error - Error to get recovery actions for\n\t * @returns {string[]} Array of suggested recovery actions\n\t */\n\tstatic getRecoveryActions (error) {\n\t\tif (!(error instanceof HaroError)) {\n\t\t\treturn [\"Check error details and retry\"];\n\t\t}\n\n\t\tswitch (error.code) {\n\t\t\tcase \"RECORD_NOT_FOUND\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify the record key is correct\",\n\t\t\t\t\t\"Check if record was deleted\",\n\t\t\t\t\t\"Use has() method to check existence before get()\"\n\t\t\t\t];\n\n\t\t\tcase \"VALIDATION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Check data types match expected schema\",\n\t\t\t\t\t\"Verify required fields are present\",\n\t\t\t\t\t\"Validate field constraints\"\n\t\t\t\t];\n\n\t\t\tcase \"INDEX_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify index exists before querying\",\n\t\t\t\t\t\"Check index configuration\",\n\t\t\t\t\t\"Try reindexing the affected field\"\n\t\t\t\t];\n\n\t\t\tcase \"CONFIGURATION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Review configuration parameters\",\n\t\t\t\t\t\"Check for typos in configuration keys\",\n\t\t\t\t\t\"Refer to documentation for valid options\"\n\t\t\t\t];\n\n\t\t\tcase \"QUERY_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify query syntax is correct\",\n\t\t\t\t\t\"Check if indexed fields are being used\",\n\t\t\t\t\t\"Simplify complex queries\"\n\t\t\t\t];\n\n\t\t\tcase \"TRANSACTION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Retry the transaction\",\n\t\t\t\t\t\"Check for concurrent modifications\",\n\t\t\t\t\t\"Reduce transaction scope\"\n\t\t\t\t];\n\n\t\t\tcase \"TYPE_CONSTRAINT_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Check data types match schema\",\n\t\t\t\t\t\"Convert data to expected type\",\n\t\t\t\t\t\"Update type constraints if needed\"\n\t\t\t\t];\n\n\t\t\tdefault:\n\t\t\t\treturn [\"Check error details and retry\"];\n\t\t}\n\t}\n\n\t/**\n\t * Create a recovery strategy for an error\n\t * @param {HaroError} error - Error to create strategy for\n\t * @returns {Object} Recovery strategy object\n\t */\n\tstatic createRecoveryStrategy (error) {\n\t\treturn {\n\t\t\terror,\n\t\t\tisRecoverable: this.isRecoverable(error),\n\t\t\tactions: this.getRecoveryActions(error),\n\t\t\tretryable: [\"CONCURRENCY_ERROR\", \"TRANSACTION_ERROR\"].includes(error.code),\n\t\t\tbackoffMs: error.code === \"CONCURRENCY_ERROR\" ? 100 : 0\n\t\t};\n\t}\n}\n","/**\n * Data type definitions and type detection utilities\n */\n\n/**\n * Type definitions for validation\n */\nexport const DataTypes = {\n\tSTRING: \"string\",\n\tNUMBER: \"number\",\n\tBOOLEAN: \"boolean\",\n\tOBJECT: \"object\",\n\tARRAY: \"array\",\n\tDATE: \"date\",\n\tUUID: \"uuid\",\n\tEMAIL: \"email\",\n\tURL: \"url\",\n\tANY: \"any\"\n};\n\n/**\n * Type detection utilities\n */\nexport class TypeDetector {\n\t/**\n\t * Get the type of a value\n\t * @param {*} value - Value to check\n\t * @returns {string} Type string\n\t */\n\tstatic getValueType (value) {\n\t\tif (value === null) return \"null\";\n\t\tif (Array.isArray(value)) return DataTypes.ARRAY;\n\t\tif (value instanceof Date) return DataTypes.DATE;\n\n\t\tconst basicType = typeof value;\n\n\t\t// Special type detection\n\t\tif (basicType === \"string\") {\n\t\t\tif (TypeDetector.isUUID(value)) return DataTypes.UUID;\n\t\t\tif (TypeDetector.isEmail(value)) return DataTypes.EMAIL;\n\t\t\tif (TypeDetector.isURL(value)) return DataTypes.URL;\n\t\t}\n\n\t\treturn basicType;\n\t}\n\n\t/**\n\t * Check if actual type matches expected type\n\t * @param {string} actualType - Actual type\n\t * @param {string} expectedType - Expected type\n\t * @returns {boolean} True if types match\n\t */\n\tstatic isTypeMatch (actualType, expectedType) {\n\t\tif (actualType === expectedType) return true;\n\n\t\t// Special cases\n\t\tif (expectedType === DataTypes.STRING) {\n\t\t\treturn [\"string\", DataTypes.UUID, DataTypes.EMAIL, DataTypes.URL].includes(actualType);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if string is a RFC 4122 compliant UUID (versions 1-5)\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if valid RFC 4122 UUID format (versions 1, 2, 3, 4, or 5)\n\t */\n\tstatic isUUID (value) {\n\t\tconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n\t\treturn uuidRegex.test(value);\n\t}\n\n\t/**\n\t * Check if string is an email\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if email format\n\t */\n\tstatic isEmail (value) {\n\t\t// WHATWG HTML5 compliant email validation pattern\n\t\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n\t\treturn emailRegex.test(value);\n\t}\n\n\t/**\n\t * Check if string is a URL\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if URL format\n\t */\n\tstatic isURL (value) {\n\t\ttry {\n\t\t\tconst url = new URL(value);\n\n\t\t\treturn Boolean(url);\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n","import { ValidationError, TypeConstraintError } from \"./errors.js\";\nimport { DataTypes, TypeDetector } from \"./data-types.js\";\n\n/**\n * Field constraint definitions for individual field validation\n */\nexport class FieldConstraint {\n\t/**\n\t * @param {Object} options - Constraint options\n\t * @param {string} options.type - Data type requirement\n\t * @param {boolean} [options.required=false] - Whether field is required\n\t * @param {*} [options.default] - Default value if not provided\n\t * @param {Function} [options.validator] - Custom validation function\n\t * @param {*} [options.min] - Minimum value (for numbers/strings/arrays)\n\t * @param {*} [options.max] - Maximum value (for numbers/strings/arrays)\n\t * @param {Array} [options.enum] - Allowed values\n\t * @param {RegExp} [options.pattern] - Pattern for string validation\n\t */\n\tconstructor ({\n\t\ttype = DataTypes.ANY,\n\t\trequired = false,\n\t\tdefault: defaultValue,\n\t\tvalidator,\n\t\tmin,\n\t\tmax,\n\t\tenum: enumValues,\n\t\tpattern\n\t} = {}) {\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.default = defaultValue;\n\t\tthis.validator = validator;\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t\tthis.enum = enumValues;\n\t\tthis.pattern = pattern;\n\t}\n\n\t/**\n\t * Validate a value against this constraint\n\t * @param {*} value - Value to validate\n\t * @param {string} fieldName - Name of the field being validated\n\t * @returns {*} Validated/normalized value\n\t * @throws {ValidationError} If validation fails\n\t */\n\tvalidate (value, fieldName = \"field\") {\n\t\t// Handle undefined values\n\t\tif (value === undefined || value === null) {\n\t\t\tif (this.required) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' is required`, fieldName, value);\n\t\t\t}\n\n\t\t\treturn this.default !== undefined ? this.default : value;\n\t\t}\n\n\t\t// Type validation\n\t\tconst actualType = TypeDetector.getValueType(value);\n\t\tif (this.type !== DataTypes.ANY && !TypeDetector.isTypeMatch(actualType, this.type)) {\n\t\t\tthrow new TypeConstraintError(\n\t\t\t\t`Field '${fieldName}' expected type '${this.type}' but got '${actualType}'`,\n\t\t\t\tthis.type,\n\t\t\t\tactualType,\n\t\t\t\tfieldName\n\t\t\t);\n\t\t}\n\n\t\t// Range validation\n\t\tif (this.min !== undefined && value < this.min) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value ${value} is below minimum ${this.min}`, fieldName, value);\n\t\t}\n\t\tif (this.max !== undefined && value > this.max) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value ${value} exceeds maximum ${this.max}`, fieldName, value);\n\t\t}\n\n\t\t// Length validation for strings and arrays\n\t\tif ((typeof value === \"string\" || Array.isArray(value)) && value.length !== undefined) {\n\t\t\tif (this.min !== undefined && value.length < this.min) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' length ${value.length} is below minimum ${this.min}`, fieldName, value);\n\t\t\t}\n\t\t\tif (this.max !== undefined && value.length > this.max) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' length ${value.length} exceeds maximum ${this.max}`, fieldName, value);\n\t\t\t}\n\t\t}\n\n\t\t// Enum validation\n\t\tif (this.enum && !this.enum.includes(value)) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value '${value}' is not in allowed values: ${this.enum.join(\", \")}`, fieldName, value);\n\t\t}\n\n\t\t// Pattern validation\n\t\tif (this.pattern && typeof value === \"string\" && !this.pattern.test(value)) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value '${value}' does not match required pattern`, fieldName, value);\n\t\t}\n\n\t\t// Custom validation\n\t\tif (this.validator && typeof this.validator === \"function\") {\n\t\t\tconst customResult = this.validator(value, fieldName);\n\t\t\tif (customResult !== true && customResult !== undefined) {\n\t\t\t\tconst message = typeof customResult === \"string\" ? customResult : `Custom validation failed for field '${fieldName}'`;\n\t\t\t\tthrow new ValidationError(message, fieldName, value);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import { ValidationError } from \"./errors.js\";\n\n/**\n * Schema definition for record validation\n */\nexport class Schema {\n\t/**\n\t * @param {Object<string, FieldConstraint>} fields - Field constraints\n\t * @param {Object} [options={}] - Schema options\n\t * @param {boolean} [options.strict=false] - Whether to allow additional fields\n\t * @param {boolean} [options.stripUnknown=false] - Whether to remove unknown fields\n\t */\n\tconstructor (fields = {}, { strict = false, stripUnknown = false } = {}) {\n\t\tthis.fields = fields;\n\t\tthis.strict = strict;\n\t\tthis.stripUnknown = stripUnknown;\n\t}\n\n\t/**\n\t * Validate a record against this schema\n\t * @param {Object} record - Record to validate\n\t * @returns {Object} Validated/normalized record\n\t * @throws {ValidationError} If validation fails\n\t */\n\tvalidate (record) {\n\t\tif (!record || typeof record !== \"object\" || Array.isArray(record)) {\n\t\t\tthrow new ValidationError(\"Record must be an object\", \"record\", record);\n\t\t}\n\n\t\tconst validated = {};\n\t\tconst fieldNames = Object.keys(this.fields);\n\t\tconst recordKeys = Object.keys(record);\n\n\t\t// Validate known fields\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tconst constraint = this.fields[fieldName];\n\t\t\tconst value = record[fieldName];\n\t\t\tvalidated[fieldName] = constraint.validate(value, fieldName);\n\t\t}\n\n\t\t// Handle unknown fields\n\t\tconst unknownFields = recordKeys.filter(key => !fieldNames.includes(key));\n\t\tif (unknownFields.length > 0) {\n\t\t\tif (this.strict) {\n\t\t\t\tthrow new ValidationError(`Unknown fields not allowed: ${unknownFields.join(\", \")}`, \"record\", record);\n\t\t\t} else if (!this.stripUnknown) {\n\t\t\t\t// Copy unknown fields as-is\n\t\t\t\tfor (const fieldName of unknownFields) {\n\t\t\t\t\tvalidated[fieldName] = record[fieldName];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn validated;\n\t}\n\n\t/**\n\t * Add a field constraint to the schema\n\t * @param {string} fieldName - Name of the field\n\t * @param {FieldConstraint} constraint - Field constraint\n\t * @returns {Schema} This schema for chaining\n\t */\n\taddField (fieldName, constraint) {\n\t\tthis.fields[fieldName] = constraint;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a field constraint from the schema\n\t * @param {string} fieldName - Name of the field\n\t * @returns {Schema} This schema for chaining\n\t */\n\tremoveField (fieldName) {\n\t\tdelete this.fields[fieldName];\n\n\t\treturn this;\n\t}\n}\n","import { ConfigurationError } from \"./errors.js\";\nimport { Schema } from \"./schema.js\";\n\n/**\n * Configuration validator for Haro options\n */\nexport class ConfigValidator {\n\t/**\n\t * Validate Haro configuration\n\t * @param {Object} config - Configuration to validate\n\t * @returns {Object} Validated configuration\n\t * @throws {ConfigurationError} If configuration is invalid\n\t */\n\tstatic validate (config = {}) {\n\t\tconst validated = { ...config };\n\n\t\t// Validate delimiter\n\t\tif (validated.delimiter !== undefined) {\n\t\t\tif (typeof validated.delimiter !== \"string\" || validated.delimiter.length === 0) {\n\t\t\t\tthrow new ConfigurationError(\"Delimiter must be a non-empty string\", \"delimiter\", validated.delimiter);\n\t\t\t}\n\t\t}\n\n\t\t// Validate id\n\t\tif (validated.id !== undefined && typeof validated.id !== \"string\") {\n\t\t\tthrow new ConfigurationError(\"ID must be a string\", \"id\", validated.id);\n\t\t}\n\n\t\t// Validate immutable\n\t\tif (validated.immutable !== undefined && typeof validated.immutable !== \"boolean\") {\n\t\t\tthrow new ConfigurationError(\"Immutable must be a boolean\", \"immutable\", validated.immutable);\n\t\t}\n\n\t\t// Validate index\n\t\tif (validated.index !== undefined) {\n\t\t\tif (!Array.isArray(validated.index)) {\n\t\t\t\tthrow new ConfigurationError(\"Index must be an array\", \"index\", validated.index);\n\t\t\t}\n\t\t\tfor (const indexField of validated.index) {\n\t\t\t\tif (typeof indexField !== \"string\") {\n\t\t\t\t\tthrow new ConfigurationError(\"Index field names must be strings\", \"index\", indexField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate key\n\t\tif (validated.key !== undefined && typeof validated.key !== \"string\") {\n\t\t\tthrow new ConfigurationError(\"Key field must be a string\", \"key\", validated.key);\n\t\t}\n\n\t\t// Validate versioning\n\t\tif (validated.versioning !== undefined && typeof validated.versioning !== \"boolean\") {\n\t\t\tthrow new ConfigurationError(\"Versioning must be a boolean\", \"versioning\", validated.versioning);\n\t\t}\n\n\t\t// Validate schema\n\t\tif (validated.schema !== undefined && !(validated.schema instanceof Schema)) {\n\t\t\tthrow new ConfigurationError(\"Schema must be an instance of Schema class\", \"schema\", validated.schema);\n\t\t}\n\n\t\treturn validated;\n\t}\n}\n","import { FieldConstraint } from \"./field-constraint.js\";\nimport { DataTypes } from \"./data-types.js\";\n\n/**\n * Utility functions for creating common field constraints\n */\nexport const Constraints = {\n\t/**\n\t * Create a required string field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} String constraint\n\t */\n\trequiredString (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.STRING, required: true, ...options });\n\t},\n\n\t/**\n\t * Create an optional string field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} String constraint\n\t */\n\toptionalString (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.STRING, required: false, ...options });\n\t},\n\n\t/**\n\t * Create a required number field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} Number constraint\n\t */\n\trequiredNumber (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.NUMBER, required: true, ...options });\n\t},\n\n\t/**\n\t * Create an optional number field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} Number constraint\n\t */\n\toptionalNumber (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.NUMBER, required: false, ...options });\n\t},\n\n\t/**\n\t * Create a UUID field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} UUID constraint\n\t */\n\tuuid (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.UUID, required });\n\t},\n\n\t/**\n\t * Create an email field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Email constraint\n\t */\n\temail (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.EMAIL, required });\n\t},\n\n\t/**\n\t * Create an enum field\n\t * @param {Array} values - Allowed values\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Enum constraint\n\t */\n\tenum (values, required = true) {\n\t\treturn new FieldConstraint({ enum: values, required });\n\t},\n\n\t/**\n\t * Create a date field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Date constraint\n\t */\n\tdate (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.DATE, required });\n\t}\n};\n","// Common values\nexport const INT_0 = 0;\nexport const STRING_EMPTY = \"\";\nexport const STRING_PIPE = \"|\";\nexport const STRING_COMMA = \",\";\nexport const STRING_ID = \"id\";\n\n// Data types\nexport const STRING_STRING = \"string\";\nexport const STRING_NUMBER = \"number\";\nexport const STRING_BOOLEAN = \"boolean\";\nexport const STRING_OBJECT = \"object\";\nexport const STRING_FUNCTION = \"function\";\n\n// Operations\nexport const STRING_SET = \"set\";\nexport const STRING_DEL = \"del\";\nexport const STRING_BATCH = \"batch\";\nexport const STRING_GET = \"get\";\nexport const STRING_FIND = \"find\";\nexport const STRING_DELETE = \"delete\";\n\n// Data structures\nexport const STRING_RECORDS = \"records\";\nexport const STRING_INDEXES = \"indexes\";\nexport const STRING_VERSIONS = \"versions\";\nexport const STRING_REGISTRY = \"registry\";\nexport const STRING_SIZE = \"size\";\n\n// Logical operators\nexport const STRING_DOUBLE_PIPE = \"||\";\nexport const STRING_DOUBLE_AND = \"&&\";\n\n// Error messages\nexport const STRING_RECORD_NOT_FOUND = \"Record not found\";\nexport const STRING_INVALID_FUNCTION = \"Invalid function\";\nexport const STRING_INVALID_FIELD = \"Invalid field\";\nexport const STRING_INVALID_TYPE = \"Invalid type\";\nexport const STRING_INVALID_INDEX = \"Invalid index\";\nexport const STRING_INVALID_OPERATION = \"Invalid operation\";\n\n// Configuration keys\nexport const CONFIG_DELIMITER = \"delimiter\";\nexport const CONFIG_ID = \"id\";\nexport const CONFIG_IMMUTABLE = \"immutable\";\nexport const CONFIG_INDEX = \"index\";\nexport const CONFIG_KEY = \"key\";\nexport const CONFIG_VERSIONING = \"versioning\";\nexport const CONFIG_SCHEMA = \"schema\";\nexport const CONFIG_RETENTION_POLICY = \"retentionPolicy\";\nexport const CONFIG_ENABLE_TRANSACTIONS = \"enableTransactions\";\nexport const CONFIG_ENABLE_OPTIMIZATION = \"enableOptimization\";\n\n// Default values\nexport const DEFAULT_DELIMITER = STRING_PIPE;\nexport const DEFAULT_KEY = STRING_ID;\nexport const DEFAULT_IMMUTABLE = false;\nexport const DEFAULT_VERSIONING = false;\nexport const DEFAULT_INDEX = [];\nexport const DEFAULT_ENABLE_TRANSACTIONS = false;\nexport const DEFAULT_ENABLE_OPTIMIZATION = true;\n\n// Performance thresholds\nexport const PERFORMANCE_INDEX_THRESHOLD = 1000;\nexport const PERFORMANCE_CACHE_SIZE = 100;\nexport const PERFORMANCE_BATCH_SIZE = 1000;\nexport const PERFORMANCE_STREAM_BUFFER_SIZE = 10000;\n\n// Memory limits\nexport const MEMORY_VERSION_LIMIT = 10 * 1024 * 1024; // 10MB\nexport const MEMORY_CACHE_LIMIT = 50 * 1024 * 1024; // 50MB\nexport const MEMORY_INDEX_LIMIT = 100 * 1024 * 1024; // 100MB\n\n// Time constants\nexport const TIME_TRANSACTION_TIMEOUT = 60 * 1000; // 60 seconds\nexport const TIME_LOCK_TIMEOUT = 30 * 1000; // 30 seconds\nexport const TIME_VERSION_MAX_AGE = 30 * 24 * 60 * 60 * 1000; // 30 days\nexport const TIME_CACHE_MAX_AGE = 5 * 60 * 1000; // 5 minutes\n\n// Query optimization constants\nexport const QUERY_FULL_SCAN_THRESHOLD = 10000;\nexport const QUERY_INDEX_SELECTIVITY_THRESHOLD = 0.1;\nexport const QUERY_PLAN_CACHE_SIZE = 1000;\n\n// Validation patterns\nexport const PATTERN_UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nexport const PATTERN_EMAIL = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nexport const PATTERN_URL = /^https?:\\/\\/.+/;\n\n// Error codes\nexport const ERROR_VALIDATION = \"VALIDATION_ERROR\";\nexport const ERROR_RECORD_NOT_FOUND = \"RECORD_NOT_FOUND\";\nexport const ERROR_INDEX = \"INDEX_ERROR\";\nexport const ERROR_CONFIGURATION = \"CONFIGURATION_ERROR\";\nexport const ERROR_QUERY = \"QUERY_ERROR\";\nexport const ERROR_TRANSACTION = \"TRANSACTION_ERROR\";\nexport const ERROR_VERSION = \"VERSION_ERROR\";\nexport const ERROR_TYPE_CONSTRAINT = \"TYPE_CONSTRAINT_ERROR\";\nexport const ERROR_CONCURRENCY = \"CONCURRENCY_ERROR\";\n\n// Index types\nexport const INDEX_TYPE_SINGLE = \"single\";\nexport const INDEX_TYPE_COMPOSITE = \"composite\";\nexport const INDEX_TYPE_ARRAY = \"array\";\nexport const INDEX_TYPE_PARTIAL = \"partial\";\n\n// Transaction states\nexport const TRANSACTION_STATE_PENDING = \"pending\";\nexport const TRANSACTION_STATE_ACTIVE = \"active\";\nexport const TRANSACTION_STATE_COMMITTED = \"committed\";\nexport const TRANSACTION_STATE_ABORTED = \"aborted\";\n\n// Lock types\nexport const LOCK_TYPE_SHARED = \"shared\";\nexport const LOCK_TYPE_EXCLUSIVE = \"exclusive\";\n\n// Isolation levels\nexport const ISOLATION_READ_UNCOMMITTED = 0;\nexport const ISOLATION_READ_COMMITTED = 1;\nexport const ISOLATION_REPEATABLE_READ = 2;\nexport const ISOLATION_SERIALIZABLE = 3;\n\n// Operation types for transaction log\nexport const OPERATION_TYPE_SET = \"set\";\nexport const OPERATION_TYPE_DELETE = \"delete\";\nexport const OPERATION_TYPE_BATCH = \"batch\";\n\n// Query types\nexport const QUERY_TYPE_FIND = \"find\";\nexport const QUERY_TYPE_FILTER = \"filter\";\nexport const QUERY_TYPE_SEARCH = \"search\";\nexport const QUERY_TYPE_WHERE = \"where\";\nexport const QUERY_TYPE_SORT = \"sort\";\nexport const QUERY_TYPE_LIMIT = \"limit\";\nexport const QUERY_TYPE_AGGREGATE = \"aggregate\";\n\n// Retention policy types\nexport const RETENTION_POLICY_COUNT = \"count\";\nexport const RETENTION_POLICY_TIME = \"time\";\nexport const RETENTION_POLICY_SIZE = \"size\";\nexport const RETENTION_POLICY_NONE = \"none\";\n\n// Data types for validation\nexport const DATA_TYPE_STRING = \"string\";\nexport const DATA_TYPE_NUMBER = \"number\";\nexport const DATA_TYPE_BOOLEAN = \"boolean\";\nexport const DATA_TYPE_OBJECT = \"object\";\nexport const DATA_TYPE_ARRAY = \"array\";\nexport const DATA_TYPE_DATE = \"date\";\nexport const DATA_TYPE_UUID = \"uuid\";\nexport const DATA_TYPE_EMAIL = \"email\";\nexport const DATA_TYPE_URL = \"url\";\nexport const DATA_TYPE_ANY = \"any\";\n\n// Cost factors for query optimization\nexport const COST_INDEX_LOOKUP = 1;\nexport const COST_FULL_SCAN = 100;\nexport const COST_FILTER_EVALUATION = 10;\nexport const COST_SORT_OPERATION = 50;\nexport const COST_MEMORY_ACCESS = 1;\nexport const COST_COMPARISON = 2;\nexport const COST_REGEX_MATCH = 20;\n\n// Object wrappers for backward compatibility\nexport const TransactionStates = {\n\tPENDING: TRANSACTION_STATE_PENDING,\n\tACTIVE: TRANSACTION_STATE_ACTIVE,\n\tCOMMITTED: TRANSACTION_STATE_COMMITTED,\n\tABORTED: TRANSACTION_STATE_ABORTED\n};\n\nexport const OperationTypes = {\n\tSET: OPERATION_TYPE_SET,\n\tDELETE: OPERATION_TYPE_DELETE,\n\tBATCH: OPERATION_TYPE_BATCH\n};\n\nexport const IsolationLevels = {\n\tREAD_UNCOMMITTED: ISOLATION_READ_UNCOMMITTED,\n\tREAD_COMMITTED: ISOLATION_READ_COMMITTED,\n\tREPEATABLE_READ: ISOLATION_REPEATABLE_READ,\n\tSERIALIZABLE: ISOLATION_SERIALIZABLE\n};\n\nexport const LockTypes = {\n\tSHARED: LOCK_TYPE_SHARED,\n\tEXCLUSIVE: LOCK_TYPE_EXCLUSIVE\n};\n","/**\n * Standardized record wrapper that provides consistent interface\n */\nexport class Record {\n\t/**\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} [metadata={}] - Additional metadata\n\t */\n\tconstructor (key, data, metadata = {}) {\n\t\tthis._key = key;\n\t\tthis._data = data;\n\n\t\t// Optimized: only create full metadata if additional metadata is provided\n\t\tif (Object.keys(metadata).length > 0) {\n\t\t\tthis._metadata = {\n\t\t\t\tcreatedAt: new Date().toISOString(),\n\t\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\t\tversion: 1,\n\t\t\t\t...metadata\n\t\t\t};\n\t\t} else {\n\t\t\t// Minimal metadata for performance\n\t\t\tthis._metadata = {\n\t\t\t\tversion: 1\n\t\t\t};\n\t\t}\n\n\t\t// Optimized: only freeze if not in performance-critical path\n\t\t// Note: We'll add a flag later if needed, but for now keep freezing for safety\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get the record key\n\t * @returns {string} Record key\n\t */\n\tget key () {\n\t\treturn this._key;\n\t}\n\n\t/**\n\t * Get the record data\n\t * @returns {Object} Record data (frozen copy)\n\t */\n\tget data () {\n\t\treturn Object.freeze({ ...this._data });\n\t}\n\n\t/**\n\t * Get record metadata\n\t * @returns {Object} Metadata object\n\t */\n\tget metadata () {\n\t\treturn Object.freeze({ ...this._metadata });\n\t}\n\n\t/**\n\t * Get a specific field value\n\t * @param {string} fieldName - Name of the field\n\t * @returns {*} Field value\n\t */\n\tget (fieldName) {\n\t\treturn this._data[fieldName];\n\t}\n\n\t/**\n\t * Check if record has a specific field\n\t * @param {string} fieldName - Name of the field\n\t * @returns {boolean} True if field exists\n\t */\n\thas (fieldName) {\n\t\treturn fieldName in this._data;\n\t}\n\n\t/**\n\t * Get all field names\n\t * @returns {string[]} Array of field names\n\t */\n\tgetFields () {\n\t\treturn Object.keys(this._data);\n\t}\n\n\t/**\n\t * Create a new record with updated data (immutable update)\n\t * @param {Object} updates - Data updates to apply\n\t * @param {Object} [metadataUpdates={}] - Metadata updates\n\t * @returns {Record} New record instance with updates\n\t */\n\tupdate (updates, metadataUpdates = {}) {\n\t\tconst newData = { ...this._data, ...updates };\n\t\tconst newMetadata = {\n\t\t\t...this._metadata,\n\t\t\t...metadataUpdates,\n\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\tversion: this._metadata.version + 1\n\t\t};\n\n\t\treturn new Record(this._key, newData, newMetadata);\n\t}\n\n\t/**\n\t * Convert record to plain object\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {Object} Plain object representation\n\t */\n\ttoObject (includeMetadata = false) {\n\t\tconst result = { ...this._data };\n\n\t\tif (includeMetadata) {\n\t\t\tresult._metadata = this._metadata;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convert record to JSON string\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {string} JSON string representation\n\t */\n\ttoJSON (includeMetadata = false) {\n\t\treturn JSON.stringify(this.toObject(includeMetadata));\n\t}\n\n\t/**\n\t * Compare this record with another record\n\t * @param {Record} other - Other record to compare\n\t * @returns {boolean} True if records are equal\n\t */\n\tequals (other) {\n\t\tif (!(other instanceof Record)) return false;\n\t\tif (this._key !== other._key) return false;\n\n\t\treturn JSON.stringify(this._data) === JSON.stringify(other._data);\n\t}\n\n\t/**\n\t * Create a deep clone of this record\n\t * @returns {Record} Cloned record\n\t */\n\tclone () {\n\t\treturn new Record(this._key, structuredClone(this._data), structuredClone(this._metadata));\n\t}\n\n\t/**\n\t * Get the size of the record data (for memory analysis)\n\t * @returns {number} Estimated size in bytes\n\t */\n\tgetSize () {\n\t\treturn JSON.stringify(this._data).length * 2; // Rough estimate (UTF-16)\n\t}\n\n\t/**\n\t * Check if record matches a predicate\n\t * @param {Function|Object} predicate - Function or object to match against\n\t * @returns {boolean} True if record matches\n\t */\n\tmatches (predicate) {\n\t\tif (typeof predicate === \"function\") {\n\t\t\treturn predicate(this._data, this._key, this);\n\t\t}\n\n\t\tif (typeof predicate === \"object\" && predicate !== null) {\n\t\t\treturn Object.entries(predicate).every(([field, value]) => {\n\t\t\t\tconst recordValue = this._data[field];\n\n\t\t\t\tif (value instanceof RegExp) {\n\t\t\t\t\treturn value.test(recordValue);\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\treturn Array.isArray(recordValue) ?\n\t\t\t\t\t\tvalue.some(v => recordValue.includes(v)) :\n\t\t\t\t\t\tvalue.includes(recordValue);\n\t\t\t\t}\n\n\t\t\t\treturn recordValue === value;\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get a string representation of the record\n\t * @returns {string} String representation\n\t */\n\ttoString () {\n\t\treturn `Record(${this._key}: ${JSON.stringify(this._data)})`;\n\t}\n\n\t/**\n\t * Symbol for iteration (makes record iterable)\n\t * @returns {Iterator} Iterator over [fieldName, value] pairs\n\t */\n\t* [Symbol.iterator] () {\n\t\tfor (const [field, value] of Object.entries(this._data)) {\n\t\t\tyield [field, value];\n\t\t}\n\t}\n}\n\n/**\n * Collection of records with utilities for batch operations\n */\nexport class RecordCollection {\n\t/**\n\t * @param {Record[]} [records=[]] - Initial records\n\t */\n\tconstructor (records = []) {\n\t\t// Optimized: avoid unnecessary array copying for performance\n\t\t// Collections are expected to be short-lived in most cases\n\t\tthis._records = records;\n\n\t\t// Only freeze in development for debugging, skip in production for performance\n\t\tif (process.env.NODE_ENV !== \"production\") {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * Get the number of records\n\t * @returns {number} Number of records\n\t */\n\tget length () {\n\t\treturn this._records.length;\n\t}\n\n\t/**\n\t * Get record at specific index\n\t * @param {number} index - Index to retrieve\n\t * @returns {Record|undefined} Record at index\n\t */\n\tat (index) {\n\t\treturn this._records[index];\n\t}\n\n\t/**\n\t * Get first record\n\t * @returns {Record|undefined} First record\n\t */\n\tfirst () {\n\t\treturn this._records[0];\n\t}\n\n\t/**\n\t * Get last record\n\t * @returns {Record|undefined} Last record\n\t */\n\tlast () {\n\t\treturn this._records[this._records.length - 1];\n\t}\n\n\t/**\n\t * Filter records by predicate\n\t * @param {Function} predicate - Filter function\n\t * @returns {RecordCollection} New collection with filtered records\n\t */\n\tfilter (predicate) {\n\t\treturn new RecordCollection(this._records.filter(predicate));\n\t}\n\n\t/**\n\t * Map records to new values\n\t * @param {Function} mapper - Mapping function\n\t * @returns {Array} Array of mapped values\n\t */\n\tmap (mapper) {\n\t\treturn this._records.map(mapper);\n\t}\n\n\t/**\n\t * Find first record matching predicate\n\t * @param {Function} predicate - Search predicate\n\t * @returns {Record|undefined} First matching record\n\t */\n\tfind (predicate) {\n\t\treturn this._records.find(predicate);\n\t}\n\n\t/**\n\t * Check if any record matches predicate\n\t * @param {Function} predicate - Test predicate\n\t * @returns {boolean} True if any record matches\n\t */\n\tsome (predicate) {\n\t\treturn this._records.some(predicate);\n\t}\n\n\t/**\n\t * Check if all records match predicate\n\t * @param {Function} predicate - Test predicate\n\t * @returns {boolean} True if all records match\n\t */\n\tevery (predicate) {\n\t\treturn this._records.every(predicate);\n\t}\n\n\t/**\n\t * Sort records by comparator\n\t * @param {Function} comparator - Sort function\n\t * @returns {RecordCollection} New sorted collection\n\t */\n\tsort (comparator) {\n\t\treturn new RecordCollection([...this._records].sort(comparator));\n\t}\n\n\t/**\n\t * Get a slice of records\n\t * @param {number} [start=0] - Start index\n\t * @param {number} [end] - End index\n\t * @returns {RecordCollection} New collection with sliced records\n\t */\n\tslice (start = 0, end) {\n\t\treturn new RecordCollection(this._records.slice(start, end));\n\t}\n\n\t/**\n\t * Reduce records to a single value\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} [initialValue] - Initial value\n\t * @returns {*} Reduced value\n\t */\n\treduce (reducer, initialValue) {\n\t\treturn this._records.reduce(reducer, initialValue);\n\t}\n\n\t/**\n\t * Convert to array of records\n\t * @returns {Record[]} Array of records\n\t */\n\ttoArray () {\n\t\treturn [...this._records];\n\t}\n\n\t/**\n\t * Convert to array of plain objects\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {Object[]} Array of plain objects\n\t */\n\ttoObjects (includeMetadata = false) {\n\t\treturn this._records.map(record => record.toObject(includeMetadata));\n\t}\n\n\t/**\n\t * Get records as key-value pairs\n\t * @returns {Array<[string, Object]>} Array of [key, data] pairs\n\t */\n\ttoPairs () {\n\t\treturn this._records.map(record => [record.key, record.data]);\n\t}\n\n\t/**\n\t * Group records by field value\n\t * @param {string|Function} keySelector - Field name or function to get grouping key\n\t * @returns {Map<string, RecordCollection>} Map of grouped records\n\t */\n\tgroupBy (keySelector) {\n\t\tconst groups = new Map();\n\t\tconst getKey = typeof keySelector === \"function\" ?\n\t\t\tkeySelector :\n\t\t\trecord => record.get(keySelector);\n\n\t\tfor (const record of this._records) {\n\t\t\tconst key = getKey(record);\n\t\t\tif (!groups.has(key)) {\n\t\t\t\tgroups.set(key, []);\n\t\t\t}\n\t\t\tgroups.get(key).push(record);\n\t\t}\n\n\t\t// Convert arrays to RecordCollections\n\t\tfor (const [key, records] of groups) {\n\t\t\tgroups.set(key, new RecordCollection(records));\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Get unique records (by key)\n\t * @returns {RecordCollection} Collection with unique records\n\t */\n\tunique () {\n\t\tconst seen = new Set();\n\t\tconst unique = [];\n\n\t\tfor (const record of this._records) {\n\t\t\tif (!seen.has(record.key)) {\n\t\t\t\tseen.add(record.key);\n\t\t\t\tunique.push(record);\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(unique);\n\t}\n\n\t/**\n\t * Iterate over records\n\t * @param {Function} callback - Callback function\n\t * @returns {void}\n\t */\n\tforEach (callback) {\n\t\tthis._records.forEach(callback);\n\t}\n\n\t/**\n\t * Symbol for iteration (makes collection iterable)\n\t * @returns {Iterator} Iterator over records\n\t */\n\t* [Symbol.iterator] () {\n\t\tfor (const record of this._records) {\n\t\t\tyield record;\n\t\t}\n\t}\n\n\t/**\n\t * Get string representation\n\t * @returns {string} String representation\n\t */\n\ttoString () {\n\t\treturn `RecordCollection(${this._records.length} records)`;\n\t}\n}\n\n/**\n * Factory functions for creating records and collections\n */\nexport const RecordFactory = {\n\t/**\n\t * Create a record from raw data\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {Record} New record instance\n\t */\n\tcreate (key, data, metadata = {}) {\n\t\treturn new Record(key, data, metadata);\n\t},\n\n\n\t/**\n\t * Create a record from a plain object (key extracted from data)\n\t * @param {Object} data - Data object containing key field\n\t * @param {string} [keyField='id'] - Name of the key field\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {Record} New record instance\n\t */\n\tfromObject (data, keyField = \"id\", metadata = {}) {\n\t\tconst key = data[keyField];\n\t\tif (!key) {\n\t\t\tthrow new Error(`Key field '${keyField}' not found in data`);\n\t\t}\n\n\t\treturn new Record(key, data, metadata);\n\t},\n\n\t/**\n\t * Create a collection from an array of records or data objects\n\t * @param {Array<Record|Object>} items - Items to create collection from\n\t * @param {string} [keyField='id'] - Key field name for objects\n\t * @returns {RecordCollection} New record collection\n\t */\n\tcreateCollection (items, keyField = \"id\") {\n\t\tconst records = items.map(item => {\n\t\t\tif (item instanceof Record) {\n\t\t\t\treturn item;\n\t\t\t}\n\n\t\t\treturn this.fromObject(item, keyField);\n\t\t});\n\n\t\treturn new RecordCollection(records);\n\t},\n\n\t/**\n\t * Create an empty collection\n\t * @returns {RecordCollection} Empty record collection\n\t */\n\temptyCollection () {\n\t\treturn new RecordCollection();\n\t}\n};\n","import { IndexError } from \"./errors.js\";\n\n/**\n * Types of indexes supported\n */\nexport const IndexTypes = {\n\tSINGLE: \"single\",\n\tCOMPOSITE: \"composite\",\n\tARRAY: \"array\",\n\tPARTIAL: \"partial\"\n};\n\n/**\n * Index definition with metadata\n */\nexport class IndexDefinition {\n\t/**\n\t * @param {string} name - Index name\n\t * @param {string[]} fields - Field names to index\n\t * @param {Object} [options={}] - Index options\n\t * @param {string} [options.type=IndexTypes.SINGLE] - Index type\n\t * @param {boolean} [options.unique=false] - Whether values should be unique\n\t * @param {Function} [options.filter] - Filter function for partial indexes\n\t * @param {Function} [options.transform] - Transform function for index values\n\t * @param {string} [options.delimiter='|'] - Delimiter for composite indexes\n\t */\n\tconstructor (name, fields, {\n\t\ttype = IndexTypes.SINGLE,\n\t\tunique = false,\n\t\tfilter,\n\t\ttransform,\n\t\tdelimiter = \"|\"\n\t} = {}) {\n\t\tthis.name = name;\n\t\tthis.fields = Array.isArray(fields) ? fields : [fields];\n\t\tthis.type = this._determineType(this.fields, type);\n\t\tthis.unique = unique;\n\t\tthis.filter = filter;\n\t\tthis.transform = transform;\n\t\tthis.delimiter = delimiter;\n\t\tthis.createdAt = new Date();\n\t\tthis.stats = {\n\t\t\ttotalKeys: 0,\n\t\t\ttotalEntries: 0,\n\t\t\tmemoryUsage: 0,\n\t\t\tlastUpdated: new Date()\n\t\t};\n\t}\n\n\t/**\n\t * Determine index type based on fields\n\t * @param {string[]} fields - Field names\n\t * @param {string} suggestedType - Suggested type\n\t * @returns {string} Determined index type\n\t * @private\n\t */\n\t_determineType (fields, suggestedType) {\n\t\tif (suggestedType === IndexTypes.PARTIAL) {\n\t\t\treturn IndexTypes.PARTIAL;\n\t\t}\n\n\t\tif (fields.length > 1) {\n\t\t\treturn IndexTypes.COMPOSITE;\n\t\t}\n\n\t\treturn IndexTypes.SINGLE;\n\t}\n\n\t/**\n\t * Generate index keys for a record\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of index keys\n\t */\n\tgenerateKeys (record) {\n\t\t// Apply filter for partial indexes\n\t\tif (this.filter && !this.filter(record)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst keys = this._extractKeys(record);\n\n\t\t// Apply transform if specified\n\t\tif (this.transform) {\n\t\t\treturn keys.map(key => this.transform(key, record));\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Get field value from record (supports nested fields)\n\t * @param {Object} record - Record object\n\t * @param {string} field - Field path (e.g., \"profile.professional.department\")\n\t * @returns {*} Field value\n\t * @private\n\t */\n\t_getFieldValue (record, field) {\n\t\tconst parts = field.split(\".\");\n\t\tlet value = record;\n\n\t\tfor (const part of parts) {\n\t\t\tif (value && typeof value === \"object\") {\n\t\t\t\tvalue = value[part];\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Extract raw keys from record\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of raw keys\n\t * @private\n\t */\n\t_extractKeys (record) {\n\t\tif (this.type === IndexTypes.COMPOSITE) {\n\t\t\treturn this._generateCompositeKeys(record);\n\t\t}\n\n\t\tconst field = this.fields[0];\n\t\tconst value = this._getFieldValue(record, field);\n\n\t\tif (value === undefined || value === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Handle array fields\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value.map(v => String(v));\n\t\t}\n\n\t\treturn [String(value)];\n\t}\n\n\t/**\n\t * Generate composite keys\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of composite keys\n\t * @private\n\t */\n\t_generateCompositeKeys (record) {\n\t\tlet keys = [\"\"];\n\n\t\tfor (const field of this.fields.sort()) {\n\t\t\tconst value = this._getFieldValue(record, field);\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn []; // Skip records with missing composite fields\n\t\t\t}\n\n\t\t\tconst values = Array.isArray(value) ? value : [value];\n\t\t\tconst newKeys = [];\n\n\t\t\tfor (const existingKey of keys) {\n\t\t\t\tfor (const val of values) {\n\t\t\t\t\tconst newKey = existingKey === \"\" ?\n\t\t\t\t\t\tString(val) :\n\t\t\t\t\t\t`${existingKey}${this.delimiter}${String(val)}`;\n\t\t\t\t\tnewKeys.push(newKey);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tkeys = newKeys;\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Update statistics\n\t * @param {number} keyCount - Number of keys\n\t * @param {number} entryCount - Number of entries\n\t * @param {number} memoryDelta - Memory change in bytes\n\t */\n\tupdateStats (keyCount, entryCount, memoryDelta) {\n\t\tthis.stats.totalKeys = keyCount;\n\t\tthis.stats.totalEntries = entryCount;\n\t\tthis.stats.memoryUsage += memoryDelta;\n\t\tthis.stats.lastUpdated = new Date();\n\t}\n}\n\n/**\n * Memory-efficient index storage with reference counting\n */\nexport class IndexStorage {\n\tconstructor () {\n\t\t// Map<indexKey, Set<recordKey>>\n\t\tthis._storage = new Map();\n\t\t// Track reference counts for memory management\n\t\tthis._refCounts = new Map();\n\t}\n\n\t/**\n\t * Add a record to index\n\t * @param {string} indexKey - Index key\n\t * @param {string} recordKey - Record key\n\t */\n\tadd (indexKey, recordKey) {\n\t\tif (!this._storage.has(indexKey)) {\n\t\t\tthis._storage.set(indexKey, new Set());\n\t\t\tthis._refCounts.set(indexKey, 0);\n\t\t}\n\n\t\tconst recordSet = this._storage.get(indexKey);\n\t\tif (!recordSet.has(recordKey)) {\n\t\t\trecordSet.add(recordKey);\n\t\t\tthis._refCounts.set(indexKey, this._refCounts.get(indexKey) + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a record from index\n\t * @param {string} indexKey - Index key\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if record was removed\n\t */\n\tremove (indexKey, recordKey) {\n\t\tconst recordSet = this._storage.get(indexKey);\n\t\tif (!recordSet) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst removed = recordSet.delete(recordKey);\n\t\tif (removed) {\n\t\t\tconst newCount = this._refCounts.get(indexKey) - 1;\n\t\t\tif (newCount === 0) {\n\t\t\t\t// Clean up empty index keys\n\t\t\t\tthis._storage.delete(indexKey);\n\t\t\t\tthis._refCounts.delete(indexKey);\n\t\t\t} else {\n\t\t\t\tthis._refCounts.set(indexKey, newCount);\n\t\t\t}\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Get records for index key\n\t * @param {string} indexKey - Index key\n\t * @returns {Set<string>} Set of record keys\n\t */\n\tget (indexKey) {\n\t\treturn this._storage.get(indexKey) || new Set();\n\t}\n\n\t/**\n\t * Check if index key exists\n\t * @param {string} indexKey - Index key\n\t * @returns {boolean} True if key exists\n\t */\n\thas (indexKey) {\n\t\treturn this._storage.has(indexKey);\n\t}\n\n\t/**\n\t * Get all index keys\n\t * @returns {string[]} Array of index keys\n\t */\n\tkeys () {\n\t\treturn Array.from(this._storage.keys());\n\t}\n\n\t/**\n\t * Get index statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tlet totalEntries = 0;\n\t\tfor (const recordSet of this._storage.values()) {\n\t\t\ttotalEntries += recordSet.size;\n\t\t}\n\n\t\treturn {\n\t\t\ttotalKeys: this._storage.size,\n\t\t\ttotalEntries,\n\t\t\tmemoryUsage: this._estimateMemoryUsage()\n\t\t};\n\t}\n\n\t/**\n\t * Clear all index data\n\t */\n\tclear () {\n\t\tthis._storage.clear();\n\t\tthis._refCounts.clear();\n\t}\n\n\t/**\n\t * Estimate memory usage in bytes\n\t * @returns {number} Estimated memory usage\n\t * @private\n\t */\n\t_estimateMemoryUsage () {\n\t\tlet size = 0;\n\n\t\tfor (const [key, recordSet] of this._storage) {\n\t\t\t// Estimate key size (string)\n\t\t\tsize += key.length * 2;\n\n\t\t\t// Estimate Set overhead + record keys\n\t\t\tsize += 64; // Set object overhead\n\t\t\tfor (const recordKey of recordSet) {\n\t\t\t\tsize += recordKey.length * 2;\n\t\t\t}\n\t\t}\n\n\t\treturn size;\n\t}\n}\n\n/**\n * Index manager that handles multiple indexes efficiently\n */\nexport class IndexManager {\n\t/**\n\t * @param {string} [delimiter='|'] - Default delimiter for composite indexes\n\t */\n\tconstructor (delimiter = \"|\") {\n\t\tthis.delimiter = delimiter;\n\t\t// Map<indexName, IndexDefinition>\n\t\tthis._definitions = new Map();\n\t\t// Map<indexName, IndexStorage>\n\t\tthis._indexes = new Map();\n\t\t// Performance tracking\n\t\tthis._stats = {\n\t\t\ttotalOperations: 0,\n\t\t\ttotalTime: 0,\n\t\t\tlastOptimized: new Date()\n\t\t};\n\t}\n\n\t/**\n\t * Create a new index\n\t * @param {string} name - Index name\n\t * @param {string|string[]} fields - Field name(s) to index\n\t * @param {Object} [options={}] - Index options\n\t * @returns {IndexManager} This instance for chaining\n\t * @throws {IndexError} If index already exists or configuration is invalid\n\t */\n\tcreateIndex (name, fields, options = {}) {\n\t\tif (this._definitions.has(name)) {\n\t\t\tthrow new IndexError(`Index '${name}' already exists`, name, \"create\");\n\t\t}\n\n\t\tconst definition = new IndexDefinition(name, fields, {\n\t\t\tdelimiter: this.delimiter,\n\t\t\t...options\n\t\t});\n\n\t\tthis._definitions.set(name, definition);\n\t\tthis._indexes.set(name, new IndexStorage());\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Drop an index\n\t * @param {string} name - Index name\n\t * @returns {IndexManager} This instance for chaining\n\t * @throws {IndexError} If index doesn't exist\n\t */\n\tdropIndex (name) {\n\t\tif (!this._definitions.has(name)) {\n\t\t\tthrow new IndexError(`Index '${name}' does not exist`, name, \"drop\");\n\t\t}\n\n\t\tthis._definitions.delete(name);\n\t\tthis._indexes.delete(name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if index exists\n\t * @param {string} name - Index name\n\t * @returns {boolean} True if index exists\n\t */\n\thasIndex (name) {\n\t\treturn this._definitions.has(name);\n\t}\n\n\t/**\n\t * Get index definition\n\t * @param {string} name - Index name\n\t * @returns {IndexDefinition|undefined} Index definition\n\t */\n\tgetIndexDefinition (name) {\n\t\treturn this._definitions.get(name);\n\t}\n\n\t/**\n\t * List all indexes\n\t * @returns {string[]} Array of index names\n\t */\n\tlistIndexes () {\n\t\treturn Array.from(this._definitions.keys());\n\t}\n\n\t/**\n\t * Add a record to all applicable indexes\n\t * @param {string} recordKey - Record key\n\t * @param {Object} recordData - Record data\n\t * @throws {IndexError} If unique constraint is violated\n\t */\n\taddRecord (recordKey, recordData) {\n\t\tconst startTime = Date.now();\n\n\t\tfor (const [indexName, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(indexName);\n\t\t\tconst indexKeys = definition.generateKeys(recordData);\n\n\t\t\tfor (const indexKey of indexKeys) {\n\t\t\t\t// Check unique constraint\n\t\t\t\tif (definition.unique && storage.has(indexKey)) {\n\t\t\t\t\tconst existingRecords = storage.get(indexKey);\n\t\t\t\t\tif (existingRecords.size > 0 && !existingRecords.has(recordKey)) {\n\t\t\t\t\t\tthrow new IndexError(\n\t\t\t\t\t\t\t`Unique constraint violation on index '${indexName}' for value '${indexKey}'`,\n\t\t\t\t\t\t\tindexName,\n\t\t\t\t\t\t\t\"add\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstorage.add(indexKey, recordKey);\n\t\t\t}\n\n\t\t\t// Update statistics\n\t\t\tconst stats = storage.getStats();\n\t\t\tdefinition.updateStats(stats.totalKeys, stats.totalEntries, 0);\n\t\t}\n\n\t\tthis._updatePerformanceStats(Date.now() - startTime);\n\t}\n\n\t/**\n\t * Remove a record from all indexes\n\t * @param {string} recordKey - Record key\n\t * @param {Object} recordData - Record data\n\t */\n\tremoveRecord (recordKey, recordData) {\n\t\tconst startTime = Date.now();\n\n\t\tfor (const [indexName, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(indexName);\n\t\t\tconst indexKeys = definition.generateKeys(recordData);\n\n\t\t\tfor (const indexKey of indexKeys) {\n\t\t\t\tstorage.remove(indexKey, recordKey);\n\t\t\t}\n\n\t\t\t// Update statistics\n\t\t\tconst stats = storage.getStats();\n\t\t\tdefinition.updateStats(stats.totalKeys, stats.totalEntries, 0);\n\t\t}\n\n\t\tthis._updatePerformanceStats(Date.now() - startTime);\n\t}\n\n\t/**\n\t * Update a record in indexes (remove old, add new)\n\t * @param {string} recordKey - Record key\n\t * @param {Object} oldData - Old record data\n\t * @param {Object} newData - New record data\n\t */\n\tupdateRecord (recordKey, oldData, newData) {\n\t\tthis.removeRecord(recordKey, oldData);\n\t\tthis.addRecord(recordKey, newData);\n\t}\n\n\t/**\n\t * Find records using index\n\t * @param {string} indexName - Index name\n\t * @param {string} indexKey - Index key to search for\n\t * @returns {Set<string>} Set of record keys\n\t * @throws {IndexError} If index doesn't exist\n\t */\n\tfindByIndex (indexName, indexKey) {\n\t\tconst storage = this._indexes.get(indexName);\n\t\tif (!storage) {\n\t\t\tthrow new IndexError(`Index '${indexName}' does not exist`, indexName, \"query\");\n\t\t}\n\n\t\treturn new Set(storage.get(indexKey));\n\t}\n\n\t/**\n\t * Find records using multiple criteria (intersection)\n\t * @param {Object} criteria - Object with index names as keys and search values as values\n\t * @returns {Set<string>} Set of record keys that match all criteria\n\t */\n\tfindByCriteria (criteria) {\n\t\tconst indexNames = Object.keys(criteria);\n\t\tif (indexNames.length === 0) {\n\t\t\treturn new Set();\n\t\t}\n\n\t\tlet result = null;\n\n\t\tfor (const indexName of indexNames) {\n\t\t\tconst indexKey = String(criteria[indexName]);\n\t\t\tconst records = this.findByIndex(indexName, indexKey);\n\n\t\t\tif (result === null) {\n\t\t\t\tresult = records;\n\t\t\t} else {\n\t\t\t\t// Intersection\n\t\t\t\tresult = new Set([...result].filter(key => records.has(key)));\n\t\t\t}\n\n\t\t\t// Early termination if no matches\n\t\t\tif (result.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get optimal index for query fields\n\t * @param {string[]} fields - Fields being queried\n\t * @returns {string|null} Best index name or null if no suitable index\n\t */\n\tgetOptimalIndex (fields) {\n\t\tconst sortedFields = [...fields].sort();\n\n\t\t// Look for exact match first\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst indexFields = [...definition.fields].sort();\n\t\t\tif (JSON.stringify(indexFields) === JSON.stringify(sortedFields)) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\t// Look for index that covers all fields\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tif (fields.every(field => definition.fields.includes(field))) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\t// Look for index that covers some fields (prefer single field indexes)\n\t\tconst candidates = [];\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst coverage = fields.filter(field => definition.fields.includes(field)).length;\n\t\t\tif (coverage > 0) {\n\t\t\t\tcandidates.push({ name, coverage, fields: definition.fields.length });\n\t\t\t}\n\t\t}\n\n\t\tif (candidates.length > 0) {\n\t\t\t// Sort by coverage (descending) then by field count (ascending)\n\t\t\tcandidates.sort((a, b) => {\n\t\t\t\tif (a.coverage !== b.coverage) {\n\t\t\t\t\treturn b.coverage - a.coverage;\n\t\t\t\t}\n\n\t\t\t\treturn a.fields - b.fields;\n\t\t\t});\n\n\t\t\treturn candidates[0].name;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Rebuild all indexes from scratch\n\t * @param {Iterable<[string, Object]>} records - All records to reindex (entries format)\n\t */\n\trebuild (records) {\n\t\t// Clear all indexes\n\t\tfor (const storage of this._indexes.values()) {\n\t\t\tstorage.clear();\n\t\t}\n\n\t\t// Rebuild from records\n\t\tfor (const [recordKey, recordData] of records) {\n\t\t\tthis.addRecord(recordKey, recordData);\n\t\t}\n\n\t\tthis._stats.lastOptimized = new Date();\n\t}\n\n\t/**\n\t * Rebuild indexes for a specific field\n\t * @param {string} field - Field to reindex\n\t * @param {Iterable<[string, Object]>} records - All records to reindex (entries format)\n\t */\n\trebuildField (field, records) {\n\t\tconst indexNames = this.listIndexes();\n\n\t\t// Find indexes that involve the specified field\n\t\tconst indexesToRebuild = indexNames.filter(indexName => {\n\t\t\tconst indexDef = this.getIndexDefinition(indexName);\n\n\t\t\treturn indexDef && indexDef.fields.includes(field);\n\t\t});\n\n\t\t// If we have indexes to rebuild\n\t\tif (indexesToRebuild.length > 0) {\n\t\t\t// Store definitions before dropping\n\t\t\tconst indexDefinitions = indexesToRebuild.map(indexName => {\n\t\t\t\tconst indexDef = this.getIndexDefinition(indexName);\n\n\t\t\t\treturn {\n\t\t\t\t\tname: indexName,\n\t\t\t\t\tfields: indexDef.fields,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\ttype: indexDef.type,\n\t\t\t\t\t\tunique: indexDef.unique,\n\t\t\t\t\t\tfilter: indexDef.filter,\n\t\t\t\t\t\ttransform: indexDef.transform,\n\t\t\t\t\t\tdelimiter: indexDef.delimiter\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Drop all indexes that need rebuilding\n\t\t\tfor (const indexName of indexesToRebuild) {\n\t\t\t\tthis.dropIndex(indexName);\n\t\t\t}\n\n\t\t\t// Recreate all dropped indexes\n\t\t\tfor (const indexDef of indexDefinitions) {\n\t\t\t\tthis.createIndex(indexDef.name, indexDef.fields, indexDef.options);\n\t\t\t}\n\n\t\t\t// Re-add all records once (this will populate all recreated indexes)\n\t\t\tfor (const [recordKey, recordData] of records) {\n\t\t\t\tthis.addRecord(recordKey, recordData);\n\t\t\t}\n\t\t}\n\n\t\tthis._stats.lastOptimized = new Date();\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst indexStats = {};\n\t\tlet totalMemory = 0;\n\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(name);\n\t\t\tconst stats = storage.getStats();\n\t\t\tindexStats[name] = {\n\t\t\t\t...definition.stats,\n\t\t\t\t...stats,\n\t\t\t\ttype: definition.type,\n\t\t\t\tfields: definition.fields\n\t\t\t};\n\t\t\ttotalMemory += stats.memoryUsage;\n\t\t}\n\n\t\treturn {\n\t\t\tindexes: indexStats,\n\t\t\ttotalIndexes: this._definitions.size,\n\t\t\ttotalMemoryUsage: totalMemory,\n\t\t\tperformance: {\n\t\t\t\t...this._stats,\n\t\t\t\taverageOperationTime: this._stats.totalOperations > 0 ?\n\t\t\t\t\tthis._stats.totalTime / this._stats.totalOperations :\n\t\t\t\t\t0\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Clear all indexes\n\t */\n\tclear () {\n\t\tfor (const storage of this._indexes.values()) {\n\t\t\tstorage.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Update performance statistics\n\t * @param {number} operationTime - Time taken for operation in ms\n\t * @private\n\t */\n\t_updatePerformanceStats (operationTime) {\n\t\tthis._stats.totalOperations++;\n\t\tthis._stats.totalTime += operationTime;\n\t}\n}\n","import { ConfigurationError } from \"./errors.js\";\n\n/**\n * Version retention policies\n */\nexport const RetentionPolicies = {\n\tCOUNT: \"count\",\n\tTIME: \"time\",\n\tSIZE: \"size\",\n\tNONE: \"none\"\n};\n\n/**\n * Version entry with metadata\n */\nexport class VersionEntry {\n\t/**\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t */\n\tconstructor (data, metadata = {}) {\n\t\tthis.data = Object.freeze(structuredClone(data));\n\t\tthis.timestamp = new Date();\n\t\tthis.size = this._calculateSize(data);\n\t\tthis.metadata = Object.freeze({\n\t\t\toperation: \"update\",\n\t\t\t...metadata\n\t\t});\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Calculate estimated size of version data\n\t * @param {Object} data - Data to measure\n\t * @returns {number} Size in bytes\n\t * @private\n\t */\n\t_calculateSize (data) {\n\t\ttry {\n\t\t\treturn JSON.stringify(data).length * 2; // UTF-16 estimate\n\t\t} catch {\n\t\t\treturn 1024; // Fallback estimate\n\t\t}\n\t}\n\n\t/**\n\t * Check if version is older than specified time\n\t * @param {number} maxAge - Maximum age in milliseconds\n\t * @returns {boolean} True if version is older\n\t */\n\tisOlderThan (maxAge) {\n\t\treturn Date.now() - this.timestamp.getTime() > maxAge;\n\t}\n\n\t/**\n\t * Get age of version in milliseconds\n\t * @returns {number} Age in milliseconds\n\t */\n\tgetAge () {\n\t\treturn Date.now() - this.timestamp.getTime();\n\t}\n\n\t/**\n\t * Convert to plain object for serialization\n\t * @returns {Object} Plain object representation\n\t */\n\ttoObject () {\n\t\treturn {\n\t\t\tdata: this.data,\n\t\t\ttimestamp: this.timestamp.toISOString(),\n\t\t\tsize: this.size,\n\t\t\tmetadata: this.metadata\n\t\t};\n\t}\n}\n\n/**\n * Version history for a single record\n */\nexport class VersionHistory {\n\t/**\n\t * @param {string} recordKey - Record key\n\t * @param {Object} [policy={}] - Retention policy\n\t */\n\tconstructor (recordKey, policy = {}) {\n\t\tthis.recordKey = recordKey;\n\t\tthis.policy = policy;\n\t\tthis.versions = [];\n\t\tthis.totalSize = 0;\n\t\tthis.createdAt = new Date();\n\t\tthis.lastAccessed = new Date();\n\t}\n\n\t/**\n\t * Add a new version\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t * @returns {VersionEntry} Created version entry\n\t */\n\taddVersion (data, metadata = {}) {\n\t\tconst version = new VersionEntry(data, metadata);\n\t\tthis.versions.push(version);\n\t\tthis.totalSize += version.size;\n\t\tthis.lastAccessed = new Date();\n\n\t\t// Apply retention policy\n\t\tthis._applyRetentionPolicy();\n\n\t\treturn version;\n\t}\n\n\t/**\n\t * Get version by index (0 = oldest, -1 = newest)\n\t * @param {number} index - Version index\n\t * @returns {VersionEntry|undefined} Version entry\n\t */\n\tgetVersion (index) {\n\t\tthis.lastAccessed = new Date();\n\n\t\tif (index < 0) {\n\t\t\treturn this.versions[this.versions.length + index];\n\t\t}\n\n\t\treturn this.versions[index];\n\t}\n\n\t/**\n\t * Get latest version\n\t * @returns {VersionEntry|undefined} Latest version\n\t */\n\tgetLatest () {\n\t\treturn this.getVersion(-1);\n\t}\n\n\t/**\n\t * Get oldest version\n\t * @returns {VersionEntry|undefined} Oldest version\n\t */\n\tgetOldest () {\n\t\treturn this.getVersion(0);\n\t}\n\n\t/**\n\t * Get all versions within time range\n\t * @param {Date} [start] - Start time (inclusive)\n\t * @param {Date} [end] - End time (inclusive)\n\t * @returns {VersionEntry[]} Array of versions in range\n\t */\n\tgetVersionsInRange (start, end) {\n\t\tthis.lastAccessed = new Date();\n\n\t\treturn this.versions.filter(version => {\n\t\t\tconst timestamp = version.timestamp;\n\t\t\tconst afterStart = !start || timestamp >= start;\n\t\t\tconst beforeEnd = !end || timestamp <= end;\n\n\t\t\treturn afterStart && beforeEnd;\n\t\t});\n\t}\n\n\t/**\n\t * Get number of versions\n\t * @returns {number} Version count\n\t */\n\tgetCount () {\n\t\treturn this.versions.length;\n\t}\n\n\t/**\n\t * Get total size of all versions\n\t * @returns {number} Total size in bytes\n\t */\n\tgetTotalSize () {\n\t\treturn this.totalSize;\n\t}\n\n\t/**\n\t * Clear all versions\n\t * @returns {number} Number of versions cleared\n\t */\n\tclear () {\n\t\tconst count = this.versions.length;\n\t\tthis.versions = [];\n\t\tthis.totalSize = 0;\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Remove versions older than specified age\n\t * @param {number} maxAge - Maximum age in milliseconds\n\t * @returns {number} Number of versions removed\n\t */\n\tremoveOlderThan (maxAge) {\n\t\tconst oldCount = this.versions.length;\n\t\tconst cutoffTime = Date.now() - maxAge;\n\n\t\tthis.versions = this.versions.filter(version => {\n\t\t\tconst keep = version.timestamp.getTime() >= cutoffTime;\n\t\t\tif (!keep) {\n\t\t\t\tthis.totalSize -= version.size;\n\t\t\t}\n\n\t\t\treturn keep;\n\t\t});\n\n\t\treturn oldCount - this.versions.length;\n\t}\n\n\t/**\n\t * Apply retention policy to limit versions\n\t * @private\n\t */\n\t_applyRetentionPolicy () {\n\t\tif (!this.policy || this.policy.type === RetentionPolicies.NONE) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet removed = 0;\n\n\t\tswitch (this.policy.type) {\n\t\t\tcase RetentionPolicies.COUNT:\n\t\t\t\tremoved = this._applyCountPolicy();\n\t\t\t\tbreak;\n\t\t\tcase RetentionPolicies.TIME:\n\t\t\t\tremoved = this._applyTimePolicy();\n\t\t\t\tbreak;\n\t\t\tcase RetentionPolicies.SIZE:\n\t\t\t\tremoved = this._applySizePolicy();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tremoved = 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Apply count-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applyCountPolicy () {\n\t\tconst maxCount = this.policy.maxCount || 10;\n\t\tif (this.versions.length <= maxCount) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst removeCount = this.versions.length - maxCount;\n\t\tconst removed = this.versions.splice(0, removeCount);\n\n\t\tfor (const version of removed) {\n\t\t\tthis.totalSize -= version.size;\n\t\t}\n\n\t\treturn removed.length;\n\t}\n\n\t/**\n\t * Apply time-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applyTimePolicy () {\n\t\tconst maxAge = this.policy.maxAge || 30 * 24 * 60 * 60 * 1000; // 30 days default\n\n\t\treturn this.removeOlderThan(maxAge);\n\t}\n\n\t/**\n\t * Apply size-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applySizePolicy () {\n\t\tconst maxSize = this.policy.maxSize || 10 * 1024 * 1024; // 10MB default\n\t\tif (this.totalSize <= maxSize) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet removed = 0;\n\t\twhile (this.totalSize > maxSize && this.versions.length > 1) {\n\t\t\tconst version = this.versions.shift();\n\t\t\tthis.totalSize -= version.size;\n\t\t\tremoved++;\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Get statistics for this version history\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\trecordKey: this.recordKey,\n\t\t\tversionCount: this.versions.length,\n\t\t\ttotalSize: this.totalSize,\n\t\t\taverageSize: this.versions.length > 0 ? this.totalSize / this.versions.length : 0,\n\t\t\toldestVersion: this.versions.length > 0 ? this.versions[0].timestamp : null,\n\t\t\tnewestVersion: this.versions.length > 0 ? this.versions[this.versions.length - 1].timestamp : null,\n\t\t\tcreatedAt: this.createdAt,\n\t\t\tlastAccessed: this.lastAccessed,\n\t\t\tpolicy: this.policy\n\t\t};\n\t}\n}\n\n/**\n * Version manager for handling versioning across all records\n */\nexport class VersionManager {\n\t/**\n\t * @param {Object} [globalPolicy={}] - Global retention policy\n\t */\n\tconstructor (globalPolicy = {}) {\n\t\tthis.globalPolicy = this._validatePolicy(globalPolicy);\n\t\t// Map<recordKey, VersionHistory>\n\t\tthis.histories = new Map();\n\t\tthis.stats = {\n\t\t\ttotalHistories: 0,\n\t\t\ttotalVersions: 0,\n\t\t\ttotalSize: 0,\n\t\t\tlastCleanup: new Date(),\n\t\t\tcleanupCount: 0\n\t\t};\n\t}\n\n\t/**\n\t * Enable versioning for a record\n\t * @param {string} recordKey - Record key\n\t * @param {Object} [policy] - Custom retention policy for this record\n\t * @returns {VersionHistory} Created version history\n\t */\n\tenableVersioning (recordKey, policy) {\n\t\tif (this.histories.has(recordKey)) {\n\t\t\treturn this.histories.get(recordKey);\n\t\t}\n\n\t\tconst effectivePolicy = policy || this.globalPolicy;\n\t\tconst history = new VersionHistory(recordKey, effectivePolicy);\n\t\tthis.histories.set(recordKey, history);\n\t\tthis.stats.totalHistories++;\n\n\t\treturn history;\n\t}\n\n\t/**\n\t * Disable versioning for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if versioning was disabled\n\t */\n\tdisableVersioning (recordKey) {\n\t\tconst history = this.histories.get(recordKey);\n\t\tif (!history) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.stats.totalVersions -= history.getCount();\n\t\tthis.stats.totalSize -= history.getTotalSize();\n\t\tthis.stats.totalHistories--;\n\n\t\treturn this.histories.delete(recordKey);\n\t}\n\n\t/**\n\t * Add a version for a record\n\t * @param {string} recordKey - Record key\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t * @returns {VersionEntry} Created version entry\n\t * @throws {VersionError} If versioning is not enabled for record\n\t */\n\taddVersion (recordKey, data, metadata = {}) {\n\t\tlet history = this.histories.get(recordKey);\n\t\tif (!history) {\n\t\t\t// Auto-enable versioning with global policy\n\t\t\thistory = this.enableVersioning(recordKey);\n\t\t}\n\n\t\tconst oldCount = history.getCount();\n\t\tconst oldSize = history.getTotalSize();\n\n\t\tconst version = history.addVersion(data, metadata);\n\n\t\t// Update global stats\n\t\tthis.stats.totalVersions += history.getCount() - oldCount;\n\t\tthis.stats.totalSize += history.getTotalSize() - oldSize;\n\n\t\treturn version;\n\t}\n\n\t/**\n\t * Get version history for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {VersionHistory|undefined} Version history\n\t */\n\tgetHistory (recordKey) {\n\t\treturn this.histories.get(recordKey);\n\t}\n\n\t/**\n\t * Get specific version of a record\n\t * @param {string} recordKey - Record key\n\t * @param {number} versionIndex - Version index\n\t * @returns {VersionEntry|undefined} Version entry\n\t */\n\tgetVersion (recordKey, versionIndex) {\n\t\tconst history = this.histories.get(recordKey);\n\n\t\treturn history ? history.getVersion(versionIndex) : undefined;\n\t}\n\n\t/**\n\t * Get latest version of a record\n\t * @param {string} recordKey - Record key\n\t * @returns {VersionEntry|undefined} Latest version\n\t */\n\tgetLatestVersion (recordKey) {\n\t\tconst history = this.histories.get(recordKey);\n\n\t\treturn history ? history.getLatest() : undefined;\n\t}\n\n\t/**\n\t * Check if versioning is enabled for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if versioning is enabled\n\t */\n\tisVersioningEnabled (recordKey) {\n\t\treturn this.histories.has(recordKey);\n\t}\n\n\t/**\n\t * Clean up versions based on retention policies\n\t * @param {Object} [options={}] - Cleanup options\n\t * @param {boolean} [options.force=false] - Force cleanup even if not needed\n\t * @param {string[]} [options.recordKeys] - Specific records to clean up\n\t * @returns {Object} Cleanup results\n\t */\n\tcleanup (options = {}) {\n\t\tconst { recordKeys } = options;\n\t\tconst results = {\n\t\t\thistoriesProcessed: 0,\n\t\t\tversionsRemoved: 0,\n\t\t\tsizeFreed: 0,\n\t\t\tstartTime: new Date()\n\t\t};\n\n\t\tconst keysToProcess = recordKeys || Array.from(this.histories.keys());\n\n\t\tfor (const recordKey of keysToProcess) {\n\t\t\tconst history = this.histories.get(recordKey);\n\t\t\tif (history) {\n\t\t\t\tconst oldCount = history.getCount();\n\t\t\t\tconst oldSize = history.getTotalSize();\n\n\t\t\t\t// Apply retention policy\n\t\t\t\thistory._applyRetentionPolicy();\n\n\t\t\t\tconst newCount = history.getCount();\n\t\t\t\tconst newSize = history.getTotalSize();\n\n\t\t\t\tresults.historiesProcessed++;\n\t\t\t\tresults.versionsRemoved += oldCount - newCount;\n\t\t\t\tresults.sizeFreed += oldSize - newSize;\n\n\t\t\t\t// Remove empty histories\n\t\t\t\tif (newCount === 0) {\n\t\t\t\t\tthis.histories.delete(recordKey);\n\t\t\t\t\tthis.stats.totalHistories--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update global stats\n\t\tthis.stats.totalVersions -= results.versionsRemoved;\n\t\tthis.stats.totalSize -= results.sizeFreed;\n\t\tthis.stats.lastCleanup = new Date();\n\t\tthis.stats.cleanupCount++;\n\n\t\tresults.endTime = new Date();\n\t\tresults.duration = results.endTime.getTime() - results.startTime.getTime();\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Set global retention policy\n\t * @param {Object} policy - Retention policy\n\t * @returns {VersionManager} This instance for chaining\n\t */\n\tsetGlobalPolicy (policy) {\n\t\tthis.globalPolicy = this._validatePolicy(policy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\t// Recalculate stats from histories\n\t\tlet totalVersions = 0;\n\t\tlet totalSize = 0;\n\t\tconst historyStats = [];\n\n\t\tfor (const history of this.histories.values()) {\n\t\t\tconst stats = history.getStats();\n\t\t\thistoryStats.push(stats);\n\t\t\ttotalVersions += stats.versionCount;\n\t\t\ttotalSize += stats.totalSize;\n\t\t}\n\n\t\treturn {\n\t\t\t...this.stats,\n\t\t\ttotalHistories: this.histories.size,\n\t\t\ttotalVersions,\n\t\t\ttotalSize,\n\t\t\taverageVersionsPerRecord: this.histories.size > 0 ? totalVersions / this.histories.size : 0,\n\t\t\taverageSizePerRecord: this.histories.size > 0 ? totalSize / this.histories.size : 0,\n\t\t\tglobalPolicy: this.globalPolicy,\n\t\t\thistories: historyStats\n\t\t};\n\t}\n\n\t/**\n\t * Export version data for backup\n\t * @param {string[]} [recordKeys] - Specific records to export\n\t * @returns {Object} Exportable version data\n\t */\n\texport (recordKeys) {\n\t\tconst keysToExport = recordKeys || Array.from(this.histories.keys());\n\t\tconst exportData = {\n\t\t\tglobalPolicy: this.globalPolicy,\n\t\t\thistories: {},\n\t\t\texportedAt: new Date().toISOString()\n\t\t};\n\n\t\tfor (const recordKey of keysToExport) {\n\t\t\tconst history = this.histories.get(recordKey);\n\t\t\tif (history) {\n\t\t\t\texportData.histories[recordKey] = {\n\t\t\t\t\tpolicy: history.policy,\n\t\t\t\t\tversions: history.versions.map(v => v.toObject()),\n\t\t\t\t\tcreatedAt: history.createdAt.toISOString(),\n\t\t\t\t\tlastAccessed: history.lastAccessed.toISOString()\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn exportData;\n\t}\n\n\t/**\n\t * Import version data from backup\n\t * @param {Object} exportData - Exported version data\n\t * @param {Object} [options={}] - Import options\n\t * @param {boolean} [options.merge=false] - Whether to merge with existing data\n\t * @returns {Object} Import results\n\t */\n\timport (exportData, options = {}) {\n\t\tconst { merge = false } = options;\n\t\tconst results = {\n\t\t\thistoriesImported: 0,\n\t\t\tversionsImported: 0,\n\t\t\terrors: []\n\t\t};\n\n\t\tif (!merge) {\n\t\t\tthis.histories.clear();\n\t\t}\n\n\t\tif (exportData.globalPolicy) {\n\t\t\tthis.globalPolicy = this._validatePolicy(exportData.globalPolicy);\n\t\t}\n\n\t\tfor (const [recordKey, historyData] of Object.entries(exportData.histories)) {\n\t\t\ttry {\n\t\t\t\tconst history = new VersionHistory(recordKey, historyData.policy);\n\t\t\t\thistory.createdAt = new Date(historyData.createdAt);\n\t\t\t\thistory.lastAccessed = new Date(historyData.lastAccessed);\n\n\t\t\t\tfor (const versionData of historyData.versions) {\n\t\t\t\t\tconst version = new VersionEntry(versionData.data, versionData.metadata);\n\t\t\t\t\t// Restore original timestamp\n\t\t\t\t\tObject.defineProperty(version, \"timestamp\", {\n\t\t\t\t\t\tvalue: new Date(versionData.timestamp),\n\t\t\t\t\t\twritable: false\n\t\t\t\t\t});\n\t\t\t\t\thistory.versions.push(version);\n\t\t\t\t\thistory.totalSize += version.size;\n\t\t\t\t\tresults.versionsImported++;\n\t\t\t\t}\n\n\t\t\t\tthis.histories.set(recordKey, history);\n\t\t\t\tresults.historiesImported++;\n\t\t\t} catch (error) {\n\t\t\t\tresults.errors.push({\n\t\t\t\t\trecordKey,\n\t\t\t\t\terror: error.message\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Update stats\n\t\tthis._updateStats();\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Clear all version data\n\t * @returns {Object} Clear results\n\t */\n\tclear () {\n\t\tconst results = {\n\t\t\thistoriesCleared: this.histories.size,\n\t\t\tversionsCleared: this.stats.totalVersions,\n\t\t\tsizeFreed: this.stats.totalSize\n\t\t};\n\n\t\tthis.histories.clear();\n\t\tthis.stats = {\n\t\t\ttotalHistories: 0,\n\t\t\ttotalVersions: 0,\n\t\t\ttotalSize: 0,\n\t\t\tlastCleanup: new Date(),\n\t\t\tcleanupCount: this.stats.cleanupCount\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Validate retention policy\n\t * @param {Object} policy - Policy to validate\n\t * @returns {Object} Validated policy\n\t * @throws {ConfigurationError} If policy is invalid\n\t * @private\n\t */\n\t_validatePolicy (policy) {\n\t\tif (!policy || typeof policy !== \"object\") {\n\t\t\treturn { type: RetentionPolicies.NONE };\n\t\t}\n\n\t\tconst validTypes = Object.values(RetentionPolicies);\n\t\tif (policy.type && !validTypes.includes(policy.type)) {\n\t\t\tthrow new ConfigurationError(`Invalid retention policy type: ${policy.type}`, \"retentionPolicy.type\", policy.type);\n\t\t}\n\n\t\tconst validated = { ...policy };\n\n\t\tif (validated.type === RetentionPolicies.COUNT && validated.maxCount !== undefined) {\n\t\t\tif (typeof validated.maxCount !== \"number\" || validated.maxCount < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxCount must be a positive number\", \"retentionPolicy.maxCount\", validated.maxCount);\n\t\t\t}\n\t\t}\n\n\t\tif (validated.type === RetentionPolicies.TIME && validated.maxAge !== undefined) {\n\t\t\tif (typeof validated.maxAge !== \"number\" || validated.maxAge < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxAge must be a positive number\", \"retentionPolicy.maxAge\", validated.maxAge);\n\t\t\t}\n\t\t}\n\n\t\tif (validated.type === RetentionPolicies.SIZE && validated.maxSize !== undefined) {\n\t\t\tif (typeof validated.maxSize !== \"number\" || validated.maxSize < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxSize must be a positive number\", \"retentionPolicy.maxSize\", validated.maxSize);\n\t\t\t}\n\t\t}\n\n\t\treturn validated;\n\t}\n\n\t/**\n\t * Update global statistics\n\t * @private\n\t */\n\t_updateStats () {\n\t\tlet totalVersions = 0;\n\t\tlet totalSize = 0;\n\n\t\tfor (const history of this.histories.values()) {\n\t\t\ttotalVersions += history.getCount();\n\t\t\ttotalSize += history.getTotalSize();\n\t\t}\n\n\t\tthis.stats.totalHistories = this.histories.size;\n\t\tthis.stats.totalVersions = totalVersions;\n\t\tthis.stats.totalSize = totalSize;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { OperationTypes } from \"./constants.js\";\nimport { randomUUID as uuid } from \"crypto\";\n\n/**\n * Transaction operation entry\n */\nexport class TransactionOperation {\n\t/**\n\t * @param {string} type - Operation type\n\t * @param {string} key - Record key\n\t * @param {*} [oldValue] - Previous value (for rollback)\n\t * @param {*} [newValue] - New value\n\t * @param {Object} [metadata={}] - Additional metadata\n\t */\n\tconstructor (type, key, oldValue, newValue, metadata = {}) {\n\t\tthis.id = uuid();\n\t\tthis.type = type;\n\t\tthis.key = key;\n\t\tthis.oldValue = oldValue;\n\t\tthis.newValue = newValue;\n\t\tthis.metadata = metadata;\n\t\tthis.timestamp = new Date();\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Create rollback operation\n\t * @returns {TransactionOperation} Rollback operation\n\t */\n\tcreateRollback () {\n\t\tswitch (this.type) {\n\t\t\tcase OperationTypes.SET:\n\t\t\t\treturn this.oldValue === undefined ?\n\t\t\t\t\tnew TransactionOperation(OperationTypes.DELETE, this.key, this.newValue, undefined) :\n\t\t\t\t\tnew TransactionOperation(OperationTypes.SET, this.key, this.newValue, this.oldValue);\n\n\t\t\tcase OperationTypes.DELETE:\n\t\t\t\treturn new TransactionOperation(OperationTypes.SET, this.key, undefined, this.oldValue);\n\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(`Cannot create rollback for operation type: ${this.type}`, null, \"rollback\");\n\t\t}\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { TransactionStates, IsolationLevels } from \"./constants.js\";\nimport { TransactionOperation } from \"./transaction-operation.js\";\nimport { randomUUID as uuid } from \"crypto\";\n\n/**\n * Transaction implementation with ACID properties\n */\nexport class Transaction {\n\t/**\n\t * @param {string} [id] - Transaction ID (auto-generated if not provided)\n\t * @param {Object} [options={}] - Transaction options\n\t * @param {number} [options.isolationLevel=IsolationLevels.READ_COMMITTED] - Isolation level\n\t * @param {number} [options.timeout=60000] - Transaction timeout in milliseconds\n\t * @param {boolean} [options.readOnly=false] - Whether transaction is read-only\n\t */\n\tconstructor (id = uuid(), options = {}) {\n\t\tthis.id = id;\n\t\tthis.state = TransactionStates.PENDING;\n\t\tthis.isolationLevel = options.isolationLevel || IsolationLevels.READ_COMMITTED;\n\t\tthis.timeout = options.timeout || 60000;\n\t\tthis.readOnly = options.readOnly || false;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\n\t\t// Operation log for rollback\n\t\tthis.operations = [];\n\n\t\t// Read set for isolation (record keys read during transaction)\n\t\tthis.readSet = new Set();\n\n\t\t// Write set for isolation (record keys written during transaction)\n\t\tthis.writeSet = new Set();\n\n\t\t// Snapshot for repeatable read isolation\n\t\tthis.snapshot = new Map();\n\n\t\t// Validation callback for custom constraints\n\t\tthis.validationCallback = null;\n\n\t\t// Abort reason (set when transaction is aborted)\n\t\tthis.abortReason = null;\n\n\t\tObject.seal(this);\n\t}\n\n\t/**\n\t * Begin the transaction\n\t * @returns {Transaction} This transaction for chaining\n\t * @throws {TransactionError} If transaction is already active\n\t */\n\tbegin () {\n\t\tif (this.state !== TransactionStates.PENDING) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t`Cannot begin transaction in state: ${this.state}`,\n\t\t\t\tthis.id,\n\t\t\t\t\"begin\"\n\t\t\t);\n\t\t}\n\n\t\tthis.state = TransactionStates.ACTIVE;\n\t\tthis.startTime = new Date();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an operation to the transaction log\n\t * @param {string} type - Operation type\n\t * @param {string} key - Record key\n\t * @param {*} [oldValue] - Previous value\n\t * @param {*} [newValue] - New value\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {TransactionOperation} Created operation\n\t * @throws {TransactionError} If transaction is not active or is read-only\n\t */\n\taddOperation (type, key, oldValue, newValue, metadata = {}) {\n\t\tthis._checkActive();\n\n\t\tif (this.readOnly && type !== \"read\") {\n\t\t\tthrow new TransactionError(\n\t\t\t\t\"Cannot perform write operations in read-only transaction\",\n\t\t\t\tthis.id,\n\t\t\t\t\"write\"\n\t\t\t);\n\t\t}\n\n\t\t// Check timeout\n\t\tif (this._isTimedOut()) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t\"Transaction has timed out\",\n\t\t\t\tthis.id,\n\t\t\t\t\"timeout\"\n\t\t\t);\n\t\t}\n\n\t\tconst operation = new TransactionOperation(type, key, oldValue, newValue, metadata);\n\t\tthis.operations.push(operation);\n\n\t\t// Track read and write sets\n\t\tif (type === \"read\") {\n\t\t\tthis.readSet.add(key);\n\t\t} else {\n\t\t\tthis.writeSet.add(key);\n\t\t}\n\n\t\treturn operation;\n\t}\n\n\t/**\n\t * Set validation callback for custom constraints\n\t * @param {Function} callback - Validation function\n\t * @returns {Transaction} This transaction for chaining\n\t */\n\tsetValidation (callback) {\n\t\tthis.validationCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Validate transaction before commit\n\t * @param {Object} [context] - Validation context\n\t * @returns {boolean} True if validation passes\n\t * @throws {TransactionError} If validation fails\n\t */\n\tvalidate (context = {}) {\n\t\tif (this.validationCallback) {\n\t\t\tconst result = this.validationCallback(this, context);\n\t\t\tif (result !== true) {\n\t\t\t\tconst message = typeof result === \"string\" ? result : \"Transaction validation failed\";\n\t\t\t\tthrow new TransactionError(message, this.id, \"validation\");\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Commit the transaction\n\t * @param {Object} [context] - Commit context\n\t * @returns {Transaction} This transaction for chaining\n\t * @throws {TransactionError} If commit fails\n\t */\n\tcommit (context = {}) {\n\t\tthis._checkActive();\n\n\t\ttry {\n\t\t\t// Validate before commit\n\t\t\tthis.validate(context);\n\n\t\t\tthis.state = TransactionStates.COMMITTED;\n\t\t\tthis.endTime = new Date();\n\n\t\t\treturn this;\n\t\t} catch (error) {\n\t\t\t// Auto-abort on commit failure\n\t\t\tthis.abort();\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Abort the transaction\n\t * @param {string} [reason] - Reason for abort\n\t * @returns {Transaction} This transaction for chaining\n\t */\n\tabort (reason = \"User abort\") {\n\t\tif (this.state === TransactionStates.ABORTED || this.state === TransactionStates.COMMITTED) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.state = TransactionStates.ABORTED;\n\t\tthis.endTime = new Date();\n\t\tthis.abortReason = reason;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get rollback operations (in reverse order)\n\t * @returns {TransactionOperation[]} Array of rollback operations\n\t */\n\tgetRollbackOperations () {\n\t\treturn this.operations\n\t\t\t.slice()\n\t\t\t.reverse()\n\t\t\t.filter(op => op.type !== \"read\") // Filter out read operations\n\t\t\t.map(op => op.createRollback())\n\t\t\t.filter(op => op !== null);\n\t}\n\n\t/**\n\t * Check if transaction is active\n\t * @returns {boolean} True if transaction is active\n\t */\n\tisActive () {\n\t\treturn this.state === TransactionStates.ACTIVE;\n\t}\n\n\t/**\n\t * Check if transaction is committed\n\t * @returns {boolean} True if transaction is committed\n\t */\n\tisCommitted () {\n\t\treturn this.state === TransactionStates.COMMITTED;\n\t}\n\n\t/**\n\t * Check if transaction is aborted\n\t * @returns {boolean} True if transaction is aborted\n\t */\n\tisAborted () {\n\t\treturn this.state === TransactionStates.ABORTED;\n\t}\n\n\t/**\n\t * Get transaction duration\n\t * @returns {number|null} Duration in milliseconds, null if not completed\n\t */\n\tgetDuration () {\n\t\tif (!this.startTime) return null;\n\t\tconst endTime = this.endTime || new Date();\n\n\t\treturn endTime.getTime() - this.startTime.getTime();\n\t}\n\n\t/**\n\t * Get transaction statistics\n\t * @returns {Object} Transaction statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\tstate: this.state,\n\t\t\tisolationLevel: this.isolationLevel,\n\t\t\treadOnly: this.readOnly,\n\t\t\tstartTime: this.startTime,\n\t\t\tendTime: this.endTime,\n\t\t\tduration: this.getDuration(),\n\t\t\toperationCount: this.operations.length,\n\t\t\treadSetSize: this.readSet.size,\n\t\t\twriteSetSize: this.writeSet.size,\n\t\t\tsnapshotSize: this.snapshot.size,\n\t\t\tabortReason: this.abortReason,\n\t\t\ttimedOut: this._isTimedOut()\n\t\t};\n\t}\n\n\t/**\n\t * Export transaction for debugging/logging\n\t * @returns {Object} Exportable transaction data\n\t */\n\texport () {\n\t\treturn {\n\t\t\t...this.getStats(),\n\t\t\toperations: this.operations.map(op => ({\n\t\t\t\tid: op.id,\n\t\t\t\ttype: op.type,\n\t\t\t\tkey: op.key,\n\t\t\t\ttimestamp: op.timestamp,\n\t\t\t\tmetadata: op.metadata\n\t\t\t})),\n\t\t\treadSet: Array.from(this.readSet),\n\t\t\twriteSet: Array.from(this.writeSet)\n\t\t};\n\t}\n\n\t/**\n\t * Check if transaction is active and throw if not\n\t * @throws {TransactionError} If transaction is not active\n\t * @private\n\t */\n\t_checkActive () {\n\t\tif (this.state !== TransactionStates.ACTIVE) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t`Transaction is not active (current state: ${this.state})`,\n\t\t\t\tthis.id,\n\t\t\t\t\"state\"\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Check if transaction has timed out\n\t * @returns {boolean} True if timed out\n\t * @private\n\t */\n\t_isTimedOut () {\n\t\tif (!this.startTime) return false;\n\n\t\treturn Date.now() - this.startTime.getTime() > this.timeout;\n\t}\n}\n","import { ConcurrencyError } from \"./errors.js\";\nimport { LockTypes } from \"./constants.js\";\n\n/**\n * Lock manager for controlling concurrent access\n */\nexport class LockManager {\n\tconstructor () {\n\t\t// Map<recordKey, {type: string, holders: Set<transactionId>, waiters: Array}>\n\t\tthis.locks = new Map();\n\t\tthis.lockTimeout = 30000; // 30 seconds default\n\t}\n\n\t/**\n\t * Acquire a lock on a record\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key to lock\n\t * @param {string} lockType - Type of lock (shared/exclusive)\n\t * @param {number} [timeout] - Lock timeout in milliseconds\n\t * @returns {Promise<boolean>} True if lock acquired\n\t * @throws {ConcurrencyError} If lock cannot be acquired\n\t */\n\tasync acquireLock (transactionId, recordKey, lockType, timeout = this.lockTimeout) {\n\t\tconst startTime = Date.now();\n\n\t\twhile (Date.now() - startTime < timeout) {\n\t\t\tif (this._tryAcquireLock(transactionId, recordKey, lockType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Wait a bit before retrying\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 10));\n\t\t}\n\n\t\tthrow new ConcurrencyError(\n\t\t\t`Failed to acquire ${lockType} lock on record '${recordKey}' within timeout`,\n\t\t\trecordKey,\n\t\t\t\"lock\"\n\t\t);\n\t}\n\n\t/**\n\t * Try to acquire lock immediately\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key\n\t * @param {string} lockType - Lock type\n\t * @returns {boolean} True if lock acquired\n\t * @private\n\t */\n\t_tryAcquireLock (transactionId, recordKey, lockType) {\n\t\tconst existingLock = this.locks.get(recordKey);\n\n\t\tif (!existingLock) {\n\t\t\t// No existing lock, create new one\n\t\t\tthis.locks.set(recordKey, {\n\t\t\t\ttype: lockType,\n\t\t\t\tholders: new Set([transactionId]),\n\t\t\t\twaiters: []\n\t\t\t});\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if already holding the lock\n\t\tif (existingLock.holders.has(transactionId)) {\n\t\t\t// Check for lock upgrade\n\t\t\tif (existingLock.type === LockTypes.SHARED && lockType === LockTypes.EXCLUSIVE) {\n\t\t\t\t// Can upgrade if we're the only holder\n\t\t\t\tif (existingLock.holders.size === 1) {\n\t\t\t\t\texistingLock.type = LockTypes.EXCLUSIVE;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false; // Cannot upgrade with other holders\n\t\t\t}\n\n\t\t\treturn true; // Already have compatible lock\n\t\t}\n\n\t\t// Check compatibility\n\t\tif (lockType === LockTypes.SHARED && existingLock.type === LockTypes.SHARED) {\n\t\t\t// Shared locks are compatible\n\t\t\texistingLock.holders.add(transactionId);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Exclusive locks or mixed locks are not compatible\n\t\treturn false;\n\t}\n\n\t/**\n\t * Release a lock\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if lock was released\n\t */\n\treleaseLock (transactionId, recordKey) {\n\t\tconst lock = this.locks.get(recordKey);\n\t\tif (!lock || !lock.holders.has(transactionId)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlock.holders.delete(transactionId);\n\n\t\t// If no more holders, remove the lock\n\t\tif (lock.holders.size === 0) {\n\t\t\tthis.locks.delete(recordKey);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Release all locks held by a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {number} Number of locks released\n\t */\n\treleaseAllLocks (transactionId) {\n\t\tlet released = 0;\n\n\t\tfor (const [recordKey, lock] of this.locks) {\n\t\t\tif (lock.holders.has(transactionId)) {\n\t\t\t\tlock.holders.delete(transactionId);\n\t\t\t\treleased++;\n\n\t\t\t\t// If no more holders, remove the lock\n\t\t\t\tif (lock.holders.size === 0) {\n\t\t\t\t\tthis.locks.delete(recordKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn released;\n\t}\n\n\t/**\n\t * Check if transaction holds any locks\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {boolean} True if transaction holds locks\n\t */\n\tholdsLocks (transactionId) {\n\t\tfor (const lock of this.locks.values()) {\n\t\t\tif (lock.holders.has(transactionId)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get lock statistics\n\t * @returns {Object} Lock statistics\n\t */\n\tgetStats () {\n\t\tconst stats = {\n\t\t\ttotalLocks: this.locks.size,\n\t\t\tsharedLocks: 0,\n\t\t\texclusiveLocks: 0,\n\t\t\tlockHolders: new Set(),\n\t\t\trecordsLocked: []\n\t\t};\n\n\t\tfor (const [recordKey, lock] of this.locks) {\n\t\t\tif (lock.type === LockTypes.SHARED) {\n\t\t\t\tstats.sharedLocks++;\n\t\t\t} else {\n\t\t\t\tstats.exclusiveLocks++;\n\t\t\t}\n\n\t\t\tfor (const holder of lock.holders) {\n\t\t\t\tstats.lockHolders.add(holder);\n\t\t\t}\n\n\t\t\tstats.recordsLocked.push({\n\t\t\t\trecordKey,\n\t\t\t\ttype: lock.type,\n\t\t\t\tholders: Array.from(lock.holders)\n\t\t\t});\n\t\t}\n\n\t\tstats.uniqueHolders = stats.lockHolders.size;\n\n\t\treturn stats;\n\t}\n}\n","/**\n * Transaction statistics manager for tracking metrics and performance\n */\nexport class TransactionStatistics {\n\tconstructor () {\n\t\tthis.stats = {\n\t\t\ttotalTransactions: 0,\n\t\t\tcommittedTransactions: 0,\n\t\t\tabortedTransactions: 0,\n\t\t\tactiveTransactions: 0,\n\t\t\taverageDuration: 0,\n\t\t\ttotalDuration: 0\n\t\t};\n\t}\n\n\t/**\n\t * Increment total transaction count\n\t */\n\tincrementTotal () {\n\t\tthis.stats.totalTransactions++;\n\t}\n\n\t/**\n\t * Increment committed transaction count\n\t */\n\tincrementCommitted () {\n\t\tthis.stats.committedTransactions++;\n\t}\n\n\t/**\n\t * Increment aborted transaction count\n\t */\n\tincrementAborted () {\n\t\tthis.stats.abortedTransactions++;\n\t}\n\n\t/**\n\t * Increment active transaction count\n\t */\n\tincrementActive () {\n\t\tthis.stats.activeTransactions++;\n\t}\n\n\t/**\n\t * Decrement active transaction count\n\t */\n\tdecrementActive () {\n\t\tthis.stats.activeTransactions--;\n\t}\n\n\t/**\n\t * Update duration statistics based on completed transaction\n\t * @param {Transaction} transaction - Completed transaction\n\t */\n\tupdateDurationStats (transaction) {\n\t\tconst duration = transaction.getDuration();\n\t\tif (duration !== null) {\n\t\t\tthis.stats.totalDuration += duration;\n\t\t\tconst completedTransactions = this.stats.committedTransactions + this.stats.abortedTransactions;\n\t\t\tthis.stats.averageDuration = this.stats.totalDuration / completedTransactions;\n\t\t}\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @param {Object} lockStats - Lock manager statistics\n\t * @param {number} activeCount - Current active transaction count\n\t * @param {number} transactionCounter - Global transaction counter\n\t * @returns {Object} Complete statistics object\n\t */\n\tgetStats (lockStats, activeCount, transactionCounter) {\n\t\treturn {\n\t\t\t...this.stats,\n\t\t\tactiveTransactions: activeCount,\n\t\t\tlockStats,\n\t\t\ttransactionCounter\n\t\t};\n\t}\n\n\t/**\n\t * Reset all statistics to zero\n\t */\n\treset () {\n\t\tthis.stats = {\n\t\t\ttotalTransactions: 0,\n\t\t\tcommittedTransactions: 0,\n\t\t\tabortedTransactions: 0,\n\t\t\tactiveTransactions: 0,\n\t\t\taverageDuration: 0,\n\t\t\ttotalDuration: 0\n\t\t};\n\t}\n\n\t/**\n\t * Get raw statistics object (for internal use)\n\t * @returns {Object} Raw stats object\n\t */\n\tgetRawStats () {\n\t\treturn { ...this.stats };\n\t}\n}\n","/**\n * Analyzer for detecting relationships between transaction keys\n * Handles hierarchical, semantic, pattern, temporal, and functional relationships\n */\nexport class KeyRelationshipAnalyzer {\n\t/**\n\t * Creates a new KeyRelationshipAnalyzer instance\n\t * Initializes caches for pattern and semantic analysis\n\t */\n\tconstructor () {\n\t\t// Pattern cache for performance\n\t\tthis.patternCache = new Map();\n\t\tthis.semanticCache = new Map();\n\t}\n\n\t/**\n\t * Check if two keys are related through various relationship types\n\t * @param {string} key1 - First key\n\t * @param {string} key2 - Second key\n\t * @returns {boolean} True if keys are related\n\t */\n\tareKeysRelated (key1, key2) {\n\t\t// Direct match - always related\n\t\tif (key1 === key2) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for hierarchical relationships\n\t\tif (this._hasHierarchicalKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for semantic relationships\n\t\tif (this._hasSemanticKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for pattern-based relationships\n\t\tif (this._hasPatternBasedKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for composite key relationships\n\t\tif (this._hasCompositeKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for temporal relationships\n\t\tif (this._hasTemporalKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for index-based relationships\n\t\tif (this._hasIndexKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for collection relationships\n\t\tif (this._hasCollectionKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for functional dependencies\n\t\tif (this._hasFunctionalDependency(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key falls within the range that could affect a snapshot\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {string} operationKey - Key from other transaction's operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key could affect snapshot\n\t */\n\tisKeyInSnapshotRange (transaction, operationKey, snapshotKey, expectedValue) {\n\t\t// Direct key match - always affects snapshot\n\t\tif (operationKey === snapshotKey) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for explicit range metadata stored with the snapshot\n\t\tif (this._hasExplicitRangeMetadata(transaction, snapshotKey)) {\n\t\t\treturn this._checkExplicitRange(transaction, operationKey, snapshotKey);\n\t\t}\n\n\t\t// Infer range from snapshot key patterns\n\t\tif (this._isPatternBasedSnapshot(snapshotKey)) {\n\t\t\treturn this._checkPatternBasedRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for hierarchical key relationships\n\t\tif (this._hasHierarchicalRelationship(operationKey, snapshotKey)) {\n\t\t\treturn this._checkHierarchicalRange(operationKey, snapshotKey, expectedValue);\n\t\t}\n\n\t\t// Check for index-based range queries\n\t\tif (this._isIndexBasedSnapshot(transaction, snapshotKey)) {\n\t\t\treturn this._checkIndexBasedRange(transaction, operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for semantic key relationships\n\t\tif (this._hasSemanticRelationship(operationKey, snapshotKey)) {\n\t\t\treturn this._checkSemanticRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for temporal range relationships\n\t\tif (this._isTemporalSnapshot(snapshotKey)) {\n\t\t\treturn this._checkTemporalRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for composite key range relationships\n\t\tif (this._isCompositeKeySnapshot(snapshotKey)) {\n\t\t\treturn this._checkCompositeKeyRange(operationKey, snapshotKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key matches a range specification\n\t * @param {string} key - Key to check\n\t * @param {Object} range - Range specification\n\t * @returns {boolean} True if key is in range\n\t */\n\tkeyMatchesRange (key, range) {\n\t\tif (range.min !== undefined && range.max !== undefined) {\n\t\t\treturn key >= range.min && key <= range.max;\n\t\t}\n\n\t\tif (range.prefix !== undefined) {\n\t\t\treturn key.startsWith(range.prefix);\n\t\t}\n\n\t\tif (range.pattern !== undefined) {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(range.pattern);\n\n\t\t\t\treturn regex.test(key);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if key matches a query specification\n\t * @param {string} key - Key to check\n\t * @param {Object} queryInfo - Query specification\n\t * @returns {boolean} True if key matches query\n\t */\n\tkeyMatchesQuery (key, queryInfo) {\n\t\tif (queryInfo.type === \"range\") {\n\t\t\treturn this.keyMatchesRange(key, queryInfo);\n\t\t}\n\n\t\tif (queryInfo.type === \"prefix\") {\n\t\t\treturn key.startsWith(queryInfo.prefix || \"\");\n\t\t}\n\n\t\tif (queryInfo.type === \"pattern\") {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(queryInfo.pattern || \"\");\n\n\t\t\t\treturn regex.test(key);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (queryInfo.type === \"in\") {\n\t\t\treturn Array.isArray(queryInfo.values) && queryInfo.values.includes(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if key matches an index range\n\t * @param {string} key - Key to check\n\t * @param {Object} indexRange - Index range specification\n\t * @returns {boolean} True if key matches index range\n\t */\n\tkeyMatchesIndexRange (key, indexRange) {\n\t\tif (indexRange.fields && Array.isArray(indexRange.fields)) {\n\t\t\tfor (const field of indexRange.fields) {\n\t\t\t\tif (key.includes(field)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (indexRange.values) {\n\t\t\treturn this.keyMatchesRange(key, indexRange.values);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have a hierarchical relationship\n\t * Analyzes parent-child, sibling, and ancestor-descendant relationships\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have hierarchical relationship\n\t * @private\n\t */\n\t_hasHierarchicalKeyRelationship (key1, key2) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (key1.includes(sep) && key2.includes(sep)) {\n\t\t\t\tconst parts1 = key1.split(sep);\n\t\t\t\tconst parts2 = key2.split(sep);\n\n\t\t\t\tif (this._isParentChildRelationship(parts1, parts2) ||\n\t\t\t\t\tthis._isSiblingRelationship(parts1, parts2) ||\n\t\t\t\t\tthis._isAncestorDescendantRelationship(parts1, parts2)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn key1.startsWith(key2) || key2.startsWith(key1);\n\t}\n\n\t/**\n\t * Check if operation key and snapshot key have hierarchical relationship for snapshot range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if keys have hierarchical relationship\n\t * @private\n\t */\n\t_hasHierarchicalRelationship (operationKey, snapshotKey) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key falls within hierarchical range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key is in hierarchical range\n\t * @private\n\t */\n\t_checkHierarchicalRange (operationKey, snapshotKey, expectedValue) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\tconst opParts = operationKey.split(sep);\n\t\t\t\tconst snapParts = snapshotKey.split(sep);\n\n\t\t\t\tif (this._isParentChildRelationship(opParts, snapParts) ||\n\t\t\t\t\tthis._isSiblingRelationship(opParts, snapParts) ||\n\t\t\t\t\tthis._isCollectionMembership(opParts, snapParts, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have a parent-child relationship\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if there's a parent-child relationship\n\t * @private\n\t */\n\t_isParentChildRelationship (opParts, snapParts) {\n\t\tif (opParts.length > snapParts.length) {\n\t\t\tfor (let i = 0; i < snapParts.length; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (snapParts.length > opParts.length) {\n\t\t\tfor (let i = 0; i < opParts.length; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have a sibling relationship\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if there's a sibling relationship\n\t * @private\n\t */\n\t_isSiblingRelationship (opParts, snapParts) {\n\t\tif (opParts.length === snapParts.length && opParts.length > 1) {\n\t\t\tfor (let i = 0; i < opParts.length - 1; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn opParts[opParts.length - 1] !== snapParts[snapParts.length - 1];\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have an ancestor-descendant relationship\n\t * @param {string[]} parts1 - Parts from first key\n\t * @param {string[]} parts2 - Parts from second key\n\t * @returns {boolean} True if there's an ancestor-descendant relationship\n\t * @private\n\t */\n\t_isAncestorDescendantRelationship (parts1, parts2) {\n\t\tconst shorter = parts1.length < parts2.length ? parts1 : parts2;\n\t\tconst longer = parts1.length < parts2.length ? parts2 : parts1;\n\n\t\tif (shorter.length < longer.length) {\n\t\t\tfor (let i = 0; i < shorter.length; i++) {\n\t\t\t\tif (shorter[i] !== longer[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key parts indicate collection membership relative to snapshot\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key is collection member\n\t * @private\n\t */\n\t_isCollectionMembership (opParts, snapParts, expectedValue) {\n\t\tif (Array.isArray(expectedValue) ||\n\t\t\texpectedValue && typeof expectedValue === \"object\" && expectedValue.length !== undefined) {\n\t\t\treturn this._isParentChildRelationship(opParts, snapParts) ||\n\t\t\t\tthis._isSiblingRelationship(opParts, snapParts);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have semantic relationship based on their content meaning\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have semantic relationship\n\t * @private\n\t */\n\t_hasSemanticKeyRelationship (key1, key2) {\n\t\tconst semantics1 = this._extractSemanticIdentifiers(key1);\n\t\tconst semantics2 = this._extractSemanticIdentifiers(key2);\n\n\t\tfor (const sem1 of semantics1) {\n\t\t\tfor (const sem2 of semantics2) {\n\t\t\t\tif (this._areSemanticallySimilar(sem1, sem2)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._hasEntityRelationship(semantics1, semantics2);\n\t}\n\n\t/**\n\t * Check if operation key and snapshot key have semantic relationship for snapshot range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if keys have semantic relationship\n\t * @private\n\t */\n\t_hasSemanticRelationship (operationKey, snapshotKey) {\n\t\tconst semanticPrefixes = [\n\t\t\t\"user\", \"account\", \"profile\", \"session\",\n\t\t\t\"order\", \"product\", \"cart\", \"payment\",\n\t\t\t\"post\", \"comment\", \"thread\", \"message\",\n\t\t\t\"document\", \"file\", \"folder\", \"workspace\"\n\t\t];\n\n\t\tfor (const prefix of semanticPrefixes) {\n\t\t\tif (operationKey.toLowerCase().includes(prefix) &&\n\t\t\t\tsnapshotKey.toLowerCase().includes(prefix)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key falls within semantic range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if operation key is in semantic range\n\t * @private\n\t */\n\t_checkSemanticRange (operationKey, snapshotKey) {\n\t\tconst opSemantics = this._extractSemanticIdentifiers(operationKey);\n\t\tconst snapSemantics = this._extractSemanticIdentifiers(snapshotKey);\n\n\t\tfor (const opSemantic of opSemantics) {\n\t\t\tfor (const snapSemantic of snapSemantics) {\n\t\t\t\tif (this._areSemanticallySimilar(opSemantic, snapSemantic)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Extract semantic identifiers from a key string using pattern matching\n\t * @param {string} key - Key to extract semantic identifiers from\n\t * @returns {string[]} Array of semantic identifiers found in the key\n\t * @private\n\t */\n\t_extractSemanticIdentifiers (key) {\n\t\tconst cacheKey = `semantic:${key}`;\n\t\tif (this.semanticCache.has(cacheKey)) {\n\t\t\treturn this.semanticCache.get(cacheKey);\n\t\t}\n\n\t\tconst identifiers = [];\n\t\tconst patterns = [\n\t\t\t/(\\w+):(\\w+)/g, // entity:id\n\t\t\t/(\\w+)_(\\w+)/g, // entity_id\n\t\t\t/([a-z]+)([A-Z]\\w+)/g // entityId (camelCase)\n\t\t];\n\n\t\tfor (const pattern of patterns) {\n\t\t\tlet match;\n\t\t\twhile ((match = pattern.exec(key)) !== null) {\n\t\t\t\tidentifiers.push(match[1].toLowerCase());\n\t\t\t\tif (match[2]) {\n\t\t\t\t\tidentifiers.push(match[2].toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.semanticCache.set(cacheKey, identifiers);\n\n\t\treturn identifiers;\n\t}\n\n\t/**\n\t * Check if two semantic identifiers are similar\n\t * Handles singular/plural forms and semantic equivalence\n\t * @param {string} id1 - First identifier\n\t * @param {string} id2 - Second identifier\n\t * @returns {boolean} True if identifiers are semantically similar\n\t * @private\n\t */\n\t_areSemanticallySimilar (id1, id2) {\n\t\tif (id1 === id2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst singularPlural = [\n\t\t\t[\"user\", \"users\"], [\"account\", \"accounts\"], [\"profile\", \"profiles\"],\n\t\t\t[\"order\", \"orders\"], [\"product\", \"products\"], [\"item\", \"items\"],\n\t\t\t[\"post\", \"posts\"], [\"comment\", \"comments\"], [\"message\", \"messages\"],\n\t\t\t[\"file\", \"files\"], [\"document\", \"documents\"], [\"folder\", \"folders\"]\n\t\t];\n\n\t\tfor (const [singular, plural] of singularPlural) {\n\t\t\tif (id1 === singular && id2 === plural ||\n\t\t\t\tid1 === plural && id2 === singular) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two semantic identifier arrays have entity relationships\n\t * @param {string[]} semantics1 - Semantic identifiers from first key\n\t * @param {string[]} semantics2 - Semantic identifiers from second key\n\t * @returns {boolean} True if entities have defined relationships\n\t * @private\n\t */\n\t_hasEntityRelationship (semantics1, semantics2) {\n\t\tconst entityRelations = [\n\t\t\t[\"user\", \"profile\"], [\"user\", \"account\"], [\"user\", \"session\"],\n\t\t\t[\"profile\", \"account\"], [\"account\", \"session\"],\n\t\t\t[\"user\", \"order\"], [\"user\", \"cart\"], [\"user\", \"payment\"],\n\t\t\t[\"order\", \"product\"], [\"order\", \"payment\"], [\"cart\", \"product\"],\n\t\t\t[\"user\", \"post\"], [\"user\", \"comment\"], [\"user\", \"message\"],\n\t\t\t[\"post\", \"comment\"], [\"thread\", \"message\"], [\"document\", \"file\"],\n\t\t\t[\"user\", \"workspace\"], [\"workspace\", \"document\"], [\"workspace\", \"folder\"],\n\t\t\t[\"folder\", \"file\"], [\"document\", \"file\"]\n\t\t];\n\n\t\tfor (const [entity1, entity2] of entityRelations) {\n\t\t\tconst hasEntity1InBoth = semantics1.includes(entity1) && semantics2.includes(entity2);\n\t\t\tconst hasEntity2InBoth = semantics1.includes(entity2) && semantics2.includes(entity1);\n\n\t\t\tif (hasEntity1InBoth || hasEntity2InBoth) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have pattern-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have pattern-based relationship\n\t * @private\n\t */\n\t_hasPatternBasedKeyRelationship (key1, key2) {\n\t\tif (this._isPatternBasedSnapshot(key1)) {\n\t\t\treturn this._checkPatternBasedRange(key2, key1);\n\t\t}\n\n\t\tif (this._isPatternBasedSnapshot(key2)) {\n\t\t\treturn this._checkPatternBasedRange(key1, key2);\n\t\t}\n\n\t\treturn this._haveSimilarPatterns(key1, key2);\n\t}\n\n\t/**\n\t * Check if a snapshot key contains pattern-based wildcards or indicators\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key contains pattern-based elements\n\t * @private\n\t */\n\t_isPatternBasedSnapshot (snapshotKey) {\n\t\treturn snapshotKey.includes(\"*\") ||\n\t\t\tsnapshotKey.includes(\"?\") ||\n\t\t\tsnapshotKey.includes(\"[\") ||\n\t\t\tsnapshotKey.includes(\"{\") ||\n\t\t\tsnapshotKey.endsWith(\"_range\") ||\n\t\t\tsnapshotKey.endsWith(\"_pattern\");\n\t}\n\n\t/**\n\t * Check if operation key matches a pattern-based snapshot key range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Pattern-based snapshot key\n\t * @returns {boolean} True if operation key matches pattern\n\t * @private\n\t */\n\t_checkPatternBasedRange (operationKey, snapshotKey) {\n\t\tif (snapshotKey.includes(\"*\")) {\n\t\t\tconst pattern = snapshotKey.replace(/\\*/g, \".*\");\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${pattern}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\tconst prefix = snapshotKey.split(\"*\")[0];\n\n\t\t\t\treturn operationKey.startsWith(prefix);\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"?\")) {\n\t\t\tconst pattern = snapshotKey.replace(/\\?/g, \".\");\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${pattern}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"[\")) {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${snapshotKey}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"{\") && snapshotKey.includes(\"}\")) {\n\t\t\tconst beforeBrace = snapshotKey.substring(0, snapshotKey.indexOf(\"{\"));\n\t\t\tconst afterBrace = snapshotKey.substring(snapshotKey.indexOf(\"}\") + 1);\n\t\t\tconst choices = snapshotKey.substring(\n\t\t\t\tsnapshotKey.indexOf(\"{\") + 1,\n\t\t\t\tsnapshotKey.indexOf(\"}\")\n\t\t\t).split(\",\");\n\n\t\t\tfor (const choice of choices) {\n\t\t\t\tconst fullPattern = beforeBrace + choice.trim() + afterBrace;\n\t\t\t\tif (operationKey === fullPattern || operationKey.startsWith(fullPattern)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.endsWith(\"_range\") || snapshotKey.endsWith(\"_pattern\")) {\n\t\t\tconst baseKey = snapshotKey.replace(/_range$|_pattern$/, \"\");\n\n\t\t\treturn operationKey.startsWith(baseKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have similar structural patterns\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have similar patterns\n\t * @private\n\t */\n\t_haveSimilarPatterns (key1, key2) {\n\t\tconst pattern1 = this._extractKeyPattern(key1);\n\t\tconst pattern2 = this._extractKeyPattern(key2);\n\n\t\treturn this._patternsAreSimilar(pattern1, pattern2);\n\t}\n\n\t/**\n\t * Extract structural pattern from a key by normalizing variable components\n\t * @param {string} key - Key to extract pattern from\n\t * @returns {string} Normalized pattern string\n\t * @private\n\t */\n\t_extractKeyPattern (key) {\n\t\tconst cacheKey = `pattern:${key}`;\n\t\tif (this.patternCache.has(cacheKey)) {\n\t\t\treturn this.patternCache.get(cacheKey);\n\t\t}\n\n\t\tconst pattern = key\n\t\t\t.replace(/\\d+/g, \"#\") // Numbers become #\n\t\t\t.replace(/[a-f0-9]{8,}/g, \"&\") // Hashes/UUIDs become &\n\t\t\t.replace(/\\w{1,3}(?=:|_|-)/g, \"@\"); // Short prefixes become @\n\n\t\tthis.patternCache.set(cacheKey, pattern);\n\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Check if two patterns are similar based on similarity threshold\n\t * @param {string} pattern1 - First pattern to compare\n\t * @param {string} pattern2 - Second pattern to compare\n\t * @returns {boolean} True if patterns are similar (>70% similarity)\n\t * @private\n\t */\n\t_patternsAreSimilar (pattern1, pattern2) {\n\t\tif (pattern1 === pattern2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst similarity = this._calculatePatternSimilarity(pattern1, pattern2);\n\n\t\treturn similarity > 0.7;\n\t}\n\n\t/**\n\t * Calculate similarity score between two patterns using Levenshtein distance\n\t * @param {string} pattern1 - First pattern\n\t * @param {string} pattern2 - Second pattern\n\t * @returns {number} Similarity score between 0 and 1\n\t * @private\n\t */\n\t_calculatePatternSimilarity (pattern1, pattern2) {\n\t\tconst len1 = pattern1.length;\n\t\tconst len2 = pattern2.length;\n\t\tconst maxLen = Math.max(len1, len2);\n\n\t\tif (maxLen === 0) return 1;\n\n\t\tconst distance = this._levenshteinDistance(pattern1, pattern2);\n\n\t\treturn 1 - distance / maxLen;\n\t}\n\n\t/**\n\t * Calculate Levenshtein distance between two strings\n\t * @param {string} str1 - First string\n\t * @param {string} str2 - Second string\n\t * @returns {number} Edit distance between strings\n\t * @private\n\t */\n\t_levenshteinDistance (str1, str2) {\n\t\tconst matrix = [];\n\n\t\tfor (let i = 0; i <= str2.length; i++) {\n\t\t\tmatrix[i] = [i];\n\t\t}\n\n\t\tfor (let j = 0; j <= str1.length; j++) {\n\t\t\tmatrix[0][j] = j;\n\t\t}\n\n\t\tfor (let i = 1; i <= str2.length; i++) {\n\t\t\tfor (let j = 1; j <= str1.length; j++) {\n\t\t\t\tif (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n\t\t\t\t\tmatrix[i][j] = matrix[i - 1][j - 1];\n\t\t\t\t} else {\n\t\t\t\t\tmatrix[i][j] = Math.min(\n\t\t\t\t\t\tmatrix[i - 1][j - 1] + 1, // substitution\n\t\t\t\t\t\tmatrix[i][j - 1] + 1, // insertion\n\t\t\t\t\t\tmatrix[i - 1][j] + 1 // deletion\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn matrix[str2.length][str1.length];\n\t}\n\n\t/**\n\t * Check if two keys have temporal relationship based on time-related components\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have temporal relationship\n\t * @private\n\t */\n\t_hasTemporalKeyRelationship (key1, key2) {\n\t\tif (this._isTemporalSnapshot(key1) && this._isTemporalSnapshot(key2)) {\n\t\t\tconst temporal1 = this._extractTemporalComponents(key1);\n\t\t\tconst temporal2 = this._extractTemporalComponents(key2);\n\n\t\t\treturn this._haveTemporalOverlap(temporal1, temporal2);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a snapshot key contains temporal/time-related keywords\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key contains temporal indicators\n\t * @private\n\t */\n\t_isTemporalSnapshot (snapshotKey) {\n\t\tconst temporalKeywords = [\n\t\t\t\"timestamp\", \"time\", \"date\", \"created\", \"updated\", \"modified\",\n\t\t\t\"datetime\", \"ts\", \"epoch\", \"iso\", \"utc\", \"log\", \"event\", \"history\"\n\t\t];\n\n\t\treturn temporalKeywords.some(keyword =>\n\t\t\tsnapshotKey.toLowerCase().includes(keyword)\n\t\t);\n\t}\n\n\t/**\n\t * Check if operation key falls within temporal range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Temporal snapshot key\n\t * @returns {boolean} True if operation key is in temporal range\n\t * @private\n\t */\n\t_checkTemporalRange (operationKey, snapshotKey) {\n\t\tif (this._isTemporalSnapshot(operationKey)) {\n\t\t\tconst opTemporal = this._extractTemporalComponents(operationKey);\n\t\t\tconst snapTemporal = this._extractTemporalComponents(snapshotKey);\n\n\t\t\treturn this._haveTemporalOverlap(opTemporal, snapTemporal);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Extract temporal components from a key using regex patterns\n\t * @param {string} key - Key to extract temporal components from\n\t * @returns {Object} Object with temporal component flags\n\t * @private\n\t */\n\t_extractTemporalComponents (key) {\n\t\tconst components = {\n\t\t\thasDate: false,\n\t\t\thasTime: false,\n\t\t\thasTimestamp: false,\n\t\t\thasEpoch: false\n\t\t};\n\n\t\tif ((/\\d{4}-\\d{2}-\\d{2}/).test(key)) components.hasDate = true;\n\t\tif ((/\\d{2}:\\d{2}:\\d{2}/).test(key)) components.hasTime = true;\n\t\tif ((/\\d{13}/).test(key)) components.hasTimestamp = true;\n\t\tif ((/\\d{10}/).test(key)) components.hasEpoch = true;\n\n\t\treturn components;\n\t}\n\n\t/**\n\t * Check if two temporal component objects have overlapping temporal elements\n\t * @param {Object} opTemporal - Temporal components from operation key\n\t * @param {Object} snapTemporal - Temporal components from snapshot key\n\t * @returns {boolean} True if temporal components overlap\n\t * @private\n\t */\n\t_haveTemporalOverlap (opTemporal, snapTemporal) {\n\t\treturn opTemporal.hasDate && snapTemporal.hasDate ||\n\t\t\topTemporal.hasTime && snapTemporal.hasTime ||\n\t\t\topTemporal.hasTimestamp && snapTemporal.hasTimestamp ||\n\t\t\topTemporal.hasEpoch && snapTemporal.hasEpoch;\n\t}\n\n\t/**\n\t * Check if two keys have composite key relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have composite key relationship\n\t * @private\n\t */\n\t_hasCompositeKeyRelationship (key1, key2) {\n\t\treturn this._checkCompositeKeyRange(key1, key2) ||\n\t\t\tthis._checkCompositeKeyRange(key2, key1);\n\t}\n\n\t/**\n\t * Check if a snapshot key represents a composite key structure\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key is composite key structure\n\t * @private\n\t */\n\t_isCompositeKeySnapshot (snapshotKey) {\n\t\treturn snapshotKey.includes(\":\") ||\n\t\t\tsnapshotKey.includes(\"#\") ||\n\t\t\tsnapshotKey.includes(\"|\") ||\n\t\t\tsnapshotKey.includes(\"@\") ||\n\t\t\tsnapshotKey.split(\"_\").length > 2 ||\n\t\t\tsnapshotKey.split(\"-\").length > 2;\n\t}\n\n\t/**\n\t * Check if operation key falls within composite key range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Composite snapshot key\n\t * @returns {boolean} True if operation key is in composite key range\n\t * @private\n\t */\n\t_checkCompositeKeyRange (operationKey, snapshotKey) {\n\t\tconst separators = [\":\", \"#\", \"|\", \"@\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\tconst opParts = operationKey.split(sep);\n\t\t\t\tconst snapParts = snapshotKey.split(sep);\n\n\t\t\t\tif (this._hasCompositeKeyOverlap(opParts, snapParts)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key parts overlap with snapshot key parts in composite key\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if key parts have composite overlap\n\t * @private\n\t */\n\t_hasCompositeKeyOverlap (opParts, snapParts) {\n\t\tconst minLength = Math.min(opParts.length, snapParts.length);\n\n\t\tfor (let i = 1; i <= minLength; i++) {\n\t\t\tlet allMatch = true;\n\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\tif (opParts[j] !== snapParts[j]) {\n\t\t\t\t\tallMatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allMatch) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have index-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have index relationship\n\t * @private\n\t */\n\t_hasIndexKeyRelationship (key1, key2) {\n\t\tconst isIndex1 = this._isIndexKey(key1);\n\t\tconst isIndex2 = this._isIndexKey(key2);\n\n\t\tif (isIndex1 || isIndex2) {\n\t\t\tconst base1 = this._extractBaseKeyFromIndex(key1);\n\t\t\tconst base2 = this._extractBaseKeyFromIndex(key2);\n\n\t\t\treturn base1 === base2 ||\n\t\t\t\tkey1.startsWith(base2) ||\n\t\t\t\tkey2.startsWith(base1) ||\n\t\t\t\tbase1.startsWith(base2) ||\n\t\t\t\tbase2.startsWith(base1);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key represents an index key structure\n\t * @param {string} key - Key to check\n\t * @returns {boolean} True if key is an index key\n\t * @private\n\t */\n\t_isIndexKey (key) {\n\t\treturn key.includes(\"_index\") ||\n\t\t\tkey.includes(\"_idx\") ||\n\t\t\tkey.startsWith(\"idx_\") ||\n\t\t\tkey.includes(\"_key\") ||\n\t\t\tkey.includes(\"_lookup\");\n\t}\n\n\t/**\n\t * Extract base key from an index key by removing index-specific suffixes\n\t * @param {string} indexKey - Index key to extract base from\n\t * @returns {string} Base key without index identifiers\n\t * @private\n\t */\n\t_extractBaseKeyFromIndex (indexKey) {\n\t\treturn indexKey\n\t\t\t.replace(/_index.*$/, \"\")\n\t\t\t.replace(/_idx.*$/, \"\")\n\t\t\t.replace(/^idx_/, \"\")\n\t\t\t.replace(/_key.*$/, \"\")\n\t\t\t.replace(/_lookup.*$/, \"\");\n\t}\n\n\t/**\n\t * Check if a snapshot key represents an index-based query\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if snapshot is index-based\n\t * @private\n\t */\n\t_isIndexBasedSnapshot (transaction, snapshotKey) {\n\t\treturn snapshotKey.includes(\"_index\") ||\n\t\t\tsnapshotKey.includes(\"_idx\") ||\n\t\t\tsnapshotKey.startsWith(\"idx_\") ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:index_range`);\n\t}\n\n\t/**\n\t * Check if operation key falls within index-based range of snapshot key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Index-based snapshot key\n\t * @returns {boolean} True if operation key is in index range\n\t * @private\n\t */\n\t_checkIndexBasedRange (transaction, operationKey, snapshotKey) {\n\t\tconst indexRange = transaction.snapshot.get(`${snapshotKey}:index_range`);\n\t\tif (indexRange) {\n\t\t\treturn this.keyMatchesIndexRange(operationKey, indexRange);\n\t\t}\n\n\t\tif (snapshotKey.includes(\"_index\") || snapshotKey.includes(\"_idx\")) {\n\t\t\tconst baseKey = snapshotKey.replace(/_index.*$|_idx.*$/, \"\");\n\n\t\t\treturn operationKey.startsWith(baseKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have collection-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have collection relationship\n\t * @private\n\t */\n\t_hasCollectionKeyRelationship (key1, key2) {\n\t\tconst isCollection1 = this._isCollectionKey(key1);\n\t\tconst isCollection2 = this._isCollectionKey(key2);\n\n\t\tif (isCollection1 || isCollection2) {\n\t\t\tconst base1 = this._extractCollectionBase(key1);\n\t\t\tconst base2 = this._extractCollectionBase(key2);\n\n\t\t\treturn base1 === base2 ||\n\t\t\t\tkey1.startsWith(base2) ||\n\t\t\t\tkey2.startsWith(base1);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key represents a collection structure\n\t * @param {string} key - Key to check\n\t * @returns {boolean} True if key is a collection key\n\t * @private\n\t */\n\t_isCollectionKey (key) {\n\t\tconst collectionIndicators = [\n\t\t\t\"_list\", \"_array\", \"_set\", \"_collection\",\n\t\t\t\"_items\", \"_elements\", \"_members\", \"_entries\"\n\t\t];\n\n\t\treturn collectionIndicators.some(indicator => key.includes(indicator));\n\t}\n\n\t/**\n\t * Extract base key from a collection key by removing collection-specific suffixes\n\t * @param {string} collectionKey - Collection key to extract base from\n\t * @returns {string} Base key without collection identifiers\n\t * @private\n\t */\n\t_extractCollectionBase (collectionKey) {\n\t\tconst indicators = [\"_list\", \"_array\", \"_set\", \"_collection\", \"_items\", \"_elements\", \"_members\", \"_entries\"];\n\n\t\tfor (const indicator of indicators) {\n\t\t\tif (collectionKey.includes(indicator)) {\n\t\t\t\treturn collectionKey.replace(indicator, \"\");\n\t\t\t}\n\t\t}\n\n\t\treturn collectionKey;\n\t}\n\n\t/**\n\t * Check if two keys have functional dependency relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have functional dependency\n\t * @private\n\t */\n\t_hasFunctionalDependency (key1, key2) {\n\t\tconst dependencies = [\n\t\t\t[\"user_id\", \"user_email\"], [\"user_id\", \"user_profile\"],\n\t\t\t[\"account_id\", \"user_id\"], [\"session_id\", \"user_id\"],\n\t\t\t[\"order_id\", \"user_id\"], [\"order_id\", \"order_total\"],\n\t\t\t[\"payment_id\", \"order_id\"], [\"shipping_id\", \"order_id\"],\n\t\t\t[\"post_id\", \"user_id\"], [\"comment_id\", \"post_id\"],\n\t\t\t[\"message_id\", \"thread_id\"], [\"file_id\", \"folder_id\"],\n\t\t\t[\"document_id\", \"workspace_id\"], [\"task_id\", \"project_id\"]\n\t\t];\n\n\t\tconst norm1 = this._normalizeKeyForDependency(key1);\n\t\tconst norm2 = this._normalizeKeyForDependency(key2);\n\n\t\tfor (const [dep1, dep2] of dependencies) {\n\t\t\tif (norm1.includes(dep1) && norm2.includes(dep2) ||\n\t\t\t\tnorm1.includes(dep2) && norm2.includes(dep1)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Normalize a key for functional dependency comparison by converting to standard format\n\t * @param {string} key - Key to normalize\n\t * @returns {string} Normalized key in lowercase with underscores\n\t * @private\n\t */\n\t_normalizeKeyForDependency (key) {\n\t\treturn key.toLowerCase()\n\t\t\t.replace(/[:\\-/.]/g, \"_\")\n\t\t\t.replace(/([a-z])([A-Z])/g, \"$1_$2\")\n\t\t\t.toLowerCase();\n\t}\n\n\t/**\n\t * Check if transaction snapshot has explicit range metadata for a key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if explicit range metadata exists\n\t * @private\n\t */\n\t_hasExplicitRangeMetadata (transaction, snapshotKey) {\n\t\treturn transaction.snapshot.has(`${snapshotKey}:range`) ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:query`) ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:predicate`);\n\t}\n\n\t/**\n\t * Check if operation key matches explicit range metadata for snapshot key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot with explicit range\n\t * @returns {boolean} True if operation key matches explicit range\n\t * @private\n\t */\n\t_checkExplicitRange (transaction, operationKey, snapshotKey) {\n\t\tconst rangeInfo = transaction.snapshot.get(`${snapshotKey}:range`);\n\t\tif (rangeInfo && typeof rangeInfo === \"object\") {\n\t\t\treturn this.keyMatchesRange(operationKey, rangeInfo);\n\t\t}\n\n\t\tconst queryInfo = transaction.snapshot.get(`${snapshotKey}:query`);\n\t\tif (queryInfo) {\n\t\t\treturn this.keyMatchesQuery(operationKey, queryInfo);\n\t\t}\n\n\t\tconst predicateInfo = transaction.snapshot.get(`${snapshotKey}:predicate`);\n\t\tif (predicateInfo && typeof predicateInfo === \"function\") {\n\t\t\ttry {\n\t\t\t\treturn predicateInfo(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Clear internal caches\n\t */\n\tclearCaches () {\n\t\tthis.patternCache.clear();\n\t\tthis.semanticCache.clear();\n\t}\n}\n","import { IsolationLevels } from \"./constants.js\";\nimport { KeyRelationshipAnalyzer } from \"./key-relationship-analyzer.js\";\n\n/**\n * Deadlock detector using multiple detection strategies\n */\nexport class DeadlockDetector {\n\tconstructor (lockManager) {\n\t\tthis.lockManager = lockManager;\n\t\tthis.keyAnalyzer = new KeyRelationshipAnalyzer();\n\t}\n\n\t/**\n\t * Check for deadlocks using multiple detection strategies\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tdetectDeadlocks (activeTransactions, options = {}) {\n\t\tconst opts = {\n\t\t\tuseLockGraph: true,\n\t\t\tuseResourceGraph: true,\n\t\t\tuseTimeoutDetection: true,\n\t\t\ttimeoutThreshold: 10000,\n\t\t\t...options\n\t\t};\n\n\t\tconst results = {\n\t\t\tdeadlocks: [],\n\t\t\tsuspectedDeadlocks: [],\n\t\t\ttimeoutVictims: [],\n\t\t\twaitForGraph: null,\n\t\t\tresourceGraph: null\n\t\t};\n\n\t\tif (activeTransactions.length < 2) {\n\t\t\treturn results;\n\t\t}\n\n\t\t// 1. Lock-based wait-for graph deadlock detection\n\t\tif (opts.useLockGraph) {\n\t\t\tconst lockDeadlocks = this._detectLockBasedDeadlocks(activeTransactions);\n\t\t\tresults.deadlocks.push(...lockDeadlocks.cycles);\n\t\t\tresults.waitForGraph = lockDeadlocks.graph;\n\t\t}\n\n\t\t// 2. Resource allocation graph deadlock detection\n\t\tif (opts.useResourceGraph) {\n\t\t\tconst resourceDeadlocks = this._detectResourceDeadlocks(activeTransactions);\n\t\t\tresults.deadlocks.push(...resourceDeadlocks.cycles);\n\t\t\tresults.resourceGraph = resourceDeadlocks.graph;\n\t\t}\n\n\t\t// 3. Isolation-level based deadlock detection\n\t\tconst isolationDeadlocks = this._detectIsolationDeadlocks(activeTransactions);\n\t\tresults.suspectedDeadlocks.push(...isolationDeadlocks);\n\n\t\t// 4. Timeout-based deadlock detection (fallback)\n\t\tif (opts.useTimeoutDetection) {\n\t\t\tconst timeoutVictims = this._detectTimeoutVictims(activeTransactions, opts.timeoutThreshold);\n\t\t\tresults.timeoutVictims.push(...timeoutVictims);\n\t\t}\n\n\t\t// Remove duplicates and merge results\n\t\tresults.deadlocks = this._deduplicateDeadlocks(results.deadlocks);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Detect deadlocks using lock-based wait-for graph\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object} Lock-based deadlock detection results\n\t * @private\n\t */\n\t_detectLockBasedDeadlocks (activeTransactions) {\n\t\tconst waitForGraph = this._buildLockWaitForGraph(activeTransactions);\n\t\tconst cycles = this._detectCyclesInGraph(waitForGraph);\n\n\t\treturn {\n\t\t\tgraph: waitForGraph,\n\t\t\tcycles: cycles.map(cycle => ({\n\t\t\t\ttype: \"lock\",\n\t\t\t\ttransactions: cycle,\n\t\t\t\tresources: this._getResourcesInvolvedInCycle(cycle, activeTransactions)\n\t\t\t}))\n\t\t};\n\t}\n\n\t/**\n\t * Build wait-for graph based on lock dependencies\n\t * @param {Transaction[]} transactions - Active transactions\n\t * @returns {Map<string, Set<string>>} Wait-for graph\n\t * @private\n\t */\n\t_buildLockWaitForGraph (transactions) {\n\t\tconst graph = new Map();\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\t// Initialize graph nodes\n\t\tfor (const tx of transactions) {\n\t\t\tgraph.set(tx.id, new Set());\n\t\t}\n\n\t\t// Build edges based on lock conflicts\n\t\tfor (const lockInfo of lockStats.recordsLocked) {\n\t\t\tconst { recordKey, holders } = lockInfo;\n\n\t\t\t// Find transactions waiting for this lock\n\t\t\tconst waitingTransactions = this._findTransactionsWaitingForLock(recordKey, transactions);\n\n\t\t\t// Create edges from waiting transactions to lock holders\n\t\t\tfor (const waitingTx of waitingTransactions) {\n\t\t\t\tfor (const holderId of holders) {\n\t\t\t\t\tif (waitingTx !== holderId && graph.has(waitingTx) && graph.has(holderId)) {\n\t\t\t\t\t\tgraph.get(waitingTx).add(holderId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Find transactions that are waiting for a specific lock\n\t * @param {string} recordKey - Record key\n\t * @param {Transaction[]} transactions - All transactions to check\n\t * @returns {string[]} Transaction IDs waiting for the lock\n\t * @private\n\t */\n\t_findTransactionsWaitingForLock (recordKey, transactions) {\n\t\tconst waiting = [];\n\n\t\tfor (const tx of transactions) {\n\t\t\tconst hasOperationOnKey = tx.writeSet.has(recordKey) || tx.readSet.has(recordKey);\n\t\t\tconst holdsLock = this.lockManager.holdsLocks(tx.id);\n\n\t\t\tif (hasOperationOnKey && !holdsLock) {\n\t\t\t\twaiting.push(tx.id);\n\t\t\t}\n\t\t}\n\n\t\treturn waiting;\n\t}\n\n\t/**\n\t * Detect deadlocks using resource allocation graph\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object} Resource-based deadlock detection results\n\t * @private\n\t */\n\t_detectResourceDeadlocks (activeTransactions) {\n\t\tconst resourceGraph = this._buildResourceAllocationGraph(activeTransactions);\n\t\tconst cycles = this._detectCyclesInResourceGraph(resourceGraph);\n\n\t\treturn {\n\t\t\tgraph: resourceGraph,\n\t\t\tcycles: cycles.map(cycle => ({\n\t\t\t\ttype: \"resource\",\n\t\t\t\ttransactions: cycle.transactions,\n\t\t\t\tresources: cycle.resources\n\t\t\t}))\n\t\t};\n\t}\n\n\t/**\n\t * Build resource allocation graph\n\t * @param {Transaction[]} transactions - Active transactions\n\t * @returns {Object} Resource allocation graph\n\t * @private\n\t */\n\t_buildResourceAllocationGraph (transactions) {\n\t\tconst graph = {\n\t\t\ttransactions: new Map(), // tx -> Set<resources>\n\t\t\tresources: new Map(), // resource -> Set<tx>\n\t\t\twaiting: new Map() // tx -> Set<resources waiting for>\n\t\t};\n\n\t\t// Initialize\n\t\tfor (const tx of transactions) {\n\t\t\tgraph.transactions.set(tx.id, new Set());\n\t\t\tgraph.waiting.set(tx.id, new Set());\n\t\t}\n\n\t\t// Build allocation and waiting relationships\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\tfor (const lockInfo of lockStats.recordsLocked) {\n\t\t\tconst { recordKey, holders } = lockInfo;\n\n\t\t\tif (!graph.resources.has(recordKey)) {\n\t\t\t\tgraph.resources.set(recordKey, new Set());\n\t\t\t}\n\n\t\t\t// Record allocations\n\t\t\tfor (const holderId of holders) {\n\t\t\t\tif (graph.transactions.has(holderId)) {\n\t\t\t\t\tgraph.transactions.get(holderId).add(recordKey);\n\t\t\t\t\tgraph.resources.get(recordKey).add(holderId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Record waiting relationships\n\t\t\tconst waitingTx = this._findTransactionsWaitingForLock(recordKey, transactions);\n\t\t\tfor (const txId of waitingTx) {\n\t\t\t\tif (graph.waiting.has(txId)) {\n\t\t\t\t\tgraph.waiting.get(txId).add(recordKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Detect cycles in a wait-for graph\n\t * @param {Map<string, Set<string>>} graph - Wait-for graph\n\t * @returns {string[][]} Array of cycles (each cycle is array of transaction IDs)\n\t * @private\n\t */\n\t_detectCyclesInGraph (graph) {\n\t\tconst visited = new Set();\n\t\tconst recursionStack = new Set();\n\t\tconst cycles = [];\n\n\t\tconst dfs = (node, path) => {\n\t\t\tif (recursionStack.has(node)) {\n\t\t\t\t// Found a cycle\n\t\t\t\tconst cycleStart = path.indexOf(node);\n\t\t\t\tconst cycle = path.slice(cycleStart);\n\t\t\t\tcycles.push([...cycle, node]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (visited.has(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvisited.add(node);\n\t\t\trecursionStack.add(node);\n\t\t\tpath.push(node);\n\n\t\t\tconst neighbors = graph.get(node) || new Set();\n\t\t\tfor (const neighbor of neighbors) {\n\t\t\t\tdfs(neighbor, [...path]);\n\t\t\t}\n\n\t\t\trecursionStack.delete(node);\n\t\t};\n\n\t\t// Start DFS from each unvisited node\n\t\tfor (const node of graph.keys()) {\n\t\t\tif (!visited.has(node)) {\n\t\t\t\tdfs(node, []);\n\t\t\t}\n\t\t}\n\n\t\treturn cycles;\n\t}\n\n\t/**\n\t * Detect cycles in resource allocation graph\n\t * @param {Object} resourceGraph - Resource allocation graph\n\t * @returns {Object[]} Array of resource-based cycles\n\t * @private\n\t */\n\t_detectCyclesInResourceGraph (resourceGraph) {\n\t\tconst cycles = [];\n\n\t\t// Convert resource graph to wait-for graph\n\t\tconst waitForGraph = new Map();\n\n\t\tfor (const [txId] of resourceGraph.transactions) {\n\t\t\twaitForGraph.set(txId, new Set());\n\t\t}\n\n\t\t// Build wait-for relationships\n\t\tfor (const [waitingTx, wantedResources] of resourceGraph.waiting) {\n\t\t\tfor (const resource of wantedResources) {\n\t\t\t\tconst holders = resourceGraph.resources.get(resource) || new Set();\n\t\t\t\tfor (const holdingTx of holders) {\n\t\t\t\t\tif (waitingTx !== holdingTx) {\n\t\t\t\t\t\twaitForGraph.get(waitingTx).add(holdingTx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Detect cycles in the converted graph\n\t\tconst graphCycles = this._detectCyclesInGraph(waitForGraph);\n\n\t\t// Convert back to resource cycles\n\t\tfor (const cycle of graphCycles) {\n\t\t\tconst resources = this._getResourcesInvolvedInCycle(cycle,\n\t\t\t\tArray.from(resourceGraph.transactions.keys()).map(id => ({ id })));\n\t\t\tcycles.push({\n\t\t\t\ttransactions: cycle,\n\t\t\t\tresources: Array.from(resources)\n\t\t\t});\n\t\t}\n\n\t\treturn cycles;\n\t}\n\n\t/**\n\t * Get resources involved in a deadlock cycle\n\t * @param {string[]} cycle - Array of transaction IDs in cycle\n\t * @param {Transaction[]|Object[]} transactions - Transaction objects or objects with id\n\t * @returns {Set<string>} Set of resource keys involved\n\t * @private\n\t */\n\t_getResourcesInvolvedInCycle (cycle, transactions) {\n\t\tconst resources = new Set();\n\n\t\tfor (const txId of cycle) {\n\t\t\tconst tx = transactions.find(t => t.id === txId);\n\t\t\tif (tx && tx.writeSet && tx.readSet) {\n\t\t\t\tfor (const key of tx.writeSet) {\n\t\t\t\t\tresources.add(key);\n\t\t\t\t}\n\t\t\t\tfor (const key of tx.readSet) {\n\t\t\t\t\tresources.add(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn resources;\n\t}\n\n\t/**\n\t * Detect isolation-level based deadlocks\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object[]} Array of suspected isolation deadlocks\n\t * @private\n\t */\n\t_detectIsolationDeadlocks (activeTransactions) {\n\t\tconst suspectedDeadlocks = [];\n\n\t\tfor (let i = 0; i < activeTransactions.length; i++) {\n\t\t\tfor (let j = i + 1; j < activeTransactions.length; j++) {\n\t\t\t\tconst tx1 = activeTransactions[i];\n\t\t\t\tconst tx2 = activeTransactions[j];\n\n\t\t\t\tif (this._hasIsolationConflict(tx1, tx2)) {\n\t\t\t\t\tsuspectedDeadlocks.push({\n\t\t\t\t\t\ttype: \"isolation\",\n\t\t\t\t\t\ttransactions: [tx1.id, tx2.id],\n\t\t\t\t\t\tconflict: this._getIsolationConflictType(tx1, tx2)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn suspectedDeadlocks;\n\t}\n\n\t/**\n\t * Check if two transactions have isolation conflicts\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if isolation conflict exists\n\t * @private\n\t */\n\t_hasIsolationConflict (tx1, tx2) {\n\t\tif (tx1.isolationLevel >= IsolationLevels.REPEATABLE_READ ||\n\t\t\ttx2.isolationLevel >= IsolationLevels.REPEATABLE_READ) {\n\n\t\t\tconst tx1ReadsWhatTx2Writes = this._readsOtherWrites(tx1, tx2);\n\t\t\tconst tx2ReadsWhatTx1Writes = this._readsOtherWrites(tx2, tx1);\n\n\t\t\treturn tx1ReadsWhatTx2Writes || tx2ReadsWhatTx1Writes;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get the type of isolation conflict between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {string} Conflict type description\n\t * @private\n\t */\n\t_getIsolationConflictType (tx1, tx2) {\n\t\tif (this._readsOtherWrites(tx1, tx2) && this._readsOtherWrites(tx2, tx1)) {\n\t\t\treturn \"bidirectional-dependency\";\n\t\t} else if (this._readsOtherWrites(tx1, tx2)) {\n\t\t\treturn \"tx1-depends-on-tx2\";\n\t\t} else if (this._readsOtherWrites(tx2, tx1)) {\n\t\t\treturn \"tx2-depends-on-tx1\";\n\t\t}\n\n\t\treturn \"unknown\";\n\t}\n\n\t/**\n\t * Check if one transaction reads what another writes\n\t * @param {Transaction} reader - Reading transaction\n\t * @param {Transaction} writer - Writing transaction\n\t * @returns {boolean} True if dependency exists\n\t * @private\n\t */\n\t_readsOtherWrites (reader, writer) {\n\t\tfor (const readKey of reader.readSet) {\n\t\t\tif (writer.writeSet.has(readKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Detect timeout-based deadlock victims\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @param {number} timeoutThreshold - Timeout threshold in milliseconds\n\t * @returns {string[]} Transaction IDs that have timed out\n\t * @private\n\t */\n\t_detectTimeoutVictims (activeTransactions, timeoutThreshold) {\n\t\tconst victims = [];\n\n\t\tfor (const transaction of activeTransactions) {\n\t\t\tconst duration = transaction.getDuration();\n\t\t\tif (duration !== null && duration > timeoutThreshold) {\n\t\t\t\tvictims.push(transaction.id);\n\t\t\t}\n\t\t}\n\n\t\treturn victims;\n\t}\n\n\t/**\n\t * Remove duplicate deadlocks from results\n\t * @param {Object[]} deadlocks - Array of deadlock objects\n\t * @returns {Object[]} Deduplicated deadlocks\n\t * @private\n\t */\n\t_deduplicateDeadlocks (deadlocks) {\n\t\tconst seen = new Set();\n\t\tconst unique = [];\n\n\t\tfor (const deadlock of deadlocks) {\n\t\t\tconst signature = this._createDeadlockSignature(deadlock);\n\n\t\t\tif (!seen.has(signature)) {\n\t\t\t\tseen.add(signature);\n\t\t\t\tunique.push(deadlock);\n\t\t\t}\n\t\t}\n\n\t\treturn unique;\n\t}\n\n\t/**\n\t * Create a normalized signature for a deadlock\n\t * @param {Object} deadlock - Deadlock object\n\t * @returns {string} Normalized signature\n\t * @private\n\t */\n\t_createDeadlockSignature (deadlock) {\n\t\tconst sortedTransactions = [...deadlock.transactions].sort();\n\t\tconst sortedResources = deadlock.resources ? [...deadlock.resources].sort() : [];\n\n\t\treturn `${deadlock.type}:${sortedTransactions.join(\",\")}:${sortedResources.join(\",\")}`;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { IsolationLevels } from \"./constants.js\";\nimport { KeyRelationshipAnalyzer } from \"./key-relationship-analyzer.js\";\n\n/**\n * Validator for transaction isolation levels and conflict detection\n */\nexport class IsolationValidator {\n\tconstructor () {\n\t\tthis.keyAnalyzer = new KeyRelationshipAnalyzer();\n\t}\n\n\t/**\n\t * Validate isolation level requirements for a transaction\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All active transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t */\n\tvalidateIsolation (transaction, allTransactions) {\n\t\tswitch (transaction.isolationLevel) {\n\t\t\tcase IsolationLevels.READ_UNCOMMITTED:\n\t\t\t\t// No validation needed - allows dirty reads\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.READ_COMMITTED:\n\t\t\t\tthis._validateReadCommitted(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.REPEATABLE_READ:\n\t\t\t\tthis._validateRepeatableRead(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.SERIALIZABLE:\n\t\t\t\tthis._validateSerializable(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Unknown isolation level: ${transaction.isolationLevel}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"isolation\"\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Validate READ_COMMITTED isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateReadCommitted (transaction, allTransactions) {\n\t\tfor (const writeKey of transaction.writeSet) {\n\t\t\tconst conflictingTransactions = this._findConflictingWrites(transaction.id, writeKey, allTransactions);\n\t\t\tif (conflictingTransactions.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Write conflict detected on key '${writeKey}' with transactions: ${conflictingTransactions.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"write-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate REPEATABLE_READ isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateRepeatableRead (transaction, allTransactions) {\n\t\t// First validate READ_COMMITTED requirements\n\t\tthis._validateReadCommitted(transaction, allTransactions);\n\n\t\t// Check for repeatable read violations\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tif (this._hasReadSetConflict(transaction, readKey, allTransactions)) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Repeatable read violation: key '${readKey}' was modified by another transaction`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"repeatable-read-violation\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for phantom reads in range queries\n\t\tif (transaction.snapshot.size > 0) {\n\t\t\tfor (const [snapshotKey, snapshotValue] of transaction.snapshot) {\n\t\t\t\tif (this._hasSnapshotConflict(transaction, snapshotKey, snapshotValue, allTransactions)) {\n\t\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t\t`Phantom read detected: snapshot inconsistency for key '${snapshotKey}'`,\n\t\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\t\"phantom-read\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate SERIALIZABLE isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateSerializable (transaction, allTransactions) {\n\t\t// First validate REPEATABLE_READ requirements\n\t\tthis._validateRepeatableRead(transaction, allTransactions);\n\n\t\t// Check for read-write conflicts\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tconst conflictingWrites = this._findConflictingWritesToRead(transaction, readKey, allTransactions);\n\t\t\tif (conflictingWrites.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Serialization conflict: key '${readKey}' was written by concurrent transactions: ${conflictingWrites.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"serialization-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for write-read conflicts\n\t\tfor (const writeKey of transaction.writeSet) {\n\t\t\tconst conflictingReads = this._findConflictingReadsToWrite(transaction, writeKey, allTransactions);\n\t\t\tif (conflictingReads.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Serialization conflict: key '${writeKey}' was read by concurrent transactions: ${conflictingReads.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"serialization-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Find transactions that have conflicting writes to the same key\n\t * @param {string} excludeTransactionId - Transaction ID to exclude from search\n\t * @param {string} key - Key to check for conflicts\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingWrites (excludeTransactionId, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, transaction] of allTransactions) {\n\t\t\tif (txId !== excludeTransactionId &&\n\t\t\t\ttransaction.isActive() &&\n\t\t\t\ttransaction.writeSet.has(key)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Find transactions that wrote to a key this transaction read\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was read\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingWritesToRead (transaction, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\totherTx.writeSet.has(key) &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Find transactions that read a key this transaction wrote\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was written\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingReadsToWrite (transaction, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\totherTx.readSet.has(key) &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Check if a read key has conflicts with other transactions\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was read\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if conflict detected\n\t * @private\n\t */\n\t_hasReadSetConflict (transaction, key, allTransactions) {\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isCommitted() &&\n\t\t\t\totherTx.writeSet.has(key) &&\n\t\t\t\totherTx.startTime > transaction.startTime &&\n\t\t\t\totherTx.endTime < new Date()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if snapshot has conflicts indicating phantom reads\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if conflict detected\n\t * @private\n\t */\n\t_hasSnapshotConflict (transaction, key, expectedValue, allTransactions) {\n\t\t// Check if any other transaction modified this specific key\n\t\tif (this._hasReadSetConflict(transaction, key, allTransactions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for phantom reads in range-based operations\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id && this._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tif (this._hasPhantomConflict(transaction, otherTx, key, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for serialization anomalies specific to snapshots\n\t\tif (this._hasSerializationAnomalyInSnapshot(transaction, key, allTransactions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if another transaction creates phantom reads for this transaction's snapshot\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {Transaction} otherTransaction - Other concurrent transaction\n\t * @param {string} key - Snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if phantom conflict detected\n\t * @private\n\t */\n\t_hasPhantomConflict (transaction, otherTransaction, key, expectedValue) {\n\t\tfor (const operation of otherTransaction.operations) {\n\t\t\tif (operation.type !== \"read\") {\n\t\t\t\tif (operation.key === key) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this.keyAnalyzer.isKeyInSnapshotRange(transaction, operation.key, key, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for serialization anomalies in snapshot data\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {string} key - Snapshot key\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if serialization anomaly detected\n\t * @private\n\t */\n\t_hasSerializationAnomalyInSnapshot (transaction, key, allTransactions) {\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\n\t\t\t\tif (this._hasWriteSkewAnomaly(transaction, otherTx, key)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._hasDependencyCycle(transaction, otherTx)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for write-skew anomalies between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @param {string} key - Key being checked\n\t * @returns {boolean} True if write-skew detected\n\t * @private\n\t */\n\t_hasWriteSkewAnomaly (tx1, tx2, key) {\n\t\tconst tx1ReadsRelated = this._hasRelatedReads(tx1, key);\n\t\tconst tx2ReadsRelated = this._hasRelatedReads(tx2, key);\n\n\t\tif (!tx1ReadsRelated || !tx2ReadsRelated) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tx1Writes = Array.from(tx1.writeSet);\n\t\tconst tx2Writes = Array.from(tx2.writeSet);\n\t\tconst hasOverlappingWrites = tx1Writes.some(k => tx2Writes.includes(k));\n\n\t\tif (hasOverlappingWrites) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn tx1Writes.length > 0 && tx2Writes.length > 0;\n\t}\n\n\t/**\n\t * Check if transaction has reads related to a key\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Reference key\n\t * @returns {boolean} True if has related reads\n\t * @private\n\t */\n\t_hasRelatedReads (transaction, key) {\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tif (this.keyAnalyzer.areKeysRelated(readKey, key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for dependency cycles between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if dependency cycle detected\n\t * @private\n\t */\n\t_hasDependencyCycle (tx1, tx2) {\n\t\tconst tx1ReadsTx2Writes = this._readsOtherWrites(tx1, tx2);\n\t\tconst tx2ReadsTx1Writes = this._readsOtherWrites(tx2, tx1);\n\n\t\treturn tx1ReadsTx2Writes && tx2ReadsTx1Writes;\n\t}\n\n\t/**\n\t * Check if one transaction reads what another writes\n\t * @param {Transaction} reader - Reading transaction\n\t * @param {Transaction} writer - Writing transaction\n\t * @returns {boolean} True if dependency exists\n\t * @private\n\t */\n\t_readsOtherWrites (reader, writer) {\n\t\tfor (const readKey of reader.readSet) {\n\t\t\tif (writer.writeSet.has(readKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two transactions have overlapping execution periods\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if transactions overlap in time\n\t * @private\n\t */\n\t_transactionsOverlap (tx1, tx2) {\n\t\tif (!tx1.startTime || !tx2.startTime) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tx1Start = tx1.startTime.getTime();\n\t\tconst tx1End = tx1.endTime ? tx1.endTime.getTime() : Date.now();\n\t\tconst tx2Start = tx2.startTime.getTime();\n\t\tconst tx2End = tx2.endTime ? tx2.endTime.getTime() : Date.now();\n\n\t\treturn tx1Start < tx2End && tx2Start < tx1End;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { LockTypes } from \"./constants.js\";\nimport { Transaction } from \"./transaction-individual.js\";\nimport { LockManager } from \"./lock-manager.js\";\nimport { TransactionStatistics } from \"./transaction-statistics.js\";\nimport { DeadlockDetector } from \"./deadlock-detector.js\";\nimport { IsolationValidator } from \"./isolation-validator.js\";\n\n/**\n * Refactored transaction manager for coordinating multiple transactions\n * Delegates complex operations to specialized classes\n */\nexport class TransactionManager {\n\tconstructor () {\n\t\t// Active transactions\n\t\tthis.transactions = new Map();\n\n\t\t// Lock manager for concurrency control\n\t\tthis.lockManager = new LockManager();\n\n\t\t// Global transaction counter\n\t\tthis.transactionCounter = 0;\n\n\t\t// Specialized components\n\t\tthis.statistics = new TransactionStatistics();\n\t\tthis.deadlockDetector = new DeadlockDetector(this.lockManager);\n\t\tthis.isolationValidator = new IsolationValidator();\n\t}\n\n\t/**\n\t * Begin a new transaction\n\t * @param {Object} [options={}] - Transaction options\n\t * @returns {Transaction} New transaction instance\n\t */\n\tbegin (options = {}) {\n\t\tconst transaction = new Transaction(undefined, options);\n\t\ttransaction.begin();\n\n\t\tthis.transactions.set(transaction.id, transaction);\n\t\tthis.transactionCounter++;\n\t\tthis.statistics.incrementTotal();\n\t\tthis.statistics.incrementActive();\n\n\t\treturn transaction;\n\t}\n\n\t/**\n\t * Get transaction by ID\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {Transaction|undefined} Transaction instance\n\t */\n\tgetTransaction (transactionId) {\n\t\treturn this.transactions.get(transactionId);\n\t}\n\n\t/**\n\t * Commit a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @param {Object} [context] - Commit context\n\t * @returns {Transaction} Committed transaction\n\t * @throws {TransactionError} If transaction not found or commit fails\n\t */\n\tasync commit (transactionId, context = {}) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"commit\");\n\t\t}\n\n\t\ttry {\n\t\t\t// Acquire locks for all writes\n\t\t\tfor (const key of transaction.writeSet) {\n\t\t\t\tawait this.lockManager.acquireLock(transactionId, key, LockTypes.EXCLUSIVE);\n\t\t\t}\n\n\t\t\t// Perform isolation level checks using specialized validator\n\t\t\tthis.isolationValidator.validateIsolation(transaction, this.transactions);\n\n\t\t\t// Commit the transaction\n\t\t\ttransaction.commit(context);\n\n\t\t\t// Update statistics\n\t\t\tthis.statistics.incrementCommitted();\n\t\t\tthis.statistics.decrementActive();\n\t\t\tthis.statistics.updateDurationStats(transaction);\n\n\t\t\treturn transaction;\n\t\t} catch (error) {\n\t\t\t// Auto-abort on failure\n\t\t\tthis.abort(transactionId, error.message);\n\t\t\tthrow error;\n\t\t/* c8 ignore next */ } finally {\n\t\t\t// Always release locks\n\t\t\tthis.lockManager.releaseAllLocks(transactionId);\n\t\t}\n\t}\n\n\t/**\n\t * Abort a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} [reason] - Reason for abort\n\t * @returns {Transaction} Aborted transaction\n\t * @throws {TransactionError} If transaction not found\n\t */\n\tabort (transactionId, reason = \"Manual abort\") {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"abort\");\n\t\t}\n\n\t\ttransaction.abort(reason);\n\n\t\t// Release all locks\n\t\tthis.lockManager.releaseAllLocks(transactionId);\n\n\t\t// Update statistics\n\t\tthis.statistics.incrementAborted();\n\t\tthis.statistics.decrementActive();\n\t\tthis.statistics.updateDurationStats(transaction);\n\n\t\treturn transaction;\n\t}\n\n\t/**\n\t * Clean up completed transactions\n\t * @param {number} [maxAge=3600000] - Maximum age in milliseconds (default: 1 hour)\n\t * @returns {number} Number of transactions cleaned up\n\t */\n\tcleanup (maxAge = 3600000) {\n\t\tconst cutoffTime = Date.now() - maxAge;\n\t\tlet cleaned = 0;\n\n\t\tfor (const [id, transaction] of this.transactions) {\n\t\t\t// Special case: maxAge of 0 means clean ALL completed transactions\n\t\t\tif (transaction.endTime && (maxAge === 0 || transaction.endTime.getTime() < cutoffTime)) {\n\t\t\t\tthis.transactions.delete(id);\n\t\t\t\tcleaned++;\n\t\t\t}\n\t\t}\n\n\t\treturn cleaned;\n\t}\n\n\t/**\n\t * Get all active transactions\n\t * @returns {Transaction[]} Array of active transactions\n\t */\n\tgetActiveTransactions () {\n\t\treturn Array.from(this.transactions.values()).filter(t => t.isActive());\n\t}\n\n\t/**\n\t * Check for deadlocks using specialized detector\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tdetectDeadlocks (options = {}) {\n\t\tconst activeTransactions = this.getActiveTransactions();\n\n\t\treturn this.deadlockDetector.detectDeadlocks(activeTransactions, options);\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst activeCount = this.getActiveTransactions().length;\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\treturn this.statistics.getStats(lockStats, activeCount, this.transactionCounter);\n\t}\n\n\t/**\n\t * Reset all statistics\n\t */\n\tresetStats () {\n\t\tthis.statistics.reset();\n\t}\n\n\t/**\n\t * Get access to specialized components for advanced usage\n\t * @returns {Object} Specialized components\n\t */\n\tgetComponents () {\n\t\treturn {\n\t\t\tstatistics: this.statistics,\n\t\t\tdeadlockDetector: this.deadlockDetector,\n\t\t\tisolationValidator: this.isolationValidator,\n\t\t\tlockManager: this.lockManager\n\t\t};\n\t}\n\n\t/**\n\t * Validate isolation for a specific transaction (for testing/debugging)\n\t * @param {string} transactionId - Transaction ID to validate\n\t * @throws {TransactionError} If validation fails\n\t */\n\tvalidateTransactionIsolation (transactionId) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"validate\");\n\t\t}\n\n\t\tthis.isolationValidator.validateIsolation(transaction, this.transactions);\n\t}\n\n\t/**\n\t * Force deadlock detection and return results\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tcheckForDeadlocks (options = {}) {\n\t\treturn this.detectDeadlocks(options);\n\t}\n\n\t/**\n\t * Get detailed transaction information for debugging\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {Object|null} Detailed transaction info or null if not found\n\t */\n\tgetTransactionDetails (transactionId) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...transaction.getStats(),\n\t\t\tlockInfo: this.lockManager.getStats().recordsLocked.filter(\n\t\t\t\tlock => lock.holders.includes(transactionId)\n\t\t\t)\n\t\t};\n\t}\n\n\t/**\n\t * Get system health information\n\t * @returns {Object} System health metrics\n\t */\n\tgetSystemHealth () {\n\t\tconst stats = this.getStats();\n\t\tconst deadlockResults = this.detectDeadlocks();\n\n\t\treturn {\n\t\t\tactiveTransactions: stats.activeTransactions,\n\t\t\ttotalTransactions: stats.totalTransactions,\n\t\t\tcommitRate: stats.totalTransactions > 0 ? stats.committedTransactions / stats.totalTransactions : 0,\n\t\t\taverageDuration: stats.averageDuration,\n\t\t\thasDeadlocks: deadlockResults.deadlocks.length > 0,\n\t\t\tsuspectedDeadlocks: deadlockResults.suspectedDeadlocks.length,\n\t\t\ttimeoutVictims: deadlockResults.timeoutVictims.length,\n\t\t\ttotalLocks: stats.lockStats.totalLocks,\n\t\t\tlockUtilization: stats.lockStats.totalLocks > 0 ? stats.lockStats.uniqueHolders / stats.lockStats.totalLocks : 0\n\t\t};\n\t}\n}\n","/**\n * Query operation types\n */\nexport const QueryTypes = {\n\tFIND: \"find\",\n\tFILTER: \"filter\",\n\tSEARCH: \"search\",\n\tWHERE: \"where\",\n\tSORT: \"sort\",\n\tLIMIT: \"limit\",\n\tAGGREGATE: \"aggregate\"\n};\n\n/**\n * Cost estimation factors\n */\nexport const CostFactors = {\n\tINDEX_LOOKUP: 1,\n\tFULL_SCAN: 100,\n\tFILTER_EVALUATION: 10,\n\tSORT_OPERATION: 50,\n\tMEMORY_ACCESS: 1,\n\tCOMPARISON: 2,\n\tREGEX_MATCH: 20\n};\n\n/**\n * Query execution plan step\n */\nexport class QueryPlanStep {\n\t/**\n\t * @param {string} operation - Operation type\n\t * @param {Object} [options={}] - Operation options\n\t * @param {number} [estimatedCost=0] - Estimated cost of this step\n\t * @param {number} [estimatedRows=0] - Estimated number of rows processed\n\t */\n\tconstructor (operation, options = {}, estimatedCost = 0, estimatedRows = 0) {\n\t\tthis.operation = operation;\n\t\tthis.options = options;\n\t\tthis.estimatedCost = estimatedCost;\n\t\tthis.estimatedRows = estimatedRows;\n\t\tthis.actualCost = null;\n\t\tthis.actualRows = null;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\t}\n\n\t/**\n\t * Start execution timing\n\t */\n\tstartExecution () {\n\t\tthis.startTime = Date.now();\n\t}\n\n\t/**\n\t * End execution timing\n\t * @param {number} actualRows - Actual number of rows processed\n\t */\n\tendExecution (actualRows) {\n\t\tthis.endTime = Date.now();\n\t\tthis.actualCost = this.endTime - this.startTime;\n\t\tthis.actualRows = actualRows;\n\t}\n\n\t/**\n\t * Get execution statistics\n\t * @returns {Object} Execution statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\toperation: this.operation,\n\t\t\toptions: this.options,\n\t\t\testimatedCost: this.estimatedCost,\n\t\t\testimatedRows: this.estimatedRows,\n\t\t\tactualCost: this.actualCost,\n\t\t\tactualRows: this.actualRows,\n\t\t\tcostAccuracy: this.actualCost && this.estimatedCost ?\n\t\t\t\tMath.abs(this.actualCost - this.estimatedCost) / this.estimatedCost :\n\t\t\t\tnull,\n\t\t\trowAccuracy: this.actualRows !== null && this.estimatedRows ?\n\t\t\t\tMath.abs(this.actualRows - this.estimatedRows) / this.estimatedRows :\n\t\t\t\tnull\n\t\t};\n\t}\n}\n\n/**\n * Query execution plan\n */\nexport class QueryPlan {\n\t/**\n\t * @param {string} queryId - Unique query identifier\n\t * @param {Object} originalQuery - Original query object\n\t */\n\tconstructor (queryId, originalQuery) {\n\t\tthis.queryId = queryId;\n\t\tthis.originalQuery = originalQuery;\n\t\tthis.steps = [];\n\t\tthis.totalEstimatedCost = 0;\n\t\tthis.totalEstimatedRows = 0;\n\t\tthis.totalActualCost = null;\n\t\tthis.totalActualRows = null;\n\t\tthis.createdAt = new Date();\n\t\tthis.executedAt = null;\n\t\tthis.completedAt = null;\n\t}\n\n\t/**\n\t * Add a step to the execution plan\n\t * @param {QueryPlanStep} step - Query plan step\n\t * @returns {QueryPlan} This plan for chaining\n\t */\n\taddStep (step) {\n\t\tthis.steps.push(step);\n\t\tthis.totalEstimatedCost += step.estimatedCost;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start plan execution\n\t */\n\tstartExecution () {\n\t\tthis.executedAt = new Date();\n\t}\n\n\t/**\n\t * Complete plan execution\n\t * @param {number} actualRows - Final number of rows returned\n\t */\n\tcompleteExecution (actualRows) {\n\t\tthis.completedAt = new Date();\n\t\tthis.totalActualRows = actualRows;\n\t\tthis.totalActualCost = this.completedAt.getTime() - (this.executedAt?.getTime() || this.createdAt.getTime());\n\t}\n\n\t/**\n\t * Get execution statistics\n\t * @returns {Object} Execution statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tqueryId: this.queryId,\n\t\t\toriginalQuery: this.originalQuery,\n\t\t\tstepCount: this.steps.length,\n\t\t\ttotalEstimatedCost: this.totalEstimatedCost,\n\t\t\ttotalEstimatedRows: this.totalEstimatedRows,\n\t\t\ttotalActualCost: this.totalActualCost,\n\t\t\ttotalActualRows: this.totalActualRows,\n\t\t\tcreatedAt: this.createdAt,\n\t\t\texecutedAt: this.executedAt,\n\t\t\tcompletedAt: this.completedAt,\n\t\t\tsteps: this.steps.map(step => step.getStats()),\n\t\t\tefficiency: this.totalActualCost && this.totalEstimatedCost ?\n\t\t\t\tthis.totalEstimatedCost / this.totalActualCost :\n\t\t\t\tnull\n\t\t};\n\t}\n\n\t/**\n\t * Export plan for debugging\n\t * @returns {Object} Exportable plan data\n\t */\n\texport () {\n\t\treturn {\n\t\t\t...this.getStats(),\n\t\t\texplanation: this._generateExplanation()\n\t\t};\n\t}\n\n\t/**\n\t * Generate human-readable explanation of the plan\n\t * @returns {string[]} Array of explanation lines\n\t * @private\n\t */\n\t_generateExplanation () {\n\t\tconst explanation = [];\n\n\t\texplanation.push(`Query Plan for: ${JSON.stringify(this.originalQuery)}`);\n\t\texplanation.push(`Estimated cost: ${this.totalEstimatedCost}, rows: ${this.totalEstimatedRows}`);\n\n\t\tif (this.totalActualCost !== null) {\n\t\t\texplanation.push(`Actual cost: ${this.totalActualCost}, rows: ${this.totalActualRows}`);\n\t\t}\n\n\t\texplanation.push(\"\");\n\t\texplanation.push(\"Execution steps:\");\n\n\t\tthis.steps.forEach((step, index) => {\n\t\t\tconst stats = step.getStats();\n\t\t\texplanation.push(`${index + 1}. ${stats.operation} (cost: ${stats.estimatedCost}, rows: ${stats.estimatedRows})`);\n\n\t\t\tif (stats.actualCost !== null) {\n\t\t\t\texplanation.push(`   Actual: cost: ${stats.actualCost}, rows: ${stats.actualRows}`);\n\t\t\t}\n\t\t});\n\n\t\treturn explanation;\n\t}\n}\n\n/**\n * Statistics about data distribution for cost estimation\n */\nexport class DataStatistics {\n\tconstructor () {\n\t\tthis.totalRecords = 0;\n\t\tthis.indexStatistics = new Map(); // Map<indexName, {cardinality, selectivity, histogram}>\n\t\tthis.fieldStatistics = new Map(); // Map<fieldName, {nullCount, uniqueValues, dataType, avgLength}>\n\t\tthis.lastUpdated = new Date();\n\t}\n\n\t/**\n\t * Update statistics from current data\n\t * @param {Map} records - Current record data\n\t * @param {Map} indexes - Current index data\n\t */\n\tupdate (records, indexes) {\n\t\tthis.totalRecords = records.size;\n\t\tthis.lastUpdated = new Date();\n\n\t\t// Update field statistics\n\t\tthis._updateFieldStatistics(records);\n\n\t\t// Update index statistics\n\t\tthis._updateIndexStatistics(indexes);\n\t}\n\n\t/**\n\t * Get selectivity estimate for a field value\n\t * @param {string} fieldName - Field name\n\t * @returns {number} Selectivity estimate (0-1)\n\t */\n\tgetSelectivity (fieldName) {\n\t\tconst fieldStats = this.fieldStatistics.get(fieldName);\n\t\tif (!fieldStats) {\n\t\t\treturn 0.1; // Default selectivity\n\t\t}\n\n\t\t// Simple selectivity estimation\n\t\treturn 1 / (fieldStats.uniqueValues || 1);\n\t}\n\n\t/**\n\t * Get cardinality estimate for an index\n\t * @param {string} indexName - Index name\n\t * @returns {number} Cardinality estimate\n\t */\n\tgetIndexCardinality (indexName) {\n\t\tconst indexStats = this.indexStatistics.get(indexName);\n\n\t\treturn indexStats ? indexStats.cardinality : this.totalRecords;\n\t}\n\n\t/**\n\t * Update field statistics\n\t * @param {Map} records - Record data\n\t * @private\n\t */\n\t_updateFieldStatistics (records) {\n\t\tconst fieldData = new Map();\n\n\t\t// Collect field data\n\t\tfor (const record of records.values()) {\n\t\t\tfor (const [fieldName, value] of Object.entries(record)) {\n\t\t\t\tif (!fieldData.has(fieldName)) {\n\t\t\t\t\tfieldData.set(fieldName, {\n\t\t\t\t\t\tvalues: new Set(),\n\t\t\t\t\t\tnullCount: 0,\n\t\t\t\t\t\ttotalLength: 0,\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst data = fieldData.get(fieldName);\n\t\t\t\tdata.count++;\n\n\t\t\t\tif (value === null || value === undefined) {\n\t\t\t\t\tdata.nullCount++;\n\t\t\t\t} else {\n\t\t\t\t\tdata.values.add(value);\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\tdata.totalLength += value.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Convert to statistics\n\t\tfor (const [fieldName, data] of fieldData) {\n\t\t\tthis.fieldStatistics.set(fieldName, {\n\t\t\t\tuniqueValues: data.values.size,\n\t\t\t\tnullCount: data.nullCount,\n\t\t\t\tdataType: this._inferDataType(data.values),\n\t\t\t\tavgLength: data.totalLength / data.count || 0,\n\t\t\t\tcardinality: data.values.size / this.totalRecords\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Update index statistics\n\t * @param {Map} indexes - Index data\n\t * @private\n\t */\n\t_updateIndexStatistics (indexes) {\n\t\tfor (const [indexName, indexStorage] of indexes) {\n\t\t\tconst stats = indexStorage.getStats();\n\t\t\tthis.indexStatistics.set(indexName, {\n\t\t\t\tcardinality: stats.totalKeys,\n\t\t\t\tselectivity: stats.totalKeys / this.totalRecords || 1,\n\t\t\t\tavgEntriesPerKey: stats.totalEntries / stats.totalKeys || 1,\n\t\t\t\tmemoryUsage: stats.memoryUsage\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Infer data type from values\n\t * @param {Set} values - Set of values\n\t * @returns {string} Inferred data type\n\t * @private\n\t */\n\t_inferDataType (values) {\n\t\tconst sample = Array.from(values).slice(0, 10);\n\t\tconst types = new Set(sample.map(v => typeof v));\n\n\t\tif (types.size === 1) {\n\t\t\treturn types.values().next().value;\n\t\t}\n\n\t\treturn \"mixed\";\n\t}\n}\n\n/**\n * Query optimizer that creates efficient execution plans\n */\nexport class QueryOptimizer {\n\t/**\n\t * @param {Object} [options={}] - Optimizer options\n\t * @param {boolean} [options.collectStatistics=true] - Whether to collect query statistics\n\t * @param {number} [options.statisticsUpdateInterval=1000] - How often to update statistics (queries)\n\t */\n\tconstructor (options = {}) {\n\t\tthis.options = {\n\t\t\tcollectStatistics: true,\n\t\t\tstatisticsUpdateInterval: 1000,\n\t\t\t...options\n\t\t};\n\n\t\tthis.statistics = new DataStatistics();\n\t\tthis.queryCounter = 0;\n\t\tthis.planCache = new Map();\n\t\tthis.executionHistory = [];\n\t\tthis.maxHistorySize = 1000;\n\t\tthis.cacheHits = 0;\n\t\tthis.totalCacheRequests = 0;\n\n\t\t// Cost model adjustments based on learning\n\t\tthis.costAdjustments = new Map([\n\t\t\t[\"INDEX_LOOKUP\", 1.0],\n\t\t\t[\"FULL_SCAN\", 1.0],\n\t\t\t[\"FILTER_EVALUATION\", 1.0],\n\t\t\t[\"SORT_OPERATION\", 1.0],\n\t\t\t[\"MEMORY_ACCESS\", 1.0],\n\t\t\t[\"COMPARISON\", 1.0],\n\t\t\t[\"REGEX_MATCH\", 1.0]\n\t\t]);\n\t\tthis.lastCostModelUpdate = new Date();\n\t}\n\n\t/**\n\t * Create an optimized query plan\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Query context (available indexes, etc.)\n\t * @returns {QueryPlan} Optimized query plan\n\t */\n\tcreatePlan (query, context) {\n\t\tconst queryId = `query_${++this.queryCounter}`;\n\t\tconst plan = new QueryPlan(queryId, query);\n\n\t\t// Track cache request\n\t\tthis.totalCacheRequests++;\n\n\t\t// Check plan cache first\n\t\tconst cacheKey = this._generateCacheKey(query);\n\t\tconst cachedPlan = this.planCache.get(cacheKey);\n\t\tif (cachedPlan && this._isCacheValid(cachedPlan)) {\n\t\t\t// Cache hit\n\t\t\tthis.cacheHits++;\n\n\t\t\treturn this._copyPlan(cachedPlan, queryId);\n\t\t}\n\n\t\t// Cache miss - create optimized plan\n\t\tthis._buildOptimizedPlan(plan, query, context);\n\n\t\t// Cache the plan\n\t\tthis.planCache.set(cacheKey, plan);\n\n\t\treturn plan;\n\t}\n\n\t/**\n\t * Update statistics with current data\n\t * @param {Map} records - Current records\n\t * @param {Map} indexes - Current indexes\n\t */\n\tupdateStatistics (records, indexes) {\n\t\tthis.statistics.update(records, indexes);\n\t}\n\n\t/**\n\t * Record plan execution for learning\n\t * @param {QueryPlan} plan - Executed plan\n\t */\n\trecordExecution (plan) {\n\t\tif (!this.options.collectStatistics) return;\n\n\t\tthis.executionHistory.push(plan.getStats());\n\n\t\t// Limit history size\n\t\tif (this.executionHistory.length > this.maxHistorySize) {\n\t\t\tthis.executionHistory.shift();\n\t\t}\n\n\t\t// Periodically update statistics\n\t\tif (this.queryCounter % this.options.statisticsUpdateInterval === 0) {\n\t\t\tthis._updateCostModel();\n\t\t}\n\t}\n\n\t/**\n\t * Get optimal execution strategy for a query\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Available indexes and options\n\t * @returns {Object} Execution strategy\n\t */\n\tgetOptimalStrategy (query, context) {\n\t\tconst strategies = this._generateStrategies(query, context);\n\n\t\t// Estimate costs for each strategy\n\t\tconst costedStrategies = strategies.map(strategy => ({\n\t\t\t...strategy,\n\t\t\testimatedCost: this._estimateStrategyCost(strategy)\n\t\t}));\n\n\t\t// Sort by estimated cost\n\t\tcostedStrategies.sort((a, b) => a.estimatedCost - b.estimatedCost);\n\n\t\treturn costedStrategies[0] || { type: \"full_scan\", estimatedCost: this._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords };\n\t}\n\n\t/**\n\t * Get optimizer statistics\n\t * @returns {Object} Optimizer statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tqueryCounter: this.queryCounter,\n\t\t\tplanCacheSize: this.planCache.size,\n\t\t\texecutionHistorySize: this.executionHistory.length,\n\t\t\tdataStatistics: {\n\t\t\t\ttotalRecords: this.statistics.totalRecords,\n\t\t\t\tlastUpdated: this.statistics.lastUpdated,\n\t\t\t\tindexCount: this.statistics.indexStatistics.size,\n\t\t\t\tfieldCount: this.statistics.fieldStatistics.size\n\t\t\t},\n\t\t\taverageQueryCost: this._calculateAverageQueryCost(),\n\t\t\tcacheHitRate: this._calculateCacheHitRate(),\n\t\t\tcacheStatistics: {\n\t\t\t\ttotalRequests: this.totalCacheRequests,\n\t\t\t\thits: this.cacheHits,\n\t\t\t\tmisses: this.totalCacheRequests - this.cacheHits,\n\t\t\t\thitRate: this._calculateCacheHitRate()\n\t\t\t},\n\t\t\tcostModel: {\n\t\t\t\tadjustments: Object.fromEntries(this.costAdjustments),\n\t\t\t\tlastUpdated: this.lastCostModelUpdate\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Clear optimizer caches and history\n\t */\n\tclear () {\n\t\tthis.planCache.clear();\n\t\tthis.executionHistory = [];\n\t\tthis.queryCounter = 0;\n\t\tthis.cacheHits = 0;\n\t\tthis.totalCacheRequests = 0;\n\n\t\t// Reset cost adjustments to default values\n\t\tthis.costAdjustments.clear();\n\t\tthis.costAdjustments.set(\"INDEX_LOOKUP\", 1.0);\n\t\tthis.costAdjustments.set(\"FULL_SCAN\", 1.0);\n\t\tthis.costAdjustments.set(\"FILTER_EVALUATION\", 1.0);\n\t\tthis.costAdjustments.set(\"SORT_OPERATION\", 1.0);\n\t\tthis.costAdjustments.set(\"MEMORY_ACCESS\", 1.0);\n\t\tthis.costAdjustments.set(\"COMPARISON\", 1.0);\n\t\tthis.costAdjustments.set(\"REGEX_MATCH\", 1.0);\n\t\tthis.lastCostModelUpdate = new Date();\n\t}\n\n\t/**\n\t * Build optimized execution plan\n\t * @param {QueryPlan} plan - Plan to build\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Query context\n\t * @private\n\t */\n\t_buildOptimizedPlan (plan, query, context) {\n\t\tconst strategy = this.getOptimalStrategy(query, context);\n\n\t\tswitch (strategy.type) {\n\t\t\tcase \"index_lookup\":\n\t\t\t\tthis._addIndexLookupSteps(plan, strategy);\n\t\t\t\tbreak;\n\t\t\tcase \"filtered_scan\":\n\t\t\t\tthis._addFilteredScanSteps(plan, query, strategy);\n\t\t\t\tbreak;\n\t\t\tcase \"full_scan\":\n\t\t\t\tthis._addFullScanSteps(plan);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._addFullScanSteps(plan);\n\t\t}\n\n\t\t// Add post-processing steps\n\t\tthis._addPostProcessingSteps(plan, query);\n\t}\n\n\t/**\n\t * Add index lookup steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} strategy - Execution strategy\n\t * @private\n\t */\n\t_addIndexLookupSteps (plan, strategy) {\n\t\tconst step = new QueryPlanStep(\n\t\t\t\"index_lookup\",\n\t\t\t{\n\t\t\t\tindexName: strategy.indexName,\n\t\t\t\tlookupKey: strategy.lookupKey\n\t\t\t},\n\t\t\tthis._getAdjustedCostFactor(\"INDEX_LOOKUP\"),\n\t\t\tthis._estimateIndexLookupRows(strategy.indexName)\n\t\t);\n\n\t\tplan.addStep(step);\n\t}\n\n\t/**\n\t * Add filtered scan steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} query - Query object\n\t * @param {Object} strategy - Execution strategy\n\t * @private\n\t */\n\t_addFilteredScanSteps (plan, query, strategy) {\n\t\t// First, index lookup for partial filtering\n\t\tif (strategy.indexName) {\n\t\t\tthis._addIndexLookupSteps(plan, strategy);\n\t\t}\n\n\t\t// Then, filter remaining records\n\t\tconst filterStep = new QueryPlanStep(\n\t\t\t\"filter\",\n\t\t\t{ predicate: query.filter || query.where },\n\t\t\tthis._getAdjustedCostFactor(\"FILTER_EVALUATION\") * this.statistics.totalRecords,\n\t\t\tthis.statistics.totalRecords * 0.1 // Assume 10% selectivity\n\t\t);\n\n\t\tplan.addStep(filterStep);\n\t}\n\n\t/**\n\t * Add full scan steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @private\n\t */\n\t_addFullScanSteps (plan) {\n\t\tconst step = new QueryPlanStep(\n\t\t\t\"full_scan\",\n\t\t\t{ scanType: \"sequential\" },\n\t\t\tthis._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords,\n\t\t\tthis.statistics.totalRecords\n\t\t);\n\n\t\tplan.addStep(step);\n\t}\n\n\t/**\n\t * Add post-processing steps (sort, limit, etc.)\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} query - Query object\n\t * @private\n\t */\n\t_addPostProcessingSteps (plan, query) {\n\t\t// Add sort step if needed\n\t\tif (query.sort || query.sortBy) {\n\t\t\tconst sortStep = new QueryPlanStep(\n\t\t\t\t\"sort\",\n\t\t\t\t{ sortField: query.sortBy, sortFunction: query.sort },\n\t\t\t\tthis._getAdjustedCostFactor(\"SORT_OPERATION\") * plan.totalEstimatedRows,\n\t\t\t\tplan.totalEstimatedRows\n\t\t\t);\n\t\t\tplan.addStep(sortStep);\n\t\t}\n\n\t\t// Add limit step if needed\n\t\tif (query.limit) {\n\t\t\tconst limitStep = new QueryPlanStep(\n\t\t\t\t\"limit\",\n\t\t\t\t{ offset: query.offset || 0, max: query.limit },\n\t\t\t\tthis._getAdjustedCostFactor(\"MEMORY_ACCESS\"),\n\t\t\t\tMath.min(query.limit, plan.totalEstimatedRows)\n\t\t\t);\n\t\t\tplan.addStep(limitStep);\n\t\t}\n\t}\n\n\t/**\n\t * Generate possible execution strategies\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Available indexes and options\n\t * @returns {Array} Array of possible strategies\n\t * @private\n\t */\n\t_generateStrategies (query, context) {\n\t\tconst strategies = [];\n\n\t\t// Strategy 1: Full scan (always available)\n\t\tstrategies.push({ type: \"full_scan\" });\n\n\t\t// Strategy 2: Index-based lookup\n\t\tif (query.find && context.indexManager) {\n\t\t\tconst fields = Object.keys(query.find);\n\t\t\tconst optimalIndex = context.indexManager.getOptimalIndex(fields);\n\n\t\t\tif (optimalIndex) {\n\t\t\t\tstrategies.push({\n\t\t\t\t\ttype: \"index_lookup\",\n\t\t\t\t\tindexName: optimalIndex,\n\t\t\t\t\tlookupKey: this._generateLookupKey(query.find, fields)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Strategy 3: Filtered scan with partial index\n\t\tif ((query.filter || query.where) && context.indexManager) {\n\t\t\tconst availableIndexes = context.indexManager.listIndexes();\n\n\t\t\tfor (const indexName of availableIndexes) {\n\t\t\t\tstrategies.push({\n\t\t\t\t\ttype: \"filtered_scan\",\n\t\t\t\t\tindexName,\n\t\t\t\t\tpartialFilter: true\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn strategies;\n\t}\n\n\t/**\n\t * Estimate cost of an execution strategy\n\t * @param {Object} strategy - Execution strategy\n\t * @returns {number} Estimated cost\n\t * @private\n\t */\n\t_estimateStrategyCost (strategy) {\n\t\tswitch (strategy.type) {\n\t\t\tcase \"index_lookup\":\n\t\t\t\treturn this._getAdjustedCostFactor(\"INDEX_LOOKUP\") +\n\t\t\t\t\tthis._estimateIndexLookupRows(strategy.indexName, strategy.lookupKey) * this._getAdjustedCostFactor(\"MEMORY_ACCESS\");\n\n\t\t\tcase \"filtered_scan\": {\n\t\t\t\tconst indexCost = strategy.indexName ? this._getAdjustedCostFactor(\"INDEX_LOOKUP\") : 0;\n\t\t\t\tconst filterCost = this._getAdjustedCostFactor(\"FILTER_EVALUATION\") * this.statistics.totalRecords;\n\n\t\t\t\treturn indexCost + filterCost;\n\t\t\t}\n\n\t\t\tcase \"full_scan\":\n\t\t\t\treturn this._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords;\n\n\t\t\tdefault:\n\t\t\t\treturn Number.MAX_SAFE_INTEGER;\n\t\t}\n\t}\n\n\t/**\n\t * Get cost factor adjusted by learned performance data\n\t * @param {string} factorName - Name of the cost factor\n\t * @returns {number} Adjusted cost factor\n\t * @private\n\t */\n\t_getAdjustedCostFactor (factorName) {\n\t\tconst baseCost = CostFactors[factorName] || 1;\n\t\tconst adjustment = this.costAdjustments.get(factorName) || 1.0;\n\n\t\treturn baseCost * adjustment;\n\t}\n\n\t/**\n\t * Estimate number of rows returned by index lookup\n\t * @param {string} indexName - Index name\n\t * @returns {number} Estimated row count\n\t * @private\n\t */\n\t_estimateIndexLookupRows (indexName) {\n\t\tconst indexStats = this.statistics.indexStatistics.get(indexName);\n\t\tif (!indexStats) {\n\t\t\treturn this.statistics.totalRecords * 0.1; // Default 10%\n\t\t}\n\n\t\treturn Math.max(1, this.statistics.totalRecords / indexStats.cardinality);\n\t}\n\n\t/**\n\t * Generate cache key for query\n\t * @param {Object} query - Query object\n\t * @returns {string} Cache key\n\t * @private\n\t */\n\t_generateCacheKey (query) {\n\t\treturn JSON.stringify(query);\n\t}\n\n\t/**\n\t * Check if cached plan is still valid\n\t * @param {QueryPlan} cachedPlan - Cached plan\n\t * @returns {boolean} True if cache is valid\n\t * @private\n\t */\n\t_isCacheValid (cachedPlan) {\n\t\t// Simple cache invalidation based on time\n\t\tconst maxAge = 5 * 60 * 1000; // 5 minutes\n\n\t\treturn Date.now() - cachedPlan.createdAt.getTime() < maxAge;\n\t}\n\n\t/**\n\t * Copy a cached plan with new ID\n\t * @param {QueryPlan} originalPlan - Original plan\n\t * @param {string} newQueryId - New query ID\n\t * @returns {QueryPlan} Copied plan\n\t * @private\n\t */\n\t_copyPlan (originalPlan, newQueryId) {\n\t\tconst newPlan = new QueryPlan(newQueryId, originalPlan.originalQuery);\n\n\t\tfor (const step of originalPlan.steps) {\n\t\t\tconst newStep = new QueryPlanStep(\n\t\t\t\tstep.operation,\n\t\t\t\tstep.options,\n\t\t\t\tstep.estimatedCost,\n\t\t\t\tstep.estimatedRows\n\t\t\t);\n\t\t\tnewPlan.addStep(newStep);\n\t\t}\n\n\t\treturn newPlan;\n\t}\n\n\t/**\n\t * Generate lookup key from query criteria\n\t * @param {Object} criteria - Query criteria\n\t * @param {string[]} fields - Field names\n\t * @returns {string} Lookup key\n\t * @private\n\t */\n\t_generateLookupKey (criteria, fields) {\n\t\treturn fields.sort().map(field => String(criteria[field])).join(\"|\");\n\t}\n\n\t/**\n\t * Update cost model based on execution history\n\t * @private\n\t */\n\t_updateCostModel () {\n\t\tif (this.executionHistory.length < 10) {\n\t\t\treturn; // Need sufficient data for meaningful analysis\n\t\t}\n\n\t\tthis.lastCostModelUpdate = new Date();\n\n\t\t// Analyze each operation type separately\n\t\tconst operationStats = this._analyzeOperationPerformance();\n\n\t\t// Update cost adjustments based on performance analysis\n\t\tfor (const [operation, stats] of operationStats) {\n\t\t\tif (stats.sampleSize >= 3) { // Only process operations with sufficient data\n\t\t\t\tconst currentAdjustment = this.costAdjustments.get(operation) || 1.0;\n\t\t\t\tlet newAdjustment = currentAdjustment;\n\n\t\t\t\t// Calculate performance ratio (actual vs estimated)\n\t\t\t\tconst performanceRatio = stats.avgActualCost / stats.avgEstimatedCost;\n\n\t\t\t\tif (stats.consistency > 0.7) { // Only adjust if performance is consistent\n\t\t\t\t\t// Gradually adjust towards the observed performance\n\t\t\t\t\tconst learningRate = 0.1; // Conservative learning rate\n\t\t\t\t\tnewAdjustment = currentAdjustment * (1 + learningRate * (performanceRatio - 1));\n\n\t\t\t\t\t// Clamp adjustments to reasonable bounds\n\t\t\t\t\tnewAdjustment = Math.max(0.1, Math.min(10.0, newAdjustment));\n\n\t\t\t\t\tthis.costAdjustments.set(operation, newAdjustment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clear old execution history to prevent memory bloat\n\t\tif (this.executionHistory.length > this.maxHistorySize * 0.8) {\n\t\t\tthis.executionHistory = this.executionHistory.slice(-Math.floor(this.maxHistorySize * 0.6));\n\t\t}\n\t}\n\n\t/**\n\t * Analyze operation performance from execution history\n\t * @returns {Map} Map of operation -> performance statistics\n\t * @private\n\t */\n\t_analyzeOperationPerformance () {\n\t\tconst operationStats = new Map();\n\n\t\t// Process each execution in history\n\t\tfor (const execution of this.executionHistory) {\n\t\t\tif (execution.steps && Array.isArray(execution.steps)) {\n\t\t\t\t// Analyze each step in the execution\n\t\t\t\tfor (const step of execution.steps) {\n\t\t\t\t\tif (step.operation && step.actualCost !== null && step.estimatedCost !== 0) {\n\t\t\t\t\t\tconst operation = this._mapOperationToCostFactor(step.operation);\n\t\t\t\t\t\tif (operation) {\n\t\t\t\t\t\t\tif (!operationStats.has(operation)) {\n\t\t\t\t\t\t\t\toperationStats.set(operation, {\n\t\t\t\t\t\t\t\t\tsampleSize: 0,\n\t\t\t\t\t\t\t\t\ttotalActualCost: 0,\n\t\t\t\t\t\t\t\t\ttotalEstimatedCost: 0,\n\t\t\t\t\t\t\t\t\tcosts: [],\n\t\t\t\t\t\t\t\t\testimatedCosts: []\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst stats = operationStats.get(operation);\n\t\t\t\t\t\t\tstats.sampleSize++;\n\t\t\t\t\t\t\tstats.totalActualCost += step.actualCost;\n\t\t\t\t\t\t\tstats.totalEstimatedCost += step.estimatedCost;\n\t\t\t\t\t\t\tstats.costs.push(step.actualCost);\n\t\t\t\t\t\t\tstats.estimatedCosts.push(step.estimatedCost);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Calculate derived statistics\n\t\tfor (const [, stats] of operationStats) {\n\t\t\tstats.avgActualCost = stats.totalActualCost / stats.sampleSize;\n\t\t\tstats.avgEstimatedCost = stats.totalEstimatedCost / stats.sampleSize;\n\n\t\t\t// Calculate consistency (inverse of coefficient of variation)\n\t\t\tconst variance = this._calculateVariance(stats.costs, stats.avgActualCost);\n\t\t\tconst stdDev = Math.sqrt(variance);\n\t\t\tconst coefficientOfVariation = stdDev / stats.avgActualCost;\n\t\t\tstats.consistency = Math.max(0, 1 - coefficientOfVariation);\n\n\t\t\t// Calculate accuracy (how close estimates were to actual)\n\t\t\tconst accuracyScores = stats.costs.map((actual, i) => {\n\t\t\t\tconst estimated = stats.estimatedCosts[i];\n\n\t\t\t\treturn 1 - Math.abs(actual - estimated) / Math.max(actual, estimated);\n\t\t\t});\n\t\t\tstats.accuracy = accuracyScores.reduce((sum, score) => sum + score, 0) / accuracyScores.length;\n\t\t}\n\n\t\treturn operationStats;\n\t}\n\n\t/**\n\t * Map step operation to cost factor name\n\t * @param {string} operation - Operation name from step\n\t * @returns {string|null} Cost factor name\n\t * @private\n\t */\n\t_mapOperationToCostFactor (operation) {\n\t\tconst mapping = {\n\t\t\t\"index_lookup\": \"INDEX_LOOKUP\",\n\t\t\t\"full_scan\": \"FULL_SCAN\",\n\t\t\t\"filter\": \"FILTER_EVALUATION\",\n\t\t\t\"sort\": \"SORT_OPERATION\",\n\t\t\t\"limit\": \"MEMORY_ACCESS\",\n\t\t\t\"regex\": \"REGEX_MATCH\"\n\t\t};\n\n\t\treturn mapping[operation] || null;\n\t}\n\n\t/**\n\t * Calculate variance of a set of values\n\t * @param {number[]} values - Array of values\n\t * @param {number} mean - Mean of the values\n\t * @returns {number} Variance\n\t * @private\n\t */\n\t_calculateVariance (values, mean) {\n\t\tif (values.length <= 1) return 0;\n\n\t\tconst squaredDifferences = values.map(value => Math.pow(value - mean, 2));\n\n\t\treturn squaredDifferences.reduce((sum, diff) => sum + diff, 0) / (values.length - 1);\n\t}\n\n\t/**\n\t * Calculate average query cost from history\n\t * @returns {number} Average query cost\n\t * @private\n\t */\n\t_calculateAverageQueryCost () {\n\t\tif (this.executionHistory.length === 0) return 0;\n\n\t\tconst totalCost = this.executionHistory.reduce((sum, plan) => sum + (plan.totalActualCost || 0), 0);\n\n\t\treturn totalCost / this.executionHistory.length;\n\t}\n\n\t/**\n\t * Calculate cache hit rate\n\t * @returns {number} Cache hit rate (0-1)\n\t * @private\n\t */\n\t_calculateCacheHitRate () {\n\t\tif (this.totalCacheRequests === 0) return 0;\n\n\t\treturn this.cacheHits / this.totalCacheRequests;\n\t}\n}\n","/**\n * Deep immutability implementation with structural sharing\n */\nexport class ImmutableStore {\n\t/**\n\t * @param {Map} [data] - Initial data\n\t */\n\tconstructor (data = new Map()) {\n\t\tthis._data = new Map(data);\n\t\tthis._frozenViews = new WeakMap();\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get a deeply frozen view of the data\n\t * @param {string} key - Record key\n\t * @returns {Object|null} Frozen record or null\n\t */\n\tget (key) {\n\t\tconst record = this._data.get(key);\n\t\tif (!record) return null;\n\n\t\t// Check if we already have a frozen view\n\t\tif (this._frozenViews.has(record)) {\n\t\t\treturn this._frozenViews.get(record);\n\t\t}\n\n\t\t// Create deeply frozen view\n\t\tconst frozen = this._deepFreeze(structuredClone(record));\n\t\tthis._frozenViews.set(record, frozen);\n\n\t\treturn frozen;\n\t}\n\n\t/**\n\t * Create new store with updated record (structural sharing)\n\t * @param {string} key - Record key\n\t * @param {Object} record - Record data\n\t * @returns {ImmutableStore} New store instance\n\t */\n\tset (key, record) {\n\t\tconst newData = new Map(this._data);\n\t\tnewData.set(key, record);\n\n\t\treturn new ImmutableStore(newData);\n\t}\n\n\t/**\n\t * Create new store without record\n\t * @param {string} key - Record key to remove\n\t * @returns {ImmutableStore} New store instance\n\t */\n\tdelete (key) {\n\t\tconst newData = new Map(this._data);\n\t\tnewData.delete(key);\n\n\t\treturn new ImmutableStore(newData);\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if exists\n\t */\n\thas (key) {\n\t\treturn this._data.has(key);\n\t}\n\n\t/**\n\t * Get all keys\n\t * @returns {string[]} Array of keys\n\t */\n\tkeys () {\n\t\treturn Array.from(this._data.keys());\n\t}\n\n\t/**\n\t * Get all values as frozen objects\n\t * @returns {IterableIterator<Object>} Iterator of frozen values\n\t */\n\tvalues () {\n\t\tconst self = this;\n\n\t\treturn (function* () {\n\t\t\tfor (const key of self._data.keys()) {\n\t\t\t\tyield self.get(key);\n\t\t\t}\n\t\t}());\n\t}\n\n\t/**\n\t * Get store size\n\t * @returns {number} Number of records\n\t */\n\tget size () {\n\t\treturn this._data.size;\n\t}\n\n\t/**\n\t * Get all entries\n\t * @returns {Array<[string, Object]>} Array of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn Array.from(this._data.entries());\n\t}\n\n\t/**\n\t * Deep freeze an object\n\t * @param {*} obj - Object to freeze\n\t * @returns {*} Frozen object\n\t * @private\n\t */\n\t_deepFreeze (obj) {\n\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\treturn obj;\n\t\t}\n\n\t\tif (Array.isArray(obj)) {\n\t\t\tobj.forEach(item => this._deepFreeze(item));\n\t\t} else {\n\t\t\tObject.values(obj).forEach(value => this._deepFreeze(value));\n\t\t}\n\n\t\treturn Object.freeze(obj);\n\t}\n}\n","/**\n * Streaming support for large datasets\n */\nexport class DataStream {\n\t/**\n\t * @param {Iterator} iterator - Data iterator\n\t * @param {Object} [options={}] - Stream options\n\t */\n\tconstructor (iterator, options = {}) {\n\t\tthis.iterator = iterator;\n\t\tthis.options = {\n\t\t\tbatchSize: 1000,\n\t\t\tbufferSize: 10000,\n\t\t\t...options\n\t\t};\n\t\tthis.buffer = [];\n\t\tthis.ended = false;\n\t\tthis.position = 0;\n\t}\n\n\t/**\n\t * Read next batch of records\n\t * @param {number} [size] - Batch size\n\t * @returns {Promise<Record[]>} Array of records\n\t */\n\tasync read (size = this.options.batchSize) {\n\t\tconst batch = [];\n\n\t\twhile (batch.length < size && !this.ended) {\n\t\t\tconst { value, done } = this.iterator.next();\n\n\t\t\tif (done) {\n\t\t\t\tthis.ended = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbatch.push(value);\n\t\t\tthis.position++;\n\t\t}\n\n\t\treturn batch;\n\t}\n\n\t/**\n\t * Read all remaining records\n\t * @returns {Promise<Record[]>} All records\n\t */\n\tasync readAll () {\n\t\tconst records = [];\n\n\t\twhile (!this.ended) {\n\t\t\tconst batch = await this.read();\n\t\t\trecords.push(...batch);\n\t\t}\n\n\t\treturn records;\n\t}\n\n\t/**\n\t * Apply transformation to stream\n\t * @param {Function} transform - Transform function\n\t * @returns {DataStream} New transformed stream\n\t */\n\tmap (transform) {\n\t\tconst transformedIterator = {\n\t\t\tnext: () => {\n\t\t\t\tconst { value, done } = this.iterator.next();\n\n\t\t\t\treturn done ? { done: true } : { value: transform(value), done: false };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(transformedIterator, this.options);\n\t}\n\n\t/**\n\t * Filter stream records\n\t * @param {Function} predicate - Filter predicate\n\t * @returns {DataStream} New filtered stream\n\t */\n\tfilter (predicate) {\n\t\tconst filteredIterator = {\n\t\t\tnext: () => {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst { value, done } = this.iterator.next();\n\t\t\t\t\tif (done) return { done: true };\n\t\t\t\t\tif (predicate(value)) return { value, done: false };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(filteredIterator, this.options);\n\t}\n\n\t/**\n\t * Take limited number of records\n\t * @param {number} limit - Maximum records\n\t * @returns {DataStream} New limited stream\n\t */\n\ttake (limit) {\n\t\tlet count = 0;\n\t\tconst limitedIterator = {\n\t\t\tnext: () => {\n\t\t\t\tif (count >= limit) return { done: true };\n\t\t\t\tconst { value, done } = this.iterator.next();\n\t\t\t\tif (done) return { done: true };\n\t\t\t\tcount++;\n\n\t\t\t\treturn { value, done: false };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(limitedIterator, this.options);\n\t}\n\n\t/**\n\t * Get stream statistics\n\t * @returns {Object} Stream statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tposition: this.position,\n\t\t\tended: this.ended,\n\t\t\tbufferSize: this.buffer.length,\n\t\t\toptions: this.options\n\t\t};\n\t}\n}\n","import { ImmutableStore } from \"./immutable-store.js\";\n\n/**\n * Manages storage operations with support for both mutable and immutable stores\n */\nexport class StorageManager {\n\t/**\n\t * @param {Object} config - Storage configuration\n\t */\n\tconstructor (config = {}) {\n\t\tthis.config = {\n\t\t\timmutable: false,\n\t\t\t...config\n\t\t};\n\n\t\t// Initialize storage based on configuration\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = new ImmutableStore();\n\t\t} else {\n\t\t\tthis._store = new Map();\n\t\t}\n\t}\n\n\t/**\n\t * Get a record from storage\n\t * @param {string} key - Record key\n\t * @returns {Object|null} Record data or null\n\t */\n\tget (key) {\n\t\treturn this._store.get(key) || null;\n\t}\n\n\t/**\n\t * Set a record in storage\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @returns {boolean} Success status\n\t */\n\tset (key, data) {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = this._store.set(key, data);\n\t\t} else {\n\t\t\tthis._store.set(key, data);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete a record from storage\n\t * @param {string} key - Record key\n\t * @returns {boolean} Success status\n\t */\n\tdelete (key) {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = this._store.delete(key);\n\t\t} else {\n\t\t\tthis._store.delete(key);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if record exists in storage\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if exists\n\t */\n\thas (key) {\n\t\treturn this._store.has(key);\n\t}\n\n\t/**\n\t * Get all storage keys\n\t * @returns {string[]} Array of keys\n\t */\n\tkeys () {\n\t\tif (this.config.immutable) {\n\t\t\treturn this._store.keys();\n\t\t}\n\n\t\treturn Array.from(this._store.keys());\n\t}\n\n\t/**\n\t * Get all storage values\n\t * @returns {IterableIterator<Object>} Iterable of values\n\t */\n\tvalues () {\n\t\treturn this._store.values();\n\t}\n\n\t/**\n\t * Get all storage entries\n\t * @returns {IterableIterator<[string, Object]>} Iterable of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn this._store.entries();\n\t}\n\n\t/**\n\t * Get storage size\n\t * @returns {number} Number of records\n\t */\n\tget size () {\n\t\treturn this._store.size;\n\t}\n\n\t/**\n\t * Clear all storage\n\t */\n\tclear () {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = new ImmutableStore();\n\t\t} else {\n\t\t\tthis._store.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Override storage with bulk data (maximum performance)\n\t * @param {Array<[string, Object]>} data - Array of [key, value] pairs\n\t * @returns {boolean} Success status\n\t */\n\toverride (data) {\n\t\ttry {\n\t\t\tif (this.config.immutable) {\n\t\t\t\t// Create new ImmutableStore from data\n\t\t\t\tthis._store = new ImmutableStore(new Map(data));\n\t\t\t} else {\n\t\t\t\t// Direct Map construction from 2D array\n\t\t\t\tthis._store = new Map(data);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Get underlying store (for compatibility)\n\t * @returns {Map|ImmutableStore} The underlying store\n\t */\n\tgetStore () {\n\t\treturn this._store;\n\t}\n\n\t/**\n\t * Estimate storage memory usage\n\t * @returns {number} Estimated bytes\n\t */\n\testimateMemoryUsage () {\n\t\tlet dataSize = 0;\n\t\tfor (const [key, value] of this.entries()) {\n\t\t\tdataSize += JSON.stringify({ key, value }).length * 2; // UTF-16 estimate\n\t\t}\n\n\t\treturn dataSize;\n\t}\n}\n","import { randomUUID as uuid } from \"crypto\";\nimport { ValidationError, RecordNotFoundError, HaroError } from \"./errors.js\";\nimport { RecordFactory } from \"./record.js\";\n\n/**\n * Manages CRUD operations with validation and error handling\n */\nexport class CRUDManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {VersionManager} [dependencies.versionManager] - Version manager\n\t * @param {Object} dependencies.config - Configuration\n\t */\n\tconstructor ({ storageManager, indexManager, versionManager = null, config }) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.versionManager = versionManager;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Set or update a record with comprehensive validation and error handling\n\t * @param {string|null} key - Record key or null for auto-generation\n\t * @param {Object} [data={}] - Record data\n\t * @param {Object} [options={}] - Operation options\n\t * @returns {Record} Created/updated record\n\t * @throws {ValidationError} If data validation fails\n\t */\n\tset (key, data = {}, options = {}) {\n\t\ttry {\n\t\t\tconst {\n\t\t\t\toverride = false,\n\t\t\t\tvalidate = true\n\t\t\t} = options;\n\n\t\t\t// Generate key if not provided\n\t\t\tif (key === null) {\n\t\t\t\tkey = data[this.config.key] ?? uuid();\n\t\t\t}\n\n\t\t\t// Ensure key is in data\n\t\t\tconst recordData = { ...data, [this.config.key]: key };\n\n\t\t\t// Validate against schema if configured\n\t\t\tif (validate && this.config.schema) {\n\t\t\t\tthis.config.schema.validate(recordData);\n\t\t\t}\n\n\t\t\t// Get existing record for merging and versioning\n\t\t\tconst existingRecord = this.storageManager.has(key) ? this.storageManager.get(key) : null;\n\t\t\tlet finalData = recordData;\n\n\t\t\t// Handle merging vs override\n\t\t\tif (existingRecord && !override) {\n\t\t\t\tfinalData = this._mergeRecords(existingRecord, recordData);\n\t\t\t}\n\n\t\t\t// Store version if versioning enabled\n\t\t\tif (this.versionManager && existingRecord) {\n\t\t\t\tthis.versionManager.addVersion(key, existingRecord);\n\t\t\t}\n\n\t\t\t// Update indexes\n\t\t\tif (existingRecord) {\n\t\t\t\tthis.indexManager.removeRecord(key, existingRecord);\n\t\t\t}\n\t\t\tthis.indexManager.addRecord(key, finalData);\n\n\t\t\t// Store record\n\t\t\tthis.storageManager.set(key, finalData);\n\n\t\t\t// Create record wrapper\n\t\t\tconst record = RecordFactory.create(key, finalData);\n\n\t\t\treturn record;\n\n\t\t} catch (error) {\n\t\t\tif (error instanceof HaroError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new ValidationError(`Failed to set record: ${error.message}`, \"record\", data);\n\t\t}\n\t}\n\n\t/**\n\t * Get a record by key with consistent return format\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Get options\n\t * @returns {Record|null} Record instance or null if not found\n\t */\n\tget (key, options = {}) {\n\t\tconst { includeVersions = false } = options;\n\n\t\tconst recordData = this.storageManager.get(key);\n\n\t\tif (!recordData) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Optimized: only create full Record with metadata if versioning is requested\n\t\tif (includeVersions && this.versionManager) {\n\t\t\tconst history = this.versionManager.getHistory(key);\n\t\t\tif (history) {\n\t\t\t\tconst metadata = { versions: history.versions };\n\n\t\t\t\treturn RecordFactory.create(key, recordData, metadata);\n\t\t\t}\n\t\t}\n\n\t\t// Default: create Record without expensive metadata operations\n\t\treturn RecordFactory.create(key, recordData);\n\t}\n\n\t/**\n\t * Delete a record with proper cleanup\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Delete options\n\t * @returns {boolean} True if deleted successfully\n\t * @throws {RecordNotFoundError} If record not found\n\t */\n\tdelete (key) {\n\t\tif (!this.storageManager.has(key)) {\n\t\t\tthrow new RecordNotFoundError(key, this.config.id);\n\t\t}\n\n\t\tconst recordData = this.storageManager.get(key);\n\n\t\t// Remove from indexes\n\t\tthis.indexManager.removeRecord(key, recordData);\n\n\t\t// Remove from store\n\t\tthis.storageManager.delete(key);\n\n\t\t// Cleanup versions\n\t\tif (this.versionManager) {\n\t\t\tthis.versionManager.disableVersioning(key);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if record exists\n\t */\n\thas (key) {\n\t\treturn this.storageManager.has(key);\n\t}\n\n\t/**\n\t * Merge two records\n\t * @param {Object} existing - Existing record\n\t * @param {Object} updates - Updates to apply\n\t * @returns {Object} Merged record\n\t * @private\n\t */\n\t_mergeRecords (existing, updates) {\n\t\tif (Array.isArray(existing) && Array.isArray(updates)) {\n\t\t\treturn [...existing, ...updates];\n\t\t}\n\n\t\tif (typeof existing === \"object\" && typeof updates === \"object\") {\n\t\t\tconst merged = { ...existing };\n\t\t\tfor (const [key, value] of Object.entries(updates)) {\n\t\t\t\tif (typeof value === \"object\" && value !== null && !Array.isArray(value) &&\n\t\t\t\t\ttypeof existing[key] === \"object\" && existing[key] !== null && !Array.isArray(existing[key])) {\n\t\t\t\t\tmerged[key] = this._mergeRecords(existing[key], value);\n\t\t\t\t} else {\n\t\t\t\t\tmerged[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn merged;\n\t\t}\n\n\t\treturn updates;\n\t}\n}\n","import { QueryError } from \"./errors.js\";\nimport { RecordCollection, RecordFactory } from \"./record.js\";\n\n/**\n * Manages complex querying operations and criteria matching\n */\nexport class QueryManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {QueryOptimizer} [dependencies.queryOptimizer] - Query optimizer\n\t */\n\tconstructor ({ storageManager, indexManager, queryOptimizer = null }) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.queryOptimizer = queryOptimizer;\n\t}\n\n\t/**\n\t * Find records using optimized queries\n\t * @param {Object} [criteria={}] - Search criteria\n\t * @param {Object} [options={}] - Query options\n\t * @returns {RecordCollection} Collection of matching records\n\t */\n\tfind (criteria = {}, options = {}) {\n\t\tconst {\n\t\t\tlimit,\n\t\t\toffset = 0\n\t\t} = options;\n\n\t\ttry {\n\t\t\t// Create query plan if optimizer is available\n\t\t\tlet plan = null;\n\t\t\tif (this.queryOptimizer) {\n\t\t\t\tconst query = { find: criteria, limit, offset };\n\t\t\t\tconst context = { indexManager: this.indexManager };\n\t\t\t\tplan = this.queryOptimizer.createPlan(query, context);\n\t\t\t\tplan.startExecution();\n\t\t\t}\n\n\t\t\t// Use index if available\n\t\t\tconst fields = Object.keys(criteria);\n\t\t\tconst optimalIndex = this.indexManager.getOptimalIndex(fields);\n\n\t\t\tlet recordKeys;\n\t\t\tif (optimalIndex) {\n\t\t\t\trecordKeys = this.indexManager.findByCriteria(criteria);\n\t\t\t} else {\n\t\t\t\t// Fallback to full scan\n\t\t\t\trecordKeys = new Set(this.storageManager.keys());\n\t\t\t}\n\n\t\t\t// Optimized: cache data during filtering to avoid double storage access\n\t\t\tconst matchingRecords = [];\n\t\t\tfor (const key of recordKeys) {\n\t\t\t\tconst recordData = this.storageManager.get(key);\n\t\t\t\tif (this._matchesCriteria(recordData, criteria)) {\n\t\t\t\t\t// Store both key and data to avoid second lookup\n\t\t\t\t\tmatchingRecords.push({ key, data: recordData });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply pagination early to avoid creating unnecessary Records\n\t\t\tconst start = offset;\n\t\t\tconst end = limit ? start + limit : matchingRecords.length;\n\t\t\tconst paginatedRecords = matchingRecords.slice(start, end);\n\n\t\t\t// Create Records from cached data (no additional storage access needed)\n\t\t\tconst records = paginatedRecords.map(({ key, data }) => {\n\t\t\t\treturn RecordFactory.create(key, data);\n\t\t\t});\n\n\t\t\tif (plan) {\n\t\t\t\tplan.completeExecution(records.length);\n\t\t\t\tthis.queryOptimizer.recordExecution(plan);\n\t\t\t}\n\n\t\t\treturn new RecordCollection(records);\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Find operation failed: ${error.message}`, criteria, \"find\");\n\t\t}\n\t}\n\n\t/**\n\t * Advanced filtering with predicate logic\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\twhere (predicate, options = {}) {\n\t\ttry {\n\t\t\tif (typeof predicate === \"function\") {\n\t\t\t\treturn this._filterByFunction(predicate, options);\n\t\t\t}\n\n\t\t\tif (typeof predicate === \"object\" && predicate !== null) {\n\t\t\t\treturn this._filterByObject(predicate, options);\n\t\t\t}\n\n\t\t\tthrow new QueryError(\"Predicate must be a function or object\", predicate, \"where\");\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Where operation failed: ${error.message}`, predicate, \"where\");\n\t\t}\n\t}\n\n\t/**\n\t * Check if record matches criteria\n\t * @param {Object} record - Record to check\n\t * @param {Object} criteria - Criteria object\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesCriteria (record, criteria) {\n\t\tfor (const [field, value] of Object.entries(criteria)) {\n\t\t\tconst recordValue = record[field];\n\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\tif (!value.test(recordValue)) return false;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (Array.isArray(recordValue)) {\n\t\t\t\t\tif (!value.some(v => recordValue.includes(v))) return false;\n\t\t\t\t} else if (!value.includes(recordValue)) return false;\n\t\t\t} else if (recordValue !== value) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Filter by function predicate\n\t * @param {Function} predicate - Filter function\n\t * @param {Object} options - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t * @private\n\t */\n\t_filterByFunction (predicate, options) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tconst records = [];\n\n\t\tlet count = 0;\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\t// For backwards compatibility, pass plain objects to predicates\n\t\t\tif (predicate(recordData)) {\n\t\t\t\tif (count >= offset) {\n\t\t\t\t\trecords.push(RecordFactory.create(key, recordData));\n\t\t\t\t\tif (limit && records.length >= limit) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(records);\n\t}\n\n\t/**\n\t * Filter by object predicate\n\t * @param {Object} predicate - Filter object\n\t * @param {Object} options - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t * @private\n\t */\n\t_filterByObject (predicate, options) {\n\t\treturn this.find(predicate, options);\n\t}\n\n\t/**\n\t * Search records by value in specified fields\n\t * @param {*} value - Search value\n\t * @param {string|Array<string>} [fields] - Fields to search\n\t * @param {Object} [options={}] - Search options\n\t * @returns {RecordCollection} Matching records\n\t */\n\tsearch (value, fields, options = {}) {\n\t\t// Function-based search (delegate to where)\n\t\tif (typeof value === \"function\") {\n\t\t\treturn this.where(value, options);\n\t\t}\n\n\t\t// If no fields specified, search all available indexes\n\t\tif (!fields) {\n\t\t\tconst availableIndexes = this.indexManager.listIndexes();\n\t\t\tif (availableIndexes.length === 0) {\n\t\t\t\t// No indexes, full scan\n\t\t\t\treturn this._fullScanSearch(value, options);\n\t\t\t}\n\t\t\tfields = availableIndexes;\n\t\t}\n\n\t\tconst fieldArray = Array.isArray(fields) ? fields : [fields];\n\t\tconst matchingKeys = new Set();\n\n\t\t// Try to use indexes for each field\n\t\tfor (const field of fieldArray) {\n\t\t\tif (this.indexManager.hasIndex(field)) {\n\t\t\t\t// Use index-based search\n\t\t\t\tconst indexKeys = this._searchIndex(field, value);\n\t\t\t\tindexKeys.forEach(key => matchingKeys.add(key));\n\t\t\t} else {\n\t\t\t\t// Fallback to field-based search for non-indexed fields\n\t\t\t\tconst searchKeys = this._searchField(field, value);\n\t\t\t\tsearchKeys.forEach(key => matchingKeys.add(key));\n\t\t\t}\n\t\t}\n\n\t\t// Convert keys to RecordCollection\n\t\treturn this._keysToRecordCollection(matchingKeys);\n\t}\n\n\t/**\n\t * Filter records using a predicate function\n\t * @param {Function} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\tfilter (predicate, options = {}) {\n\t\treturn this._filterByFunction(predicate, options);\n\t}\n\n\t/**\n\t * Map over records and transform them\n\t * @param {Function} mapper - Mapping function\n\t * @param {Object} [options={}] - Map options\n\t * @returns {Array} Mapped results\n\t */\n\tmap (mapper, options = {}) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tconst results = [];\n\t\tlet count = 0;\n\n\t\tfor (const [, recordData] of this.storageManager.entries()) {\n\t\t\tif (count >= offset) {\n\t\t\t\t// For backwards compatibility, pass plain objects to mapper\n\t\t\t\tresults.push(mapper(recordData));\n\t\t\t\tif (limit && results.length >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Reduce records to a single value\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} initialValue - Initial value\n\t * @param {Object} [options={}] - Reduce options\n\t * @returns {*} Reduced value\n\t */\n\treduce (reducer, initialValue, options = {}) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tlet accumulator = initialValue;\n\t\tlet count = 0;\n\t\tlet processedCount = 0;\n\n\t\tfor (const [, recordData] of this.storageManager.entries()) {\n\t\t\tif (count >= offset) {\n\t\t\t\t// For backwards compatibility, pass plain objects to reducer\n\t\t\t\taccumulator = reducer(accumulator, recordData, processedCount);\n\t\t\t\tprocessedCount++;\n\t\t\t\tif (limit && processedCount >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Execute a function for each record\n\t * @param {Function} callback - Callback function\n\t * @param {Object} [thisArg] - Value to use as this when executing callback\n\t * @param {Object} [options={}] - Options\n\t */\n\tforEach (callback, thisArg, options = {}) {\n\t\t// Handle overloaded parameters (callback, options) vs (callback, thisArg, options)\n\t\tif (thisArg && !options && typeof thisArg === \"object\" && (thisArg.limit !== undefined || thisArg.offset !== undefined)) {\n\t\t\toptions = thisArg;\n\t\t\tthisArg = undefined;\n\t\t}\n\n\t\tconst { limit, offset = 0 } = options;\n\t\tlet count = 0;\n\t\tlet processedCount = 0;\n\n\t\tfor (const [, recordData] of this.storageManager.entries()) {\n\t\t\tif (count >= offset) {\n\t\t\t\t// For backwards compatibility, pass plain objects to callback\n\t\t\t\tif (thisArg !== undefined) {\n\t\t\t\t\tcallback.call(thisArg, recordData, processedCount);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(recordData, processedCount);\n\t\t\t\t}\n\t\t\t\tprocessedCount++;\n\t\t\t\tif (limit && processedCount >= limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t}\n\n\t/**\n\t * Search within a specific index\n\t * @param {string} indexName - Index name\n\t * @param {*} value - Search value\n\t * @returns {Set<string>} Set of matching record keys\n\t * @private\n\t */\n\t_searchIndex (indexName, value) {\n\t\tconst matchingKeys = new Set();\n\n\t\ttry {\n\t\t\t// For exact matches, use IndexManager's findByIndex method\n\t\t\tif (typeof value === \"string\" && !value.includes(\"*\") && !value.includes(\"?\")) {\n\t\t\t\tconst exactKeys = this.indexManager.findByIndex(indexName, value);\n\t\t\t\texactKeys.forEach(key => matchingKeys.add(key));\n\t\t\t} else {\n\t\t\t\t// For partial matches, search through all index keys\n\t\t\t\tconst indexStorage = this.indexManager._indexes.get(indexName);\n\t\t\t\tif (indexStorage) {\n\t\t\t\t\tfor (const [indexKey, recordKeys] of indexStorage._storage.entries()) {\n\t\t\t\t\t\tif (this._matchesSearchValue(indexKey, value)) {\n\t\t\t\t\t\t\trecordKeys.forEach(key => matchingKeys.add(key));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {\n\t\t\t// Fallback to empty set on error\n\t\t}\n\n\t\treturn matchingKeys;\n\t}\n\n\t/**\n\t * Search within a specific field (non-indexed)\n\t * @param {string} field - Field name\n\t * @param {*} value - Search value\n\t * @returns {Set<string>} Set of matching record keys\n\t * @private\n\t */\n\t_searchField (field, value) {\n\t\tconst matchingKeys = new Set();\n\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\tconst fieldValue = this._getFieldValue(recordData, field);\n\t\t\tif (this._matchesSearchValue(fieldValue, value)) {\n\t\t\t\tmatchingKeys.add(key);\n\t\t\t}\n\t\t}\n\n\t\treturn matchingKeys;\n\t}\n\n\t/**\n\t * Perform full scan search when no indexes available\n\t * @param {*} value - Search value\n\t * @param {Object} options - Search options\n\t * @returns {RecordCollection} Matching records\n\t * @private\n\t */\n\t_fullScanSearch (value, options) {\n\t\tconst records = [];\n\t\tconst { limit, offset = 0 } = options;\n\t\tlet count = 0;\n\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\tif (this._searchInRecord(recordData, value)) {\n\t\t\t\tif (count >= offset) {\n\t\t\t\t\trecords.push(RecordFactory.create(key, recordData));\n\t\t\t\t\tif (limit && records.length >= limit) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(records);\n\t}\n\n\t/**\n\t * Convert a set of keys to a RecordCollection\n\t * @param {Set<string>|Array<string>} keys - Record keys\n\t * @returns {RecordCollection} Collection of Record objects\n\t * @private\n\t */\n\t_keysToRecordCollection (keys) {\n\t\tconst results = [];\n\t\tfor (const key of keys) {\n\t\t\tconst recordData = this.storageManager.get(key);\n\t\t\tif (recordData) {\n\t\t\t\tresults.push(RecordFactory.create(key, recordData));\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(results);\n\t}\n\n\t/**\n\t * Get field value from record (supports nested fields)\n\t * @param {Object} record - Record object\n\t * @param {string} field - Field path (e.g., \"user.name\")\n\t * @returns {*} Field value\n\t * @private\n\t */\n\t_getFieldValue (record, field) {\n\t\tconst parts = field.split(\".\");\n\t\tlet value = record;\n\n\t\tfor (const part of parts) {\n\t\t\tif (value && typeof value === \"object\") {\n\t\t\t\tvalue = value[part];\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Check if a value matches the search criteria\n\t * @param {*} fieldValue - Field value to test\n\t * @param {*} searchValue - Search value\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesSearchValue (fieldValue, searchValue) {\n\t\tif (searchValue instanceof RegExp) {\n\t\t\treturn searchValue.test(String(fieldValue));\n\t\t}\n\n\t\tif (typeof searchValue === \"string\") {\n\t\t\treturn String(fieldValue).toLowerCase().includes(searchValue.toLowerCase());\n\t\t}\n\n\t\treturn fieldValue === searchValue;\n\t}\n\n\t/**\n\t * Search within a record for a value\n\t * @param {Object} record - Record to search\n\t * @param {*} value - Value to search for\n\t * @returns {boolean} True if found\n\t * @private\n\t */\n\t_searchInRecord (record, value) {\n\t\tconst searchString = String(value).toLowerCase();\n\n\t\tconst searchObject = obj => {\n\t\t\tfor (const val of Object.values(obj)) {\n\t\t\t\tif (val !== null && val !== undefined) {\n\t\t\t\t\tif (typeof val === \"object\") {\n\t\t\t\t\t\tif (Array.isArray(val)) {\n\t\t\t\t\t\t\tif (val.some(item => String(item).toLowerCase().includes(searchString))) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (searchObject(val)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (String(val).toLowerCase().includes(searchString)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\treturn searchObject(record);\n\t}\n}\n","import { QueryError, TransactionError } from \"./errors.js\";\n\n/**\n * Manages batch operations with transaction support\n */\nexport class BatchManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {CRUDManager} dependencies.crudManager - CRUD manager\n\t * @param {TransactionManager} [dependencies.transactionManager] - Transaction manager\n\t * @param {LifecycleManager} dependencies.lifecycleManager - Lifecycle manager\n\t */\n\tconstructor ({ crudManager, transactionManager = null, lifecycleManager }) {\n\t\tthis.crudManager = crudManager;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.lifecycleManager = lifecycleManager;\n\t}\n\n\t/**\n\t * Batch operations with transaction support\n\t * @param {Array} operations - Array of operations or records\n\t * @param {string} [type='set'] - Operation type\n\t * @param {Object} [options={}] - Batch options\n\t * @returns {Promise<Array>|Array} Array of results (Promise when using transactions)\n\t */\n\tbatch (operations, type = \"set\", options = {}) {\n\t\tconst {\n\t\t\ttransaction = null,\n\t\t\tatomic = false\n\t\t} = options;\n\n\t\ttry {\n\t\t\t// Use transaction for atomic operations\n\t\t\tif (atomic || transaction) {\n\t\t\t\treturn this._executeBatchInTransaction(operations, type, transaction);\n\t\t\t}\n\n\t\t\t// Execute operations individually\n\t\t\tconst results = [];\n\t\t\tfor (const operation of operations) {\n\t\t\t\ttry {\n\t\t\t\t\tlet result;\n\t\t\t\t\tif (type === \"set\") {\n\t\t\t\t\t\tresult = this.crudManager.set(null, operation, { batch: true });\n\t\t\t\t\t} else if (type === \"del\") {\n\t\t\t\t\t\tthis.crudManager.delete(operation, { batch: true });\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(result);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tresults.push(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trigger batch lifecycle hook\n\t\t\tthis.lifecycleManager.onbatch(results, type);\n\n\t\t\treturn results;\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Batch operation failed: ${error.message}`, operations, \"batch\");\n\t\t}\n\t}\n\n\t/**\n\t * Execute batch in transaction\n\t * @param {Array} operations - Operations to execute\n\t * @param {string} type - Operation type\n\t * @param {Transaction} [transaction] - Existing transaction\n\t * @returns {Promise<Array>} Operation results\n\t * @private\n\t */\n\tasync _executeBatchInTransaction (operations, type, transaction) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new TransactionError(\"Transaction manager not available for atomic batch operations\");\n\t\t}\n\n\t\tconst ownTransaction = !transaction;\n\t\tif (ownTransaction) {\n\t\t\ttransaction = this.transactionManager.begin();\n\t\t}\n\n\t\ttry {\n\t\t\tconst results = [];\n\t\t\tfor (const operation of operations) {\n\t\t\t\tif (type === \"set\") {\n\t\t\t\t\tconst result = this._executeSetInTransaction(null, operation, transaction);\n\t\t\t\t\tresults.push(result);\n\t\t\t\t} else if (type === \"del\") {\n\t\t\t\t\tthis._executeDeleteInTransaction(operation, transaction);\n\t\t\t\t\tresults.push(true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ownTransaction) {\n\t\t\t\tawait this.transactionManager.commit(transaction.id);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t} catch (error) {\n\t\t\tif (ownTransaction) {\n\t\t\t\tthis.transactionManager.abort(transaction.id, error.message);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Execute set operation in transaction\n\t * @param {string|null} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Transaction} transaction - Transaction instance\n\t * @returns {Record} Created record\n\t * @private\n\t */\n\t_executeSetInTransaction (key, data, transaction) {\n\t\t// Add operation to transaction log\n\t\tconst oldValue = key ? this.crudManager.storageManager.get(key) : null;\n\t\ttransaction.addOperation(\"set\", key, oldValue, data);\n\n\t\t// Execute operation\n\t\treturn this.crudManager.set(key, data, { batch: true });\n\t}\n\n\t/**\n\t * Execute delete operation in transaction\n\t * @param {string} key - Record key\n\t * @param {Transaction} transaction - Transaction instance\n\t * @private\n\t */\n\t_executeDeleteInTransaction (key, transaction) {\n\t\t// Add operation to transaction log\n\t\tconst oldValue = this.crudManager.storageManager.get(key);\n\t\ttransaction.addOperation(\"delete\", key, oldValue);\n\n\t\t// Execute operation\n\t\tthis.crudManager.delete(key, { batch: true });\n\t}\n}\n","import { DataStream } from \"./data-stream.js\";\n\n/**\n * Manages streaming operations for large datasets\n */\nexport class StreamManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t */\n\tconstructor ({ storageManager }) {\n\t\tthis.storageManager = storageManager;\n\t}\n\n\t/**\n\t * Create a data stream for large datasets\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Data stream instance\n\t */\n\tstream (options = {}) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\tconst iterator = {\n\t\t\tnext: () => {\n\t\t\t\tif (index < entries.length) {\n\t\t\t\t\treturn { value: entries[index++], done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a filtered stream\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Filtered stream\n\t */\n\tstreamWhere (predicate, options = {}) {\n\t\tconst iterator = this._createFilteredIterator(predicate);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a transformed stream\n\t * @param {Function} transform - Transform function\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Transformed stream\n\t */\n\tstreamMap (transform, options = {}) {\n\t\tconst iterator = this._createTransformIterator(transform);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a limited stream\n\t * @param {number} limit - Maximum number of records\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Limited stream\n\t */\n\tstreamTake (limit, options = {}) {\n\t\tconst iterator = this._createLimitedIterator(limit);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create iterator for filtered data\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @returns {Iterator} Filtered iterator\n\t * @private\n\t */\n\t_createFilteredIterator (predicate) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\twhile (index < entries.length) {\n\t\t\t\t\tconst [key, value] = entries[index++];\n\n\t\t\t\t\tif (typeof predicate === \"function\") {\n\t\t\t\t\t\tif (predicate({ key, ...value })) {\n\t\t\t\t\t\t\treturn { value: [key, value], done: false };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof predicate === \"object\") {\n\t\t\t\t\t\tif (this._matchesCriteria(value, predicate)) {\n\t\t\t\t\t\t\treturn { value: [key, value], done: false };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create iterator for transformed data\n\t * @param {Function} transform - Transform function\n\t * @returns {Iterator} Transform iterator\n\t * @private\n\t */\n\t_createTransformIterator (transform) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tif (index < entries.length) {\n\t\t\t\t\tconst [key, value] = entries[index++];\n\t\t\t\t\tconst transformed = transform({ key, ...value });\n\n\t\t\t\t\treturn { value: [key, transformed], done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create iterator for limited data\n\t * @param {number} limit - Record limit\n\t * @returns {Iterator} Limited iterator\n\t * @private\n\t */\n\t_createLimitedIterator (limit) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tif (index < limit && index < entries.length) {\n\t\t\t\t\tconst entry = entries[index++];\n\n\t\t\t\t\treturn { value: entry, done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Check if record matches criteria\n\t * @param {Object} record - Record to check\n\t * @param {Object} criteria - Criteria object\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesCriteria (record, criteria) {\n\t\tfor (const [field, value] of Object.entries(criteria)) {\n\t\t\tconst recordValue = record[field];\n\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\tif (!value.test(recordValue)) return false;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (Array.isArray(recordValue)) {\n\t\t\t\t\tif (!value.some(v => recordValue.includes(v))) return false;\n\t\t\t\t} else if (!value.includes(recordValue)) return false;\n\t\t\t} else if (recordValue !== value) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","/**\n * Manages statistics gathering and memory usage estimation\n */\nexport class StatisticsManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {VersionManager} [dependencies.versionManager] - Version manager\n\t * @param {TransactionManager} [dependencies.transactionManager] - Transaction manager\n\t * @param {QueryOptimizer} [dependencies.queryOptimizer] - Query optimizer\n\t * @param {Object} dependencies.config - Configuration\n\t */\n\tconstructor ({\n\t\tstorageManager,\n\t\tindexManager,\n\t\tversionManager = null,\n\t\ttransactionManager = null,\n\t\tqueryOptimizer = null,\n\t\tconfig\n\t}) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.versionManager = versionManager;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.queryOptimizer = queryOptimizer;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst stats = {\n\t\t\trecords: this.storageManager.size,\n\t\t\tconfiguration: this.config,\n\t\t\tindexes: this.indexManager.getStats(),\n\t\t\tmemory: this._estimateMemoryUsage()\n\t\t};\n\n\t\tif (this.versionManager) {\n\t\t\tstats.versions = this.versionManager.getStats();\n\t\t}\n\n\t\tif (this.transactionManager) {\n\t\t\tstats.transactions = this.transactionManager.getStats();\n\t\t}\n\n\t\tif (this.queryOptimizer) {\n\t\t\tstats.queries = this.queryOptimizer.getStats();\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\t/**\n\t * Get storage statistics\n\t * @returns {Object} Storage statistics\n\t */\n\tgetStorageStats () {\n\t\treturn {\n\t\t\tsize: this.storageManager.size,\n\t\t\tmemoryUsage: this.storageManager.estimateMemoryUsage(),\n\t\t\ttype: this.config.immutable ? \"immutable\" : \"mutable\"\n\t\t};\n\t}\n\n\t/**\n\t * Get index statistics\n\t * @returns {Object} Index statistics\n\t */\n\tgetIndexStats () {\n\t\treturn this.indexManager.getStats();\n\t}\n\n\t/**\n\t * Get version statistics\n\t * @returns {Object|null} Version statistics\n\t */\n\tgetVersionStats () {\n\t\treturn this.versionManager ? this.versionManager.getStats() : null;\n\t}\n\n\t/**\n\t * Get transaction statistics\n\t * @returns {Object|null} Transaction statistics\n\t */\n\tgetTransactionStats () {\n\t\treturn this.transactionManager ? this.transactionManager.getStats() : null;\n\t}\n\n\t/**\n\t * Get query optimization statistics\n\t * @returns {Object|null} Query statistics\n\t */\n\tgetQueryStats () {\n\t\treturn this.queryOptimizer ? this.queryOptimizer.getStats() : null;\n\t}\n\n\t/**\n\t * Get performance metrics\n\t * @returns {Object} Performance metrics\n\t */\n\tgetPerformanceMetrics () {\n\t\tconst stats = this.getStats();\n\n\t\treturn {\n\t\t\trecordsPerIndex: stats.records / Math.max(1, Object.keys(stats.indexes).length),\n\t\t\tmemoryPerRecord: stats.memory.total / Math.max(1, stats.records),\n\t\t\tindexEfficiency: this._calculateIndexEfficiency(stats),\n\t\t\toverheadRatio: stats.memory.overhead / Math.max(1, stats.memory.data)\n\t\t};\n\t}\n\n\t/**\n\t * Estimate memory usage\n\t * @returns {Object} Memory usage statistics\n\t * @private\n\t */\n\t_estimateMemoryUsage () {\n\t\tconst dataSize = this.storageManager.estimateMemoryUsage();\n\t\tconst indexSize = this.indexManager.getStats().totalMemoryUsage || 0;\n\t\tconst versionSize = this.versionManager ? this.versionManager.getStats().totalSize : 0;\n\n\t\treturn {\n\t\t\ttotal: dataSize + indexSize + versionSize,\n\t\t\tdata: dataSize,\n\t\t\tindexes: indexSize,\n\t\t\tversions: versionSize,\n\t\t\toverhead: indexSize + versionSize\n\t\t};\n\t}\n\n\t/**\n\t * Calculate index efficiency\n\t * @param {Object} stats - Statistics object\n\t * @returns {number} Efficiency percentage\n\t * @private\n\t */\n\t_calculateIndexEfficiency (stats) {\n\t\tif (!stats.indexes || !stats.queries) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst totalQueries = stats.queries.totalExecutions || 1;\n\t\tconst indexedQueries = stats.queries.indexedExecutions || 0;\n\n\t\treturn indexedQueries / totalQueries * 100;\n\t}\n\n\t/**\n\t * Generate performance report\n\t * @returns {Object} Performance report\n\t */\n\tgenerateReport () {\n\t\tconst stats = this.getStats();\n\t\tconst performance = this.getPerformanceMetrics();\n\n\t\treturn {\n\t\t\tsummary: {\n\t\t\t\ttotalRecords: stats.records,\n\t\t\t\ttotalMemory: stats.memory.total,\n\t\t\t\tactiveIndexes: Object.keys(stats.indexes).length,\n\t\t\t\tversioning: !!this.versionManager,\n\t\t\t\ttransactions: !!this.transactionManager,\n\t\t\t\toptimization: !!this.queryOptimizer\n\t\t\t},\n\t\t\tperformance,\n\t\t\tbreakdown: {\n\t\t\t\tstorage: this.getStorageStats(),\n\t\t\t\tindexes: this.getIndexStats(),\n\t\t\t\tversions: this.getVersionStats(),\n\t\t\t\ttransactions: this.getTransactionStats(),\n\t\t\t\tqueries: this.getQueryStats()\n\t\t\t},\n\t\t\trecommendations: this._generateRecommendations(stats, performance)\n\t\t};\n\t}\n\n\t/**\n\t * Generate performance recommendations\n\t * @param {Object} stats - Statistics object\n\t * @param {Object} performance - Performance metrics\n\t * @returns {Array} Array of recommendations\n\t * @private\n\t */\n\t_generateRecommendations (stats, performance) {\n\t\tconst recommendations = [];\n\n\t\tif (performance.indexEfficiency < 50) {\n\t\t\trecommendations.push(\"Consider adding more indexes for frequently queried fields\");\n\t\t}\n\n\t\tif (performance.overheadRatio > 2) {\n\t\t\trecommendations.push(\"High memory overhead detected - consider optimizing indexes or version retention\");\n\t\t}\n\n\t\tif (stats.records > 10000 && !this.queryOptimizer) {\n\t\t\trecommendations.push(\"Enable query optimization for better performance with large datasets\");\n\t\t}\n\n\t\tif (stats.memory.versions > stats.memory.data) {\n\t\t\trecommendations.push(\"Version storage is larger than data - consider adjusting retention policy\");\n\t\t}\n\n\t\treturn recommendations;\n\t}\n}\n","import { ValidationError } from \"./errors.js\";\n\n/**\n * Manages lifecycle hooks and events\n */\nexport class LifecycleManager {\n\t/**\n\t * @param {Object} [hooks={}] - Custom lifecycle hooks\n\t */\n\tconstructor (hooks = {}) {\n\t\t// Default no-op hooks\n\t\tthis.hooks = {\n\t\t\tbeforeSet: () => {},\n\t\t\tonset: () => {},\n\t\t\tbeforeDelete: () => {},\n\t\t\tondelete: () => {},\n\t\t\tbeforeClear: () => {},\n\t\t\tonclear: () => {},\n\t\t\tonbatch: () => {},\n\t\t\t...hooks\n\t\t};\n\t}\n\n\t/**\n\t * Register a lifecycle hook\n\t * @param {string} event - Event name\n\t * @param {Function} handler - Event handler\n\t */\n\tregisterHook (event, handler) {\n\t\tif (typeof handler !== \"function\") {\n\t\t\tthrow new ValidationError(`Hook handler for '${event}' must be a function`, \"handler\", handler);\n\t\t}\n\t\tthis.hooks[event] = handler;\n\t}\n\n\t/**\n\t * Unregister a lifecycle hook\n\t * @param {string} event - Event name\n\t */\n\tunregisterHook (event) {\n\t\tthis.hooks[event] = () => {};\n\t}\n\n\t/**\n\t * Execute a lifecycle hook\n\t * @param {string} event - Event name\n\t * @param {...*} args - Arguments to pass to hook\n\t * @returns {*} Hook result\n\t */\n\texecuteHook (event, ...args) {\n\t\tif (this.hooks[event]) {\n\t\t\treturn this.hooks[event](...args);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Before set hook\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} options - Operation options\n\t */\n\tbeforeSet (key, data, options) {\n\t\treturn this.executeHook(\"beforeSet\", key, data, options);\n\t}\n\n\t/**\n\t * On set hook\n\t * @param {Record} record - Created/updated record\n\t * @param {Object} options - Operation options\n\t */\n\tonset (record, options) {\n\t\treturn this.executeHook(\"onset\", record, options);\n\t}\n\n\t/**\n\t * Before delete hook\n\t * @param {string} key - Record key\n\t * @param {boolean} batch - Is batch operation\n\t */\n\tbeforeDelete (key, batch) {\n\t\treturn this.executeHook(\"beforeDelete\", key, batch);\n\t}\n\n\t/**\n\t * On delete hook\n\t * @param {string} key - Deleted record key\n\t */\n\tondelete (key) {\n\t\treturn this.executeHook(\"ondelete\", key);\n\t}\n\n\t/**\n\t * Before clear hook\n\t */\n\tbeforeClear () {\n\t\treturn this.executeHook(\"beforeClear\");\n\t}\n\n\t/**\n\t * On clear hook\n\t */\n\tonclear () {\n\t\treturn this.executeHook(\"onclear\");\n\t}\n\n\t/**\n\t * On batch hook\n\t * @param {Array} results - Batch operation results\n\t * @param {string} type - Operation type\n\t */\n\tonbatch (results, type) {\n\t\treturn this.executeHook(\"onbatch\", results, type);\n\t}\n\n\t/**\n\t * Get all registered hooks\n\t * @returns {Object} Hooks object\n\t */\n\tgetHooks () {\n\t\treturn { ...this.hooks };\n\t}\n\n\t/**\n\t * Check if hook is registered\n\t * @param {string} event - Event name\n\t * @returns {boolean} True if hook exists\n\t */\n\thasHook (event) {\n\t\treturn event in this.hooks && typeof this.hooks[event] === \"function\";\n\t}\n\n\t/**\n\t * Clear all hooks (reset to no-ops)\n\t */\n\tclearHooks () {\n\t\tfor (const event in this.hooks) {\n\t\t\tthis.hooks[event] = () => {};\n\t\t}\n\t}\n}\n","import { randomUUID as uuid } from \"crypto\";\nimport {\n\tConfigurationError,\n\tTransactionError,\n\tErrorRecovery\n} from \"./errors.js\";\nimport { DataTypes } from \"./data-types.js\";\nimport { FieldConstraint } from \"./field-constraint.js\";\nimport { Schema } from \"./schema.js\";\nimport { ConfigValidator } from \"./config-validator.js\";\nimport { Constraints } from \"./constraints.js\";\nimport { IsolationLevels } from \"./constants.js\";\nimport { Record, RecordCollection, RecordFactory } from \"./record.js\";\nimport { IndexManager, IndexTypes } from \"./index-manager.js\";\nimport { VersionManager, RetentionPolicies } from \"./version-manager.js\";\nimport { TransactionManager } from \"./transaction-manager.js\";\nimport { QueryOptimizer, QueryTypes } from \"./query-optimizer.js\";\nimport { ImmutableStore } from \"./immutable-store.js\";\nimport { DataStream } from \"./data-stream.js\";\nimport { StorageManager } from \"./storage-manager.js\";\nimport { CRUDManager } from \"./crud-manager.js\";\nimport { QueryManager } from \"./query-manager.js\";\nimport { BatchManager } from \"./batch-manager.js\";\nimport { StreamManager } from \"./stream-manager.js\";\nimport { StatisticsManager } from \"./statistics-manager.js\";\nimport { LifecycleManager } from \"./lifecycle-manager.js\";\n\n\n/**\n * Haro class with all design flaws addressed and enterprise features added\n */\nexport class Haro {\n\t/**\n\t * @param {Array|Object} [data] - Initial data or configuration\n\t * @param {Object} [config={}] - Configuration options\n\t */\n\tconstructor (data = null, config = {}) {\n\t\t// Set defaults first\n\t\tconst defaults = {\n\t\t\tdelimiter: \"|\",\n\t\t\tid: uuid(),\n\t\t\timmutable: false,\n\t\t\tindex: [],\n\t\t\tkey: \"id\",\n\t\t\tversioning: false,\n\t\t\tschema: null,\n\t\t\tretentionPolicy: { type: RetentionPolicies.NONE },\n\t\t\tenableTransactions: false,\n\t\t\tenableOptimization: true\n\t\t};\n\n\t\t// Handle parameter overloading and merge with defaults\n\t\tlet userConfig;\n\t\tif (Array.isArray(data) || data === null) {\n\t\t\tuserConfig = ConfigValidator.validate(config);\n\t\t\tthis.initialData = data;\n\t\t} else {\n\t\t\tuserConfig = ConfigValidator.validate(data);\n\t\t\tthis.initialData = null;\n\t\t}\n\n\t\t// Merge defaults with user configuration (user config takes precedence)\n\t\tthis.config = { ...defaults, ...userConfig };\n\n\t\t// Initialize core managers\n\t\tthis.storageManager = new StorageManager({ immutable: this.config.immutable });\n\t\tthis.indexManager = new IndexManager(this.config.delimiter);\n\t\tthis.versionManager = this.config.versioning ?\n\t\t\tnew VersionManager(this.config.retentionPolicy) :\n\t\t\tnull;\n\t\tthis.transactionManager = this.config.enableTransactions ?\n\t\t\tnew TransactionManager() :\n\t\t\tnull;\n\t\tthis.queryOptimizer = this.config.enableOptimization ?\n\t\t\tnew QueryOptimizer() :\n\t\t\tnull;\n\n\t\t// Initialize lifecycle manager\n\t\tthis.lifecycleManager = new LifecycleManager();\n\n\t\t// Initialize specialized managers\n\t\tthis.crudManager = new CRUDManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tversionManager: this.versionManager,\n\t\t\tconfig: this.config\n\t\t});\n\n\t\tthis.queryManager = new QueryManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tqueryOptimizer: this.queryOptimizer\n\t\t});\n\n\t\tthis.batchManager = new BatchManager({\n\t\t\tcrudManager: this.crudManager,\n\t\t\ttransactionManager: this.transactionManager,\n\t\t\tlifecycleManager: this.lifecycleManager\n\t\t});\n\n\t\tthis.streamManager = new StreamManager({\n\t\t\tstorageManager: this.storageManager\n\t\t});\n\n\t\tthis.statisticsManager = new StatisticsManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tversionManager: this.versionManager,\n\t\t\ttransactionManager: this.transactionManager,\n\t\t\tqueryOptimizer: this.queryOptimizer,\n\t\t\tconfig: this.config\n\t\t});\n\n\t\t// Create indexes\n\t\tfor (const indexField of this.config.index) {\n\t\t\tthis.indexManager.createIndex(indexField, indexField);\n\t\t}\n\n\t\t// Properties for backward compatibility\n\t\tObject.defineProperty(this, \"data\", {\n\t\t\tget: () => this.storageManager.getStore(),\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(this, \"size\", {\n\t\t\tget: () => this.storageManager.size,\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(this, \"registry\", {\n\t\t\tget: () => this.storageManager.keys(),\n\t\t\tenumerable: true\n\t\t});\n\n\t\t// Initialize with data if provided\n\t\tif (this.initialData && Array.isArray(this.initialData)) {\n\t\t\tthis.batch(this.initialData);\n\t\t}\n\t}\n\n\t/**\n\t * Set or update a record with comprehensive validation and error handling\n\t * @param {string|null} key - Record key or null for auto-generation\n\t * @param {Object} [data={}] - Record data\n\t * @param {Object} [options={}] - Operation options\n\t * @returns {Record} Created/updated record\n\t * @throws {ValidationError} If data validation fails\n\t */\n\tset (key, data = {}, options = {}) {\n\t\tconst {\n\t\t\tbatch = false,\n\t\t\ttransaction = null\n\t\t} = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"set\", key, data, options);\n\t\t}\n\n\t\t// Trigger lifecycle hook\n\t\tthis.lifecycleManager.beforeSet(key, data, options);\n\n\t\t// Delegate to CRUD manager (now optimized)\n\t\tconst record = this.crudManager.set(key, data, options);\n\n\t\t// Trigger lifecycle hook\n\t\tif (!batch) {\n\t\t\tthis.lifecycleManager.onset(record, options);\n\t\t}\n\n\t\treturn record;\n\t}\n\n\t/**\n\t * Get a record by key with consistent return format\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Get options\n\t * @returns {Record|null} Record instance or null if not found\n\t */\n\tget (key, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"get\", key, options);\n\t\t}\n\n\t\t// Delegate to CRUD manager (now optimized)\n\t\treturn this.crudManager.get(key, options);\n\t}\n\n\t/**\n\t * Delete a record with proper cleanup\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Delete options\n\t * @returns {boolean} True if deleted successfully\n\t * @throws {RecordNotFoundError} If record not found\n\t */\n\tdelete (key, options = {}) {\n\t\tconst {\n\t\t\tbatch = false,\n\t\t\ttransaction = null\n\t\t} = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"delete\", key, options);\n\t\t}\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.beforeDelete(key, batch);\n\n\t\t// Delegate to CRUD manager\n\t\tconst result = this.crudManager.delete(key, options);\n\n\t\t// Lifecycle hook\n\t\tif (!batch) {\n\t\t\tthis.lifecycleManager.ondelete(key);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if record exists\n\t */\n\thas (key) {\n\t\t// Direct access to storage for maximum performance\n\t\treturn this.storageManager.has(key);\n\t}\n\n\t/**\n\t * Get all record keys (backwards compatibility)\n\t * @returns {Array<string>} Array of record keys\n\t */\n\tkeys () {\n\t\treturn this.storageManager.keys();\n\t}\n\n\t/**\n\t * Get all record values (backwards compatibility)\n\t * @returns {IterableIterator<Object>} Iterable of record values\n\t */\n\tvalues () {\n\t\treturn this.storageManager.values();\n\t}\n\n\t/**\n\t * Get all record entries as [key, value] pairs (backwards compatibility)\n\t * @returns {IterableIterator<[string, Object]>} Iterable of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn this.storageManager.entries();\n\t}\n\n\t/**\n\t * Convert store to array (backwards compatibility)\n\t * @returns {Array<Object>} Array of all records\n\t */\n\ttoArray () {\n\t\treturn Array.from(this.values());\n\t}\n\n\t/**\n\t * Filter records using a predicate (backwards compatibility)\n\t * @param {Function} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\tfilter (predicate, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.filter(predicate, options);\n\t}\n\n\t/**\n\t * Search records (backwards compatibility)\n\t * @param {*} value - Search value\n\t * @param {string|Array<string>} [fields] - Fields to search\n\t * @param {Object} [options={}] - Search options\n\t * @returns {RecordCollection} Matching records\n\t */\n\tsearch (value, fields, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.search(value, fields, options);\n\t}\n\n\n\t/**\n\t * Map over records (backwards compatibility)\n\t * @param {Function} mapper - Mapping function\n\t * @param {Object} [options={}] - Map options\n\t * @returns {Array} Mapped results\n\t */\n\tmap (mapper, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.map(mapper, options);\n\t}\n\n\t/**\n\t * Reduce records (backwards compatibility)\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} [initialValue] - Initial value\n\t * @param {Object} [options={}] - Reduce options\n\t * @returns {*} Reduced result\n\t */\n\treduce (reducer, initialValue, options = {}) {\n\t\t// Delegate to QueryManager\n\t\treturn this.queryManager.reduce(reducer, initialValue, options);\n\t}\n\n\t/**\n\t * Iterate over records (backwards compatibility)\n\t * @param {Function} callback - Callback function\n\t * @param {Object} [thisArg] - Value to use as this when executing callback\n\t * @param {Object} [options={}] - Options\n\t */\n\tforEach (callback, thisArg, options = {}) {\n\t\t// Delegate to QueryManager\n\t\tthis.queryManager.forEach(callback, thisArg, options);\n\t}\n\n\t/**\n\t * Sort records (backwards compatibility)\n\t * @param {Function} [compareFn] - Compare function\n\t * @returns {Array<Object>} Sorted records\n\t */\n\tsort (compareFn) {\n\t\treturn this.toArray().sort(compareFn);\n\t}\n\n\t/**\n\t * Sort records by field (backwards compatibility)\n\t * @param {string} field - Field to sort by\n\t * @param {boolean} [ascending=true] - Sort direction\n\t * @returns {Array<Object>} Sorted records\n\t */\n\tsortBy (field, ascending = true) {\n\t\treturn this.sort((a, b) => {\n\t\t\tconst aVal = a[field];\n\t\t\tconst bVal = b[field];\n\t\t\tif (aVal < bVal) return ascending ? -1 : 1;\n\t\t\tif (aVal > bVal) return ascending ? 1 : -1;\n\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\t/**\n\t * Find records using optimized queries\n\t * @param {Object} [criteria={}] - Search criteria\n\t * @param {Object} [options={}] - Query options\n\t * @returns {RecordCollection} Collection of matching records\n\t */\n\tfind (criteria = {}, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"find\", criteria, options);\n\t\t}\n\n\t\t// Delegate to query manager\n\t\treturn this.queryManager.find(criteria, options);\n\t}\n\n\t/**\n\t * Advanced filtering with predicate logic\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\twhere (predicate, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"where\", predicate, options);\n\t\t}\n\n\t\t// Delegate to query manager\n\t\treturn this.queryManager.where(predicate, options);\n\t}\n\n\t/**\n\t * Batch operations with transaction support\n\t * @param {Array} operations - Array of operations or records\n\t * @param {string} [type='set'] - Operation type\n\t * @param {Object} [options={}] - Batch options\n\t * @returns {Promise<Array>|Array} Array of results (Promise when using transactions)\n\t */\n\tbatch (operations, type = \"set\", options = {}) {\n\t\t// Delegate to batch manager\n\t\treturn this.batchManager.batch(operations, type, options);\n\t}\n\n\t/**\n\t * Begin a new transaction\n\t * @param {Object} [options={}] - Transaction options\n\t * @returns {Transaction} New transaction\n\t * @throws {ConfigurationError} If transactions not enabled\n\t */\n\tbeginTransaction (options = {}) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\treturn this.transactionManager.begin(options);\n\t}\n\n\t/**\n\t * Commit a transaction\n\t * @param {string|Transaction} transaction - Transaction ID or instance\n\t * @returns {Transaction} Committed transaction\n\t */\n\tasync commitTransaction (transaction) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\tconst transactionId = typeof transaction === \"string\" ? transaction : transaction.id;\n\n\t\treturn await this.transactionManager.commit(transactionId);\n\t}\n\n\t/**\n\t * Abort a transaction\n\t * @param {string|Transaction} transaction - Transaction ID or instance\n\t * @param {string} [reason] - Abort reason\n\t * @returns {Transaction} Aborted transaction\n\t */\n\tabortTransaction (transaction, reason) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\tconst transactionId = typeof transaction === \"string\" ? transaction : transaction.id;\n\n\t\treturn this.transactionManager.abort(transactionId, reason);\n\t}\n\n\t/**\n\t * Create a data stream for large datasets\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Data stream instance\n\t */\n\tstream (options = {}) {\n\t\t// Delegate to stream manager\n\t\treturn this.streamManager.stream(options);\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\t// Delegate to statistics manager\n\t\treturn this.statisticsManager.getStats();\n\t}\n\n\t/**\n\t * Clear all data and reset state\n\t * @param {Object} [options={}] - Clear options\n\t */\n\tclear (options = {}) {\n\t\tconst {\n\t\t\tpreserveIndexes = false,\n\t\t\tpreserveVersions = false\n\t\t} = options;\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.beforeClear();\n\n\t\t// Clear storage\n\t\tthis.storageManager.clear();\n\n\t\t// Clear indexes\n\t\tif (!preserveIndexes) {\n\t\t\tthis.indexManager.clear();\n\t\t}\n\n\t\t// Clear versions\n\t\tif (!preserveVersions && this.versionManager) {\n\t\t\tthis.versionManager.clear();\n\t\t}\n\n\t\t// Clear query cache\n\t\tif (this.queryOptimizer) {\n\t\t\tthis.queryOptimizer.clear();\n\t\t}\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.onclear();\n\t}\n\n\t// Lifecycle hooks (backward compatibility - delegate to lifecycle manager)\n\tbeforeSet (key, data, options) {\n\t\treturn this.lifecycleManager.beforeSet(key, data, options);\n\t}\n\tonset (record, options) {\n\t\treturn this.lifecycleManager.onset(record, options);\n\t}\n\tbeforeDelete (key, batch) {\n\t\treturn this.lifecycleManager.beforeDelete(key, batch);\n\t}\n\tondelete (key) {\n\t\treturn this.lifecycleManager.ondelete(key);\n\t}\n\tbeforeClear () {\n\t\treturn this.lifecycleManager.beforeClear();\n\t}\n\tonclear () {\n\t\treturn this.lifecycleManager.onclear();\n\t}\n\tonbatch (results, type) {\n\t\treturn this.lifecycleManager.onbatch(results, type);\n\t}\n\n\n\t/**\n\t * Execute operation in transaction\n\t * @param {Transaction} transaction - Transaction instance\n\t * @param {string} operation - Operation type\n\t * @param {...*} args - Operation arguments\n\t * @returns {*} Operation result\n\t * @private\n\t */\n\t_executeInTransaction (transaction, operation, ...args) {\n\t\t// Handle different operation parameter patterns\n\t\tswitch (operation) {\n\t\t\tcase \"set\": {\n\t\t\t\tconst [key, data, options = {}] = args;\n\t\t\t\tconst oldValue = this.storageManager.get(key);\n\n\t\t\t\ttransaction.addOperation(operation, key, oldValue, data);\n\n\t\t\t\treturn this.set(key, data, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"get\": {\n\t\t\t\tconst [key, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", key);\n\n\t\t\t\treturn this.get(key, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"delete\": {\n\t\t\t\tconst [key, options = {}] = args;\n\t\t\t\tconst oldValue = this.storageManager.get(key);\n\n\t\t\t\ttransaction.addOperation(operation, key, oldValue);\n\n\t\t\t\treturn this.delete(key, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"find\": {\n\t\t\t\tconst [criteria, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", \"find_operation\", null, criteria);\n\n\t\t\t\treturn this.find(criteria, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"where\": {\n\t\t\t\tconst [predicate, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", \"where_operation\", null, predicate);\n\n\t\t\t\treturn this.where(predicate, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"limit\": {\n\t\t\t\tconst [offset, max, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", \"limit_operation\", null, { offset, max });\n\n\t\t\t\treturn this.limit(offset, max, { ...options, transaction: null });\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(`Unknown operation: ${operation}`, transaction.id, operation);\n\t\t}\n\t}\n\n\t/**\n\t * Get a limited subset of records with pagination support\n\t * @param {number} [offset=0] - Number of records to skip\n\t * @param {number} [max=0] - Maximum number of records to return (0 = all)\n\t * @param {Object} [options={}] - Options including transaction support\n\t * @returns {Array<Object>} Array of records within the specified range\n\t */\n\tlimit (offset = 0, max = 0, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"limit\", offset, max, options);\n\t\t}\n\n\t\t// Get keys first (much more efficient than getting all values)\n\t\tconst keys = this.keys();\n\t\tconst start = Math.max(0, offset);\n\t\tconst end = max > 0 ? start + max : keys.length;\n\n\t\t// Get only the subset of keys we need\n\t\tconst limitedKeys = keys.slice(start, end);\n\n\t\t// Batch retrieve only the records we need\n\t\tconst results = [];\n\t\tfor (const key of limitedKeys) {\n\t\t\tresults.push(this.storageManager.get(key));\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Rebuild indexes for a specific field or all fields\n\t * @param {string} [field] - Specific field to reindex (optional)\n\t * @returns {Haro} Store instance for chaining\n\t */\n\treindex (field) {\n\t\t// Get all records in entries format: Iterable<[key, data]>\n\t\tconst recordEntries = this.entries();\n\n\t\tif (field) {\n\t\t\t// Rebuild indexes for specific field\n\t\t\tthis.indexManager.rebuildField(field, recordEntries);\n\t\t} else {\n\t\t\t// Rebuild all indexes\n\t\t\tthis.indexManager.rebuild(recordEntries);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Export store data or indexes for persistence\n\t * @param {string} [type='records'] - Type of data to export: 'records' or 'indexes'\n\t * @returns {Array} Array of [key, value] pairs or serialized index structure\n\t */\n\tdump (type = \"records\") {\n\t\tif (type === \"indexes\") {\n\t\t\t// Export index definitions and statistics\n\t\t\tconst indexData = {};\n\t\t\tconst indexNames = this.indexManager.listIndexes();\n\n\t\t\tfor (const name of indexNames) {\n\t\t\t\tconst definition = this.indexManager.getIndexDefinition(name);\n\t\t\t\tindexData[name] = {\n\t\t\t\t\tfields: definition.fields,\n\t\t\t\t\ttype: definition.type,\n\t\t\t\t\tdelimiter: definition.delimiter,\n\t\t\t\t\tunique: definition.unique\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn indexData;\n\t\t}\n\n\t\t// Default to records\n\t\treturn Array.from(this.entries());\n\t}\n\n\t/**\n\t * Import and restore data from a dump\n\t * @param {Array} data - Data to import (from dump)\n\t * @param {string} [type='records'] - Type of data: 'records' or 'indexes'\n\t * @returns {boolean} True if operation succeeded\n\t */\n\toverride (data, type = \"records\") {\n\t\ttry {\n\t\t\tif (type === \"indexes\") {\n\t\t\t\t// Recreate indexes from definitions\n\t\t\t\tthis.indexManager.clear();\n\n\t\t\t\tfor (const [name, definition] of Object.entries(data)) {\n\t\t\t\t\tthis.indexManager.createIndex(name, definition.fields, {\n\t\t\t\t\t\ttype: definition.type,\n\t\t\t\t\t\tdelimiter: definition.delimiter,\n\t\t\t\t\t\tunique: definition.unique\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Rebuild indexes with current data\n\t\t\t\tthis.reindex();\n\t\t\t} else {\n\t\t\t\t// Clear existing data and indexes\n\t\t\t\tthis.clear();\n\n\t\t\t\t// Direct bulk storage override for maximum performance\n\t\t\t\t// Data should already be in correct 2D array format: [[key, value], ...]\n\t\t\t\tthis.storageManager.override(data);\n\n\t\t\t\t// Note: Indexes are not rebuilt - they should be loaded separately via override(indexData, \"indexes\")\n\t\t\t\t// This allows for maximum performance during bulk data restoration\n\n\t\t\t\t// Trigger lifecycle hooks for bulk operation\n\t\t\t\tthis.lifecycleManager.onbatch(data, \"override\");\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Generate a RFC4122 v4 UUID\n\t * @returns {string} UUID string\n\t */\n\tuuid () {\n\t\treturn uuid();\n\t}\n\n\t/**\n\t * Deep clone utility function\n\t * @param {*} obj - Object to clone\n\t * @returns {*} Cloned object\n\t */\n\tclone (obj) {\n\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\treturn obj;\n\t\t}\n\n\t\tif (obj instanceof Date) {\n\t\t\treturn new Date(obj.getTime());\n\t\t}\n\n\t\tif (obj instanceof RegExp) {\n\t\t\treturn new RegExp(obj);\n\t\t}\n\n\t\tif (Array.isArray(obj)) {\n\t\t\treturn obj.map(item => this.clone(item));\n\t\t}\n\n\t\tconst cloned = {};\n\t\tfor (const [key, value] of Object.entries(obj)) {\n\t\t\tcloned[key] = this.clone(value);\n\t\t}\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * Merge multiple objects into one\n\t * @param {Object} target - Target object\n\t * @param {...Object} sources - Source objects to merge\n\t * @param {boolean} [deep=true] - Whether to perform deep merge\n\t * @returns {Object} Merged object\n\t */\n\tmerge (target, ...sources) {\n\t\tif (!target || typeof target !== \"object\") {\n\t\t\treturn target;\n\t\t}\n\n\t\tconst result = this.clone(target);\n\n\t\tfor (const source of sources) {\n\t\t\tif (source && typeof source === \"object\") {\n\t\t\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\t\t\tif (typeof value === \"object\" && value !== null && !Array.isArray(value) &&\n\t\t\t\t\t\ttypeof result[key] === \"object\" && result[key] !== null && !Array.isArray(result[key])) {\n\t\t\t\t\t\tresult[key] = this.merge(result[key], value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult[key] = this.clone(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Freeze objects for immutability\n\t * @param {...Object} objects - Objects to freeze\n\t * @returns {Object|Array} Frozen object(s)\n\t */\n\tfreeze (...objects) {\n\t\tconst freeze = obj => {\n\t\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\t\treturn obj;\n\t\t\t}\n\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tobj.forEach(item => freeze(item));\n\t\t\t} else {\n\t\t\t\tObject.values(obj).forEach(value => freeze(value));\n\t\t\t}\n\n\t\t\treturn Object.freeze(obj);\n\t\t};\n\n\t\tif (objects.length === 1) {\n\t\t\treturn freeze(objects[0]);\n\t\t}\n\n\t\treturn objects.map(obj => freeze(obj));\n\t}\n\n}\n\n/**\n * Factory function for creating Haro instances\n * @param {Array|Object} [data] - Initial data or configuration\n * @param {Object} [config={}] - Configuration options\n * @returns {Haro} New Haro instance\n */\nexport function haro (data = null, config = {}) {\n\treturn new Haro(data, config);\n}\n\n// Export types and utilities\nexport {\n\tDataTypes,\n\tFieldConstraint,\n\tSchema,\n\tConstraints,\n\tRecord,\n\tRecordCollection,\n\tRecordFactory,\n\tIndexTypes,\n\tRetentionPolicies,\n\tIsolationLevels,\n\tQueryTypes,\n\tErrorRecovery,\n\tImmutableStore,\n\tDataStream\n};\n\n// Default export\nexport default Haro;\n\n"],"names":["randomUUID","HaroError","Error","constructor","message","code","context","super","this","name","timestamp","Date","toISOString","captureStackTrace","toJSON","stack","ValidationError","field","value","RecordNotFoundError","key","storeName","IndexError","indexName","operation","ConfigurationError","configKey","configValue","QueryError","query","TransactionError","transactionId","TypeConstraintError","expected","actual","ConcurrencyError","resource","ErrorRecovery","isRecoverable","error","includes","getRecoveryActions","createRecoveryStrategy","actions","retryable","backoffMs","DataTypes","STRING","NUMBER","BOOLEAN","OBJECT","ARRAY","DATE","UUID","EMAIL","URL","ANY","TypeDetector","getValueType","Array","isArray","basicType","isUUID","isEmail","isURL","isTypeMatch","actualType","expectedType","test","url","Boolean","FieldConstraint","type","required","default","defaultValue","validator","min","max","enum","enumValues","pattern","validate","fieldName","undefined","length","join","customResult","Schema","fields","strict","stripUnknown","record","validated","fieldNames","Object","keys","recordKeys","unknownFields","filter","addField","constraint","removeField","ConfigValidator","config","delimiter","id","immutable","index","indexField","versioning","schema","Constraints","requiredString","options","optionalString","requiredNumber","optionalNumber","uuid","email","values","date","TransactionStates","OperationTypes","IsolationLevels","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","LockTypes","Record","data","metadata","_key","_data","_metadata","createdAt","updatedAt","version","freeze","get","has","getFields","update","updates","metadataUpdates","newData","newMetadata","toObject","includeMetadata","result","JSON","stringify","equals","other","clone","structuredClone","getSize","matches","predicate","entries","every","recordValue","RegExp","some","v","toString","Symbol","iterator","RecordCollection","records","_records","at","first","last","map","mapper","find","sort","comparator","slice","start","end","reduce","reducer","initialValue","toArray","toObjects","toPairs","groupBy","keySelector","groups","Map","getKey","set","push","unique","seen","Set","add","forEach","callback","RecordFactory","create","fromObject","keyField","createCollection","items","item","emptyCollection","IndexTypes","SINGLE","COMPOSITE","PARTIAL","IndexDefinition","transform","_determineType","stats","totalKeys","totalEntries","memoryUsage","lastUpdated","suggestedType","generateKeys","_extractKeys","_getFieldValue","parts","split","part","_generateCompositeKeys","String","newKeys","existingKey","val","newKey","updateStats","keyCount","entryCount","memoryDelta","IndexStorage","_storage","_refCounts","indexKey","recordKey","recordSet","remove","removed","delete","newCount","from","getStats","size","_estimateMemoryUsage","clear","IndexManager","_definitions","_indexes","_stats","totalOperations","totalTime","lastOptimized","createIndex","definition","dropIndex","hasIndex","getIndexDefinition","listIndexes","addRecord","recordData","startTime","now","storage","indexKeys","existingRecords","_updatePerformanceStats","removeRecord","updateRecord","oldData","findByIndex","findByCriteria","criteria","indexNames","getOptimalIndex","sortedFields","indexFields","candidates","coverage","a","b","rebuild","rebuildField","indexesToRebuild","indexDef","indexDefinitions","indexStats","totalMemory","indexes","totalIndexes","totalMemoryUsage","performance","averageOperationTime","operationTime","RetentionPolicies","COUNT","TIME","SIZE","NONE","VersionEntry","_calculateSize","isOlderThan","maxAge","getTime","getAge","VersionHistory","policy","versions","totalSize","lastAccessed","addVersion","_applyRetentionPolicy","getVersion","getLatest","getOldest","getVersionsInRange","getCount","getTotalSize","count","removeOlderThan","oldCount","cutoffTime","keep","_applyCountPolicy","_applyTimePolicy","_applySizePolicy","maxCount","splice","maxSize","shift","versionCount","averageSize","oldestVersion","newestVersion","VersionManager","globalPolicy","_validatePolicy","histories","totalHistories","totalVersions","lastCleanup","cleanupCount","enableVersioning","history","disableVersioning","oldSize","getHistory","versionIndex","getLatestVersion","isVersioningEnabled","cleanup","results","historiesProcessed","versionsRemoved","sizeFreed","keysToProcess","newSize","endTime","duration","setGlobalPolicy","historyStats","averageVersionsPerRecord","averageSizePerRecord","keysToExport","exportData","exportedAt","import","merge","historiesImported","versionsImported","errors","historyData","versionData","defineProperty","writable","_updateStats","historiesCleared","versionsCleared","validTypes","TransactionOperation","oldValue","newValue","createRollback","Transaction","state","isolationLevel","timeout","readOnly","operations","readSet","writeSet","snapshot","validationCallback","abortReason","seal","begin","addOperation","_checkActive","_isTimedOut","setValidation","commit","abort","reason","getRollbackOperations","reverse","op","isActive","isCommitted","isAborted","getDuration","operationCount","readSetSize","writeSetSize","snapshotSize","timedOut","LockManager","locks","lockTimeout","acquireLock","lockType","_tryAcquireLock","Promise","resolve","setTimeout","existingLock","holders","waiters","releaseLock","lock","releaseAllLocks","released","holdsLocks","totalLocks","sharedLocks","exclusiveLocks","lockHolders","recordsLocked","holder","uniqueHolders","TransactionStatistics","totalTransactions","committedTransactions","abortedTransactions","activeTransactions","averageDuration","totalDuration","incrementTotal","incrementCommitted","incrementAborted","incrementActive","decrementActive","updateDurationStats","transaction","lockStats","activeCount","transactionCounter","reset","getRawStats","KeyRelationshipAnalyzer","patternCache","semanticCache","areKeysRelated","key1","key2","_hasHierarchicalKeyRelationship","_hasSemanticKeyRelationship","_hasPatternBasedKeyRelationship","_hasCompositeKeyRelationship","_hasTemporalKeyRelationship","_hasIndexKeyRelationship","_hasCollectionKeyRelationship","_hasFunctionalDependency","isKeyInSnapshotRange","operationKey","snapshotKey","expectedValue","_hasExplicitRangeMetadata","_checkExplicitRange","_isPatternBasedSnapshot","_checkPatternBasedRange","_hasHierarchicalRelationship","_checkHierarchicalRange","_isIndexBasedSnapshot","_checkIndexBasedRange","_hasSemanticRelationship","_checkSemanticRange","_isTemporalSnapshot","_checkTemporalRange","_isCompositeKeySnapshot","_checkCompositeKeyRange","keyMatchesRange","range","prefix","startsWith","keyMatchesQuery","queryInfo","keyMatchesIndexRange","indexRange","separators","sep","parts1","parts2","_isParentChildRelationship","_isSiblingRelationship","_isAncestorDescendantRelationship","opParts","snapParts","_isCollectionMembership","i","shorter","longer","semantics1","_extractSemanticIdentifiers","semantics2","sem1","sem2","_areSemanticallySimilar","_hasEntityRelationship","semanticPrefixes","toLowerCase","opSemantics","snapSemantics","opSemantic","snapSemantic","cacheKey","identifiers","patterns","match","exec","id1","id2","singularPlural","singular","plural","entityRelations","entity1","entity2","hasEntity1InBoth","hasEntity2InBoth","_haveSimilarPatterns","endsWith","replace","beforeBrace","substring","indexOf","afterBrace","choices","choice","fullPattern","trim","baseKey","pattern1","_extractKeyPattern","pattern2","_patternsAreSimilar","_calculatePatternSimilarity","maxLen","Math","_levenshteinDistance","str1","str2","matrix","j","charAt","temporal1","_extractTemporalComponents","temporal2","_haveTemporalOverlap","keyword","opTemporal","snapTemporal","components","hasDate","hasTime","hasTimestamp","hasEpoch","_hasCompositeKeyOverlap","minLength","allMatch","isIndex1","_isIndexKey","isIndex2","base1","_extractBaseKeyFromIndex","base2","isCollection1","_isCollectionKey","isCollection2","_extractCollectionBase","indicator","collectionKey","indicators","dependencies","norm1","_normalizeKeyForDependency","norm2","dep1","dep2","rangeInfo","predicateInfo","clearCaches","DeadlockDetector","lockManager","keyAnalyzer","detectDeadlocks","opts","useLockGraph","useResourceGraph","useTimeoutDetection","timeoutThreshold","deadlocks","suspectedDeadlocks","timeoutVictims","waitForGraph","resourceGraph","lockDeadlocks","_detectLockBasedDeadlocks","cycles","graph","resourceDeadlocks","_detectResourceDeadlocks","isolationDeadlocks","_detectIsolationDeadlocks","_detectTimeoutVictims","_deduplicateDeadlocks","_buildLockWaitForGraph","_detectCyclesInGraph","cycle","transactions","resources","_getResourcesInvolvedInCycle","tx","lockInfo","waitingTransactions","_findTransactionsWaitingForLock","waitingTx","holderId","waiting","hasOperationOnKey","holdsLock","_buildResourceAllocationGraph","_detectCyclesInResourceGraph","txId","visited","recursionStack","dfs","node","path","cycleStart","neighbors","neighbor","wantedResources","holdingTx","graphCycles","t","tx1","tx2","_hasIsolationConflict","conflict","_getIsolationConflictType","tx1ReadsWhatTx2Writes","_readsOtherWrites","tx2ReadsWhatTx1Writes","reader","writer","readKey","victims","deadlock","signature","_createDeadlockSignature","sortedTransactions","sortedResources","IsolationValidator","validateIsolation","allTransactions","_validateReadCommitted","_validateRepeatableRead","_validateSerializable","writeKey","conflictingTransactions","_findConflictingWrites","_hasReadSetConflict","snapshotValue","_hasSnapshotConflict","conflictingWrites","_findConflictingWritesToRead","conflictingReads","_findConflictingReadsToWrite","excludeTransactionId","conflicting","otherTx","_transactionsOverlap","_hasPhantomConflict","_hasSerializationAnomalyInSnapshot","otherTransaction","_hasWriteSkewAnomaly","_hasDependencyCycle","tx1ReadsRelated","_hasRelatedReads","tx2ReadsRelated","tx1Writes","tx2Writes","k","tx1ReadsTx2Writes","tx2ReadsTx1Writes","tx1Start","tx1End","tx2Start","TransactionManager","statistics","deadlockDetector","isolationValidator","getTransaction","cleaned","getActiveTransactions","resetStats","getComponents","validateTransactionIsolation","checkForDeadlocks","getTransactionDetails","getSystemHealth","deadlockResults","commitRate","hasDeadlocks","lockUtilization","QueryTypes","FIND","FILTER","SEARCH","WHERE","SORT","LIMIT","AGGREGATE","CostFactors","INDEX_LOOKUP","FULL_SCAN","FILTER_EVALUATION","SORT_OPERATION","MEMORY_ACCESS","COMPARISON","REGEX_MATCH","QueryPlanStep","estimatedCost","estimatedRows","actualCost","actualRows","startExecution","endExecution","costAccuracy","abs","rowAccuracy","QueryPlan","queryId","originalQuery","steps","totalEstimatedCost","totalEstimatedRows","totalActualCost","totalActualRows","executedAt","completedAt","addStep","step","completeExecution","stepCount","efficiency","explanation","_generateExplanation","DataStatistics","totalRecords","indexStatistics","fieldStatistics","_updateFieldStatistics","_updateIndexStatistics","getSelectivity","fieldStats","uniqueValues","getIndexCardinality","cardinality","fieldData","nullCount","totalLength","dataType","_inferDataType","avgLength","indexStorage","selectivity","avgEntriesPerKey","sample","types","next","QueryOptimizer","collectStatistics","statisticsUpdateInterval","queryCounter","planCache","executionHistory","maxHistorySize","cacheHits","totalCacheRequests","costAdjustments","lastCostModelUpdate","createPlan","plan","_generateCacheKey","cachedPlan","_isCacheValid","_copyPlan","_buildOptimizedPlan","updateStatistics","recordExecution","_updateCostModel","getOptimalStrategy","costedStrategies","_generateStrategies","strategy","_estimateStrategyCost","_getAdjustedCostFactor","planCacheSize","executionHistorySize","dataStatistics","indexCount","fieldCount","averageQueryCost","_calculateAverageQueryCost","cacheHitRate","_calculateCacheHitRate","cacheStatistics","totalRequests","hits","misses","hitRate","costModel","adjustments","fromEntries","_addIndexLookupSteps","_addFilteredScanSteps","_addFullScanSteps","_addPostProcessingSteps","lookupKey","_estimateIndexLookupRows","filterStep","where","scanType","sortBy","sortStep","sortField","sortFunction","limit","limitStep","offset","strategies","indexManager","optimalIndex","_generateLookupKey","availableIndexes","partialFilter","Number","MAX_SAFE_INTEGER","factorName","originalPlan","newQueryId","newPlan","newStep","operationStats","_analyzeOperationPerformance","sampleSize","currentAdjustment","newAdjustment","consistency","avgActualCost","avgEstimatedCost","floor","execution","_mapOperationToCostFactor","costs","estimatedCosts","variance","_calculateVariance","stdDev","sqrt","accuracyScores","estimated","accuracy","sum","score","index_lookup","full_scan","regex","mean","pow","diff","ImmutableStore","_frozenViews","WeakMap","frozen","_deepFreeze","self","obj","DataStream","batchSize","bufferSize","buffer","ended","position","read","batch","done","readAll","take","StorageManager","_store","override","getStore","estimateMemoryUsage","dataSize","CRUDManager","storageManager","versionManager","existingRecord","finalData","_mergeRecords","includeVersions","existing","merged","QueryManager","queryOptimizer","matchingRecords","_matchesCriteria","_filterByFunction","_filterByObject","search","_fullScanSearch","fieldArray","matchingKeys","_searchIndex","_searchField","_keysToRecordCollection","accumulator","processedCount","thisArg","call","_matchesSearchValue","fieldValue","_searchInRecord","searchValue","searchString","searchObject","BatchManager","crudManager","transactionManager","lifecycleManager","atomic","_executeBatchInTransaction","onbatch","ownTransaction","_executeSetInTransaction","_executeDeleteInTransaction","StreamManager","stream","streamWhere","_createFilteredIterator","streamMap","_createTransformIterator","streamTake","_createLimitedIterator","StatisticsManager","configuration","memory","queries","getStorageStats","getIndexStats","getVersionStats","getTransactionStats","getQueryStats","getPerformanceMetrics","recordsPerIndex","memoryPerRecord","total","indexEfficiency","_calculateIndexEfficiency","overheadRatio","overhead","indexSize","versionSize","indexedExecutions","totalExecutions","generateReport","summary","activeIndexes","optimization","breakdown","recommendations","_generateRecommendations","LifecycleManager","hooks","beforeSet","onset","beforeDelete","ondelete","beforeClear","onclear","registerHook","event","handler","unregisterHook","executeHook","args","getHooks","hasHook","clearHooks","Haro","defaults","retentionPolicy","enableTransactions","enableOptimization","userConfig","initialData","queryManager","batchManager","streamManager","statisticsManager","enumerable","_executeInTransaction","compareFn","ascending","aVal","bVal","beginTransaction","commitTransaction","abortTransaction","preserveIndexes","preserveVersions","limitedKeys","reindex","recordEntries","dump","indexData","cloned","target","sources","source","objects","haro"],"mappings":"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"}