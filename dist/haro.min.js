/*!
 2024 Jason Mulligan <jason.mulligan@avoidwork.com>
 @version 15.1.1
*/
const e="function",t="Invalid function",s="records",r=0,i=1,n=16,a=[8,9,"a","b"];function h(){return(65536*(Math.random()+i)|r).toString(n).substring(i)}const o="object"==typeof crypto?crypto.randomUUID.bind(crypto):function(){return`${h()}${h()}-${h()}-4${h().slice(r,3)}-${a[Math.floor(4*Math.random())]}${h().slice(r,3)}-${h()}${h()}${h()}`};class c{constructor({delimiter:e="|",id:t=o(),index:s=[],key:r="",versioning:i=!1}={}){return this.data=new Map,this.delimiter=e,this.id=t,this.index=s,this.indexes=new Map,this.key=r,this.versions=new Map,this.versioning=i,Object.defineProperty(this,"registry",{enumerable:!0,get:()=>Array.from(this.data.keys())}),Object.defineProperty(this,"size",{enumerable:!0,get:()=>this.data.size}),this.reindex()}batch(e,t="set"){const s="del"===t?e=>this.del(e,!0):e=>this.set(null,e,!0,!0);return this.onbatch(this.beforeBatch(e,t).map(s),t)}beforeBatch(e){return e}beforeClear(){}beforeDelete(){}beforeSet(){}clear(){return this.beforeClear(),this.data.clear(),this.indexes.clear(),this.versions.clear(),this.reindex().onclear(),this}clone(e){return JSON.parse(JSON.stringify(e,null,r))}del(e="",t=!1){if(!1===this.data.has(e))throw new Error("Record not found");const s=this.get(e,!0);this.beforeDelete(e,t),this.delIndex(this.index,this.indexes,this.delimiter,e,s),this.data.delete(e),this.ondelete(e,t),this.versioning&&this.versions.delete(e)}delIndex(e,t,s,i,n){e.forEach((e=>{const a=t.get(e);this.each(e.includes(s)?this.indexKeys(e,s,n):Array.isArray(n[e])?n[e]:[n[e]],(e=>{if(a.has(e)){const t=a.get(e);t.delete(i),t.size===r&&a.delete(e)}}))}))}dump(e=s){let t;return t=e===s?Array.from(this.entries()):Array.from(this.indexes).map((e=>(e[1]=Array.from(e[1]).map((e=>(e[1]=Array.from(e[1]),e))),e))),t}each(e=[],t){for(const[s,r]of e.entries())t(r,s);return e}entries(){return this.data.entries()}find(e={},t=!1){const s=Object.keys(e).sort(((e,t)=>e.localeCompare(t))).join(this.delimiter),r=this.indexes.get(s)??new Map;let i=[];if(r.size>0){const n=this.indexKeys(s,this.delimiter,e);i=Array.from(n.reduce(((e,t)=>(r.has(t)&&r.get(t).forEach((t=>e.add(t))),e)),new Set)).map((e=>this.get(e,t)))}return t?i:this.list(...i)}filter(s,r=!1){if(typeof s!==e)throw new Error(t);const i=r?(e,t)=>t:(e,t)=>Object.freeze([e,Object.freeze(t)]),n=this.reduce(((e,t,r,n)=>(s.call(n,t)&&e.push(i(r,t)),e)),[]);return r?n:Object.freeze(n)}forEach(e,t){return this.data.forEach(((t,s)=>e(this.clone(t),this.clone(s))),t??this.data),this}get(e,t=!1){const s=this.clone(this.data.get(e)??null);return t?s:this.list(e,s)}has(e){return this.data.has(e)}indexKeys(e="",t="|",s={}){return e.split(t).reduce(((e,i,n)=>{const a=[];return(Array.isArray(s[i])?s[i]:[s[i]]).forEach((s=>n===r?a.push(s):e.forEach((e=>a.push(`${e}${t}${s}`))))),a}),[])}keys(){return this.data.keys()}limit(e=r,t=r,s=!1){const i=this.registry.slice(e,e+t).map((e=>this.get(e,s)));return s?i:this.list(...i)}list(...e){return Object.freeze(e.map((e=>Object.freeze(e))))}map(s,r=!1){if(typeof s!==e)throw new Error(t);const i=[];return this.forEach(((e,t)=>i.push(s(e,t)))),r?i:this.list(...i)}merge(e={},t={},s=!0){return Array.isArray(e)&&Array.isArray(t)?e=s?t:e.concat(t):e instanceof Object&&t instanceof Object?this.each(Object.keys(t),(r=>{Array.isArray(e[r])&&Array.isArray(t[r])?e[r]=s?t[r]:e[r].concat(t[r]):e[r]instanceof Object&&t[r]instanceof Object?e[r]=this.merge(e[r],t[r],s):"string"==typeof e[r]&&"string"==typeof t[r]||"number"==typeof e[r]&&"number"==typeof t[r]?e[r]=s?t[r]:e[r]+t[r]:e[r]=t[r]})):e="string"==typeof e&&"string"==typeof t||"number"==typeof e&&"number"==typeof t?s?t:e+t:t,e}onbatch(e){return e}onclear(){}ondelete(){}onoverride(){}onset(){}override(e,t=s){if("indexes"===t)this.indexes=new Map(e.map((e=>[e[0],new Map(e[1].map((e=>[e[0],new Set(e[1])])))])));else{if(t!==s)throw new Error("Invalid type");this.indexes.clear(),this.data=new Map(e)}return this.onoverride(t),!0}reduce(e,t,s=!1){let r=t??this.data.keys().next().value;return this.forEach(((t,i)=>{r=e(r,t,i,this,s)}),this),r}reindex(e){const t=e?[e]:this.index;return e&&!1===this.index.includes(e)&&this.index.push(e),this.each(t,(e=>this.indexes.set(e,new Map))),this.forEach(((e,s)=>this.each(t,(t=>this.setIndex(this.index,this.indexes,this.delimiter,s,e,t))))),this}search(t,s,r=!1){const i=new Map,n=typeof t===e,a=t&&typeof t.test===e;return t&&this.each(s?Array.isArray(s)?s:[s]:this.index,(e=>{let s=this.indexes.get(e);s&&s.forEach(((s,h)=>{switch(!0){case n&&t(h,e):case a&&t.test(Array.isArray(h)?h.join(","):h):case h===t:s.forEach((e=>{!1===i.has(e)&&this.data.has(e)&&i.set(e,this.get(e,r))}))}}))})),r?Array.from(i.values()):this.list(...Array.from(i.values()))}set(e=null,t={},s=!1,r=!1){null===e&&(e=t[this.key]??o());let i={...t,[this.key]:e};if(this.beforeSet(e,i,s,r),!1===this.data.has(e))this.versioning&&this.versions.set(e,new Set);else{let t=this.get(e,!0);this.delIndex(this.index,this.indexes,this.delimiter,e,t),this.versioning&&this.versions.get(e).add(Object.freeze(this.clone(t))),!1===r&&(i=this.merge(this.clone(t),i))}this.data.set(e,i),this.setIndex(this.index,this.indexes,this.delimiter,e,i,null);let n=this.get(e);return this.onset(n,s),n}setIndex(e,t,s,r,i,n){this.each(null===n?e:[n],(e=>{const n=t.get(e);e.includes(s)?this.each(this.indexKeys(e,s,i),(e=>{!1===n.has(e)&&n.set(e,new Set),n.get(e).add(r)})):this.each(Array.isArray(i[e])?i[e]:[i[e]],(e=>{!1===n.has(e)&&n.set(e,new Set),n.get(e).add(r)}))}))}sort(e,t=!0){return t?Object.freeze(this.limit(r,this.data.size,!0).sort(e).map((e=>Object.freeze(e)))):this.limit(r,this.data.size,!0).sort(e)}sortBy(e="",t=!1){if(""===e)throw new Error("Invalid field");const s=[],r=[];!1===this.indexes.has(e)&&this.reindex(e);const i=this.indexes.get(e);return i.forEach(((e,t)=>r.push(t))),this.each(r.sort(),(e=>i.get(e).forEach((e=>s.push(this.get(e,t)))))),t?s:this.list(...s)}toArray(e=!0){const t=Array.from(this.data.values());return e&&(this.each(t,(e=>Object.freeze(e))),Object.freeze(t)),t}values(){return this.data.values()}where(e={},t=!1,s="||"){const i=this.index.filter((t=>t in e));return i.length>r?this.filter(new Function("a",`return (${i.map((t=>{let r;if(Array.isArray(e[t]))r=`Array.isArray(a['${t}']) ? ${e[t].map((e=>`a['${t}'].includes(${"string"==typeof e?`'${e}'`:e})`)).join(` ${s} `)} : (${e[t].map((e=>`a['${t}'] === ${"string"==typeof e?`'${e}'`:e}`)).join(` ${s} `)})`;else if(e[t]instanceof RegExp)r=`Array.isArray(a['${t}']) ? a['${t}'].filter(i => ${e[t]}.test(a['${t}'])).length > 0 : ${e[t]}.test(a['${t}'])`;else{const s="string"==typeof e[t]?`'${e[t]}'`:e[t];r=`Array.isArray(a['${t}']) ? a['${t}'].includes(${s}) : a['${t}'] === ${s}`}return r})).join(") && (")});`),t):[]}}function d(e=null,t={}){const s=new c(t);return Array.isArray(e)&&s.batch(e,"set"),s}export{c as Haro,d as haro};//# sourceMappingURL=haro.min.js.map
