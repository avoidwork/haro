/*!
 2025 Jason Mulligan <jason.mulligan@avoidwork.com>
 @version 15.2.6
*/
const e="",t="function",r="Invalid function",s="records",i=[8,9,"a","b"];function n(){return(65536*(Math.random()+1)|0).toString(16).substring(1)}const h="object"==typeof crypto?crypto.randomUUID.bind(crypto):function(){return`${n()}${n()}-${n()}-4${n().slice(0,3)}-${i[Math.floor(4*Math.random())]}${n().slice(0,3)}-${n()}${n()}${n()}`};class a{constructor({delimiter:e="|",id:t=this.uuid(),index:r=[],key:s="id",versioning:i=!1}={}){return this.data=new Map,this.delimiter=e,this.id=t,this.index=Array.isArray(r)?[...r]:[],this.indexes=new Map,this.key=s,this.versions=new Map,this.versioning=i,Object.defineProperty(this,"registry",{enumerable:!0,get:()=>Array.from(this.data.keys())}),Object.defineProperty(this,"size",{enumerable:!0,get:()=>this.data.size}),this.reindex()}batch(e,t="set"){const r="del"===t?e=>this.del(e,!0):e=>this.set(null,e,!0,!0);return this.onbatch(this.beforeBatch(e,t).map(r),t)}beforeBatch(e,t=""){return e}beforeClear(){}beforeDelete(e="",t=!1){return[e,t]}beforeSet(e="",t=!1){return[e,t]}clear(){return this.beforeClear(),this.data.clear(),this.indexes.clear(),this.versions.clear(),this.reindex().onclear(),this}clone(e){return JSON.parse(JSON.stringify(e))}del(e="",t=!1){if(!this.data.has(e))throw new Error("Record not found");const r=this.get(e,!0);this.beforeDelete(e,t),this.delIndex(this.index,this.indexes,this.delimiter,e,r),this.data.delete(e),this.ondelete(e,t),this.versioning&&this.versions.delete(e)}delIndex(e,t,r,s,i){e.forEach((e=>{const n=t.get(e);if(!n)return;const h=e.includes(r)?this.indexKeys(e,r,i):Array.isArray(i[e])?i[e]:[i[e]];this.each(h,(e=>{if(n.has(e)){const t=n.get(e);t.delete(s),0===t.size&&n.delete(e)}}))}))}dump(e=s){let t;return t=e===s?Array.from(this.entries()):Array.from(this.indexes).map((e=>(e[1]=Array.from(e[1]).map((e=>(e[1]=Array.from(e[1]),e))),e))),t}each(e=[],t){for(const[r,s]of e.entries())t(s,r);return e}entries(){return this.data.entries()}find(e={},t=!1){const r=Object.keys(e).sort().join(this.delimiter),s=this.indexes.get(r)??new Map;let i=[];if(s.size>0){const n=this.indexKeys(r,this.delimiter,e);i=Array.from(n.reduce(((e,t)=>(s.has(t)&&s.get(t).forEach((t=>e.add(t))),e)),new Set)).map((e=>this.get(e,t)))}return t?i:this.list(...i)}filter(e,s=!1){if(typeof e!==t)throw new Error(r);const i=s?(e,t)=>t:(e,t)=>Object.freeze([e,Object.freeze(t)]),n=this.reduce(((t,r,s,n)=>(e.call(n,r)&&t.push(i(s,r)),t)),[]);return s?n:Object.freeze(n)}forEach(e,t){return this.data.forEach(((t,r)=>e(this.clone(t),this.clone(r))),t??this.data),this}get(e,t=!1){const r=this.clone(this.data.get(e)??null);return t?r:this.list(e,r)}has(e){return this.data.has(e)}indexKeys(e="",t="|",r={}){return e.split(t).reduce(((e,s,i)=>{const n=[];return(Array.isArray(r[s])?r[s]:[r[s]]).forEach((r=>0===i?n.push(r):e.forEach((e=>n.push(`${e}${t}${r}`))))),n}),[])}keys(){return this.data.keys()}limit(e=0,t=0,r=!1){const s=this.registry.slice(e,e+t).map((e=>this.get(e,r)));return r?s:this.list(...s)}list(...e){return Object.freeze(e.map((e=>Object.freeze(e))))}map(e,s=!1){if(typeof e!==t)throw new Error(r);const i=[];return this.forEach(((t,r)=>i.push(e(t,r)))),s?i:this.list(...i)}merge(e,t,r=!1){return Array.isArray(e)&&Array.isArray(t)?e=r?t:e.concat(t):"object"==typeof e&&null!==e&&"object"==typeof t&&null!==t?this.each(Object.keys(t),(s=>{e[s]=this.merge(e[s],t[s],r)})):e=t,e}onbatch(e,t=""){return e}onclear(){}ondelete(e="",t=!1){return[e,t]}onoverride(e=""){return e}onset(e={},t=!1){return[e,t]}override(e,t=s){if("indexes"===t)this.indexes=new Map(e.map((e=>[e[0],new Map(e[1].map((e=>[e[0],new Set(e[1])])))])));else{if(t!==s)throw new Error("Invalid type");this.indexes.clear(),this.data=new Map(e)}return this.onoverride(t),!0}reduce(e,t,r=!1){let s=t??this.data.keys().next().value;return this.forEach(((t,i)=>{s=e(s,t,i,this,r)}),this),s}reindex(e){const t=e?[e]:this.index;return e&&!1===this.index.includes(e)&&this.index.push(e),this.each(t,(e=>this.indexes.set(e,new Map))),this.forEach(((e,r)=>this.each(t,(t=>this.setIndex(this.index,this.indexes,this.delimiter,r,e,t))))),this}search(e,r,s=!1){const i=new Map,n=typeof e===t,h=e&&typeof e.test===t;return e&&this.each(r?Array.isArray(r)?r:[r]:this.index,(t=>{let r=this.indexes.get(t);r&&r.forEach(((r,a)=>{switch(!0){case n&&e(a,t):case h&&e.test(Array.isArray(a)?a.join(","):a):case a===e:r.forEach((e=>{!1===i.has(e)&&this.data.has(e)&&i.set(e,this.get(e,s))}))}}))})),s?Array.from(i.values()):this.list(...Array.from(i.values()))}set(e=null,t={},r=!1,s=!1){null===e&&(e=t[this.key]??this.uuid());let i={...t,[this.key]:e};if(this.beforeSet(e,i,r,s),this.data.has(e)){const t=this.get(e,!0);this.delIndex(this.index,this.indexes,this.delimiter,e,t),this.versioning&&this.versions.get(e).add(Object.freeze(this.clone(t))),s||(i=this.merge(this.clone(t),i))}else this.versioning&&this.versions.set(e,new Set);this.data.set(e,i),this.setIndex(this.index,this.indexes,this.delimiter,e,i,null);const n=this.get(e);return this.onset(n,r),n}setIndex(e,t,r,s,i,n){this.each(null===n?e:[n],(e=>{let n=t.get(e);n||(n=new Map,t.set(e,n)),e.includes(r)?this.each(this.indexKeys(e,r,i),(e=>{n.has(e)||n.set(e,new Set),n.get(e).add(s)})):this.each(Array.isArray(i[e])?i[e]:[i[e]],(e=>{n.has(e)||n.set(e,new Set),n.get(e).add(s)}))}))}sort(e,t=!0){return t?Object.freeze(this.limit(0,this.data.size,!0).sort(e).map((e=>Object.freeze(e)))):this.limit(0,this.data.size,!0).sort(e)}sortBy(t="",r=!1){if(t===e)throw new Error("Invalid field");const s=[],i=[];!1===this.indexes.has(t)&&this.reindex(t);const n=this.indexes.get(t);return n.forEach(((e,t)=>i.push(t))),this.each(i.sort(),(e=>n.get(e).forEach((e=>s.push(this.get(e,r)))))),r?s:this.list(...s)}toArray(e=!0){const t=Array.from(this.data.values());return e&&(this.each(t,(e=>Object.freeze(e))),Object.freeze(t)),t}uuid(){return h()}values(){return this.data.values()}where(e={},t=!1,r="||"){const s=this.index.filter((t=>t in e));return s.length>0?this.filter(new Function("a",`return (${s.map((t=>{let s;if(Array.isArray(e[t]))s=`Array.isArray(a['${t}']) ? ${e[t].map((e=>`a['${t}'].includes(${"string"==typeof e?`'${e}'`:e})`)).join(` ${r} `)} : (${e[t].map((e=>`a['${t}'] === ${"string"==typeof e?`'${e}'`:e}`)).join(` ${r} `)})`;else if(e[t]instanceof RegExp)s=`Array.isArray(a['${t}']) ? a['${t}'].filter(i => ${e[t]}.test(a['${t}'])).length > 0 : ${e[t]}.test(a['${t}'])`;else{const r="string"==typeof e[t]?`'${e[t]}'`:e[t];s=`Array.isArray(a['${t}']) ? a['${t}'].includes(${r}) : a['${t}'] === ${r}`}return s})).join(") && (")});`),t):[]}}function o(e=null,t={}){const r=new a(t);return Array.isArray(e)&&r.batch(e,"set"),r}export{a as Haro,o as haro};//# sourceMappingURL=haro.min.js.map
