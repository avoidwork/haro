{"version":3,"file":"haro.umd.min.js","sources":["../src/errors.js","../src/data-types.js","../src/field-constraint.js","../src/schema.js","../src/config-validator.js","../src/constraints.js","../src/constants.js","../src/record.js","../src/index-manager.js","../src/version-manager.js","../src/transaction-operation.js","../src/transaction-individual.js","../src/lock-manager.js","../src/transaction-statistics.js","../src/key-relationship-analyzer.js","../src/deadlock-detector.js","../src/isolation-validator.js","../src/transaction-manager.js","../src/query-optimizer.js","../src/immutable-store.js","../src/data-stream.js","../src/storage-manager.js","../src/crud-manager.js","../src/query-manager.js","../src/batch-manager.js","../src/stream-manager.js","../src/statistics-manager.js","../src/lifecycle-manager.js","../src/haro.js"],"sourcesContent":["/**\n * Base error class for all Haro errors\n */\nexport class HaroError extends Error {\n\t/**\n\t * @param {string} message - Error message\n\t * @param {string} [code] - Error code for programmatic handling\n\t * @param {*} [context] - Additional context about the error\n\t */\n\tconstructor (message, code, context) {\n\t\tsuper(message);\n\t\tthis.name = this.constructor.name;\n\t\tthis.code = code;\n\t\tthis.context = context;\n\t\tthis.timestamp = new Date().toISOString();\n\n\t\t// Ensure proper stack trace\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, this.constructor);\n\t\t}\n\t}\n\n\t/**\n\t * Convert error to JSON for serialization\n\t * @returns {Object} Serializable error object\n\t */\n\ttoJSON () {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tmessage: this.message,\n\t\t\tcode: this.code,\n\t\t\tcontext: this.context,\n\t\t\ttimestamp: this.timestamp,\n\t\t\tstack: this.stack\n\t\t};\n\t}\n}\n\n/**\n * Validation errors for invalid data or configuration\n */\nexport class ValidationError extends HaroError {\n\tconstructor (message, field, value) {\n\t\tsuper(message, \"VALIDATION_ERROR\", { field, value });\n\t}\n}\n\n/**\n * Record not found errors\n */\nexport class RecordNotFoundError extends HaroError {\n\tconstructor (key, storeName) {\n\t\tsuper(`Record with key '${key}' not found${storeName ? ` in store '${storeName}'` : \"\"}`, \"RECORD_NOT_FOUND\", { key, storeName });\n\t}\n}\n\n/**\n * Index-related errors\n */\nexport class IndexError extends HaroError {\n\tconstructor (message, indexName, operation) {\n\t\tsuper(message, \"INDEX_ERROR\", { indexName, operation });\n\t}\n}\n\n/**\n * Configuration errors\n */\nexport class ConfigurationError extends HaroError {\n\tconstructor (message, configKey, configValue) {\n\t\tsuper(message, \"CONFIGURATION_ERROR\", { configKey, configValue });\n\t}\n}\n\n/**\n * Query errors for invalid queries or operations\n */\nexport class QueryError extends HaroError {\n\tconstructor (message, query, operation) {\n\t\tsuper(message, \"QUERY_ERROR\", { query, operation });\n\t}\n}\n\n/**\n * Transaction errors\n */\nexport class TransactionError extends HaroError {\n\tconstructor (message, transactionId, operation) {\n\t\tsuper(message, \"TRANSACTION_ERROR\", { transactionId, operation });\n\t}\n}\n\n/**\n * Version management errors\n */\nexport class VersionError extends HaroError {\n\tconstructor (message, key, version) {\n\t\tsuper(message, \"VERSION_ERROR\", { key, version });\n\t}\n}\n\n/**\n * Type constraint errors\n */\nexport class TypeConstraintError extends HaroError {\n\tconstructor (message, expected, actual, field) {\n\t\tsuper(message, \"TYPE_CONSTRAINT_ERROR\", { expected, actual, field });\n\t}\n}\n\n/**\n * Concurrency errors for multi-threaded access\n */\nexport class ConcurrencyError extends HaroError {\n\tconstructor (message, resource, operation) {\n\t\tsuper(message, \"CONCURRENCY_ERROR\", { resource, operation });\n\t}\n}\n\n/**\n * Error recovery utilities\n */\nexport class ErrorRecovery {\n\t/**\n\t * Determine if an error is recoverable\n\t * @param {Error} error - Error to analyze\n\t * @returns {boolean} True if error is recoverable\n\t */\n\tstatic isRecoverable (error) {\n\t\tif (!(error instanceof HaroError)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst recoverableCodes = [\n\t\t\t\"RECORD_NOT_FOUND\",\n\t\t\t\"VALIDATION_ERROR\",\n\t\t\t\"QUERY_ERROR\",\n\t\t\t\"TYPE_CONSTRAINT_ERROR\"\n\t\t];\n\n\t\treturn recoverableCodes.includes(error.code);\n\t}\n\n\t/**\n\t * Get suggested recovery actions for an error\n\t * @param {HaroError} error - Error to get recovery actions for\n\t * @returns {string[]} Array of suggested recovery actions\n\t */\n\tstatic getRecoveryActions (error) {\n\t\tif (!(error instanceof HaroError)) {\n\t\t\treturn [\"Check error details and retry\"];\n\t\t}\n\n\t\tswitch (error.code) {\n\t\t\tcase \"RECORD_NOT_FOUND\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify the record key is correct\",\n\t\t\t\t\t\"Check if record was deleted\",\n\t\t\t\t\t\"Use has() method to check existence before get()\"\n\t\t\t\t];\n\n\t\t\tcase \"VALIDATION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Check data types match expected schema\",\n\t\t\t\t\t\"Verify required fields are present\",\n\t\t\t\t\t\"Validate field constraints\"\n\t\t\t\t];\n\n\t\t\tcase \"INDEX_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify index exists before querying\",\n\t\t\t\t\t\"Check index configuration\",\n\t\t\t\t\t\"Try reindexing the affected field\"\n\t\t\t\t];\n\n\t\t\tcase \"CONFIGURATION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Review configuration parameters\",\n\t\t\t\t\t\"Check for typos in configuration keys\",\n\t\t\t\t\t\"Refer to documentation for valid options\"\n\t\t\t\t];\n\n\t\t\tcase \"QUERY_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Verify query syntax is correct\",\n\t\t\t\t\t\"Check if indexed fields are being used\",\n\t\t\t\t\t\"Simplify complex queries\"\n\t\t\t\t];\n\n\t\t\tcase \"TRANSACTION_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Retry the transaction\",\n\t\t\t\t\t\"Check for concurrent modifications\",\n\t\t\t\t\t\"Reduce transaction scope\"\n\t\t\t\t];\n\n\t\t\tcase \"TYPE_CONSTRAINT_ERROR\":\n\t\t\t\treturn [\n\t\t\t\t\t\"Check data types match schema\",\n\t\t\t\t\t\"Convert data to expected type\",\n\t\t\t\t\t\"Update type constraints if needed\"\n\t\t\t\t];\n\n\t\t\tdefault:\n\t\t\t\treturn [\"Check error details and retry\"];\n\t\t}\n\t}\n\n\t/**\n\t * Create a recovery strategy for an error\n\t * @param {HaroError} error - Error to create strategy for\n\t * @returns {Object} Recovery strategy object\n\t */\n\tstatic createRecoveryStrategy (error) {\n\t\treturn {\n\t\t\terror,\n\t\t\tisRecoverable: this.isRecoverable(error),\n\t\t\tactions: this.getRecoveryActions(error),\n\t\t\tretryable: [\"CONCURRENCY_ERROR\", \"TRANSACTION_ERROR\"].includes(error.code),\n\t\t\tbackoffMs: error.code === \"CONCURRENCY_ERROR\" ? 100 : 0\n\t\t};\n\t}\n}\n","/**\n * Data type definitions and type detection utilities\n */\n\n/**\n * Type definitions for validation\n */\nexport const DataTypes = {\n\tSTRING: \"string\",\n\tNUMBER: \"number\",\n\tBOOLEAN: \"boolean\",\n\tOBJECT: \"object\",\n\tARRAY: \"array\",\n\tDATE: \"date\",\n\tUUID: \"uuid\",\n\tEMAIL: \"email\",\n\tURL: \"url\",\n\tANY: \"any\"\n};\n\n/**\n * Type detection utilities\n */\nexport class TypeDetector {\n\t/**\n\t * Get the type of a value\n\t * @param {*} value - Value to check\n\t * @returns {string} Type string\n\t */\n\tstatic getValueType (value) {\n\t\tif (value === null) return \"null\";\n\t\tif (Array.isArray(value)) return DataTypes.ARRAY;\n\t\tif (value instanceof Date) return DataTypes.DATE;\n\n\t\tconst basicType = typeof value;\n\n\t\t// Special type detection\n\t\tif (basicType === \"string\") {\n\t\t\tif (TypeDetector.isUUID(value)) return DataTypes.UUID;\n\t\t\tif (TypeDetector.isEmail(value)) return DataTypes.EMAIL;\n\t\t\tif (TypeDetector.isURL(value)) return DataTypes.URL;\n\t\t}\n\n\t\treturn basicType;\n\t}\n\n\t/**\n\t * Check if actual type matches expected type\n\t * @param {string} actualType - Actual type\n\t * @param {string} expectedType - Expected type\n\t * @returns {boolean} True if types match\n\t */\n\tstatic isTypeMatch (actualType, expectedType) {\n\t\tif (actualType === expectedType) return true;\n\n\t\t// Special cases\n\t\tif (expectedType === DataTypes.STRING) {\n\t\t\treturn [\"string\", DataTypes.UUID, DataTypes.EMAIL, DataTypes.URL].includes(actualType);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if string is a RFC 4122 compliant UUID (versions 1-5)\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if valid RFC 4122 UUID format (versions 1, 2, 3, 4, or 5)\n\t */\n\tstatic isUUID (value) {\n\t\tconst uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n\t\treturn uuidRegex.test(value);\n\t}\n\n\t/**\n\t * Check if string is an email\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if email format\n\t */\n\tstatic isEmail (value) {\n\t\t// WHATWG HTML5 compliant email validation pattern\n\t\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n\t\treturn emailRegex.test(value);\n\t}\n\n\t/**\n\t * Check if string is a URL\n\t * @param {string} value - String to check\n\t * @returns {boolean} True if URL format\n\t */\n\tstatic isURL (value) {\n\t\ttry {\n\t\t\tconst url = new URL(value);\n\n\t\t\treturn Boolean(url);\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n","import { ValidationError, TypeConstraintError } from \"./errors.js\";\nimport { DataTypes, TypeDetector } from \"./data-types.js\";\n\n/**\n * Field constraint definitions for individual field validation\n */\nexport class FieldConstraint {\n\t/**\n\t * @param {Object} options - Constraint options\n\t * @param {string} options.type - Data type requirement\n\t * @param {boolean} [options.required=false] - Whether field is required\n\t * @param {*} [options.default] - Default value if not provided\n\t * @param {Function} [options.validator] - Custom validation function\n\t * @param {*} [options.min] - Minimum value (for numbers/strings/arrays)\n\t * @param {*} [options.max] - Maximum value (for numbers/strings/arrays)\n\t * @param {Array} [options.enum] - Allowed values\n\t * @param {RegExp} [options.pattern] - Pattern for string validation\n\t */\n\tconstructor ({\n\t\ttype = DataTypes.ANY,\n\t\trequired = false,\n\t\tdefault: defaultValue,\n\t\tvalidator,\n\t\tmin,\n\t\tmax,\n\t\tenum: enumValues,\n\t\tpattern\n\t} = {}) {\n\t\tthis.type = type;\n\t\tthis.required = required;\n\t\tthis.default = defaultValue;\n\t\tthis.validator = validator;\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t\tthis.enum = enumValues;\n\t\tthis.pattern = pattern;\n\t}\n\n\t/**\n\t * Validate a value against this constraint\n\t * @param {*} value - Value to validate\n\t * @param {string} fieldName - Name of the field being validated\n\t * @returns {*} Validated/normalized value\n\t * @throws {ValidationError} If validation fails\n\t */\n\tvalidate (value, fieldName = \"field\") {\n\t\t// Handle undefined values\n\t\tif (value === undefined || value === null) {\n\t\t\tif (this.required) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' is required`, fieldName, value);\n\t\t\t}\n\n\t\t\treturn this.default !== undefined ? this.default : value;\n\t\t}\n\n\t\t// Type validation\n\t\tconst actualType = TypeDetector.getValueType(value);\n\t\tif (this.type !== DataTypes.ANY && !TypeDetector.isTypeMatch(actualType, this.type)) {\n\t\t\tthrow new TypeConstraintError(\n\t\t\t\t`Field '${fieldName}' expected type '${this.type}' but got '${actualType}'`,\n\t\t\t\tthis.type,\n\t\t\t\tactualType,\n\t\t\t\tfieldName\n\t\t\t);\n\t\t}\n\n\t\t// Range validation\n\t\tif (this.min !== undefined && value < this.min) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value ${value} is below minimum ${this.min}`, fieldName, value);\n\t\t}\n\t\tif (this.max !== undefined && value > this.max) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value ${value} exceeds maximum ${this.max}`, fieldName, value);\n\t\t}\n\n\t\t// Length validation for strings and arrays\n\t\tif ((typeof value === \"string\" || Array.isArray(value)) && value.length !== undefined) {\n\t\t\tif (this.min !== undefined && value.length < this.min) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' length ${value.length} is below minimum ${this.min}`, fieldName, value);\n\t\t\t}\n\t\t\tif (this.max !== undefined && value.length > this.max) {\n\t\t\t\tthrow new ValidationError(`Field '${fieldName}' length ${value.length} exceeds maximum ${this.max}`, fieldName, value);\n\t\t\t}\n\t\t}\n\n\t\t// Enum validation\n\t\tif (this.enum && !this.enum.includes(value)) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value '${value}' is not in allowed values: ${this.enum.join(\", \")}`, fieldName, value);\n\t\t}\n\n\t\t// Pattern validation\n\t\tif (this.pattern && typeof value === \"string\" && !this.pattern.test(value)) {\n\t\t\tthrow new ValidationError(`Field '${fieldName}' value '${value}' does not match required pattern`, fieldName, value);\n\t\t}\n\n\t\t// Custom validation\n\t\tif (this.validator && typeof this.validator === \"function\") {\n\t\t\tconst customResult = this.validator(value, fieldName);\n\t\t\tif (customResult !== true && customResult !== undefined) {\n\t\t\t\tconst message = typeof customResult === \"string\" ? customResult : `Custom validation failed for field '${fieldName}'`;\n\t\t\t\tthrow new ValidationError(message, fieldName, value);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import { ValidationError } from \"./errors.js\";\n\n/**\n * Schema definition for record validation\n */\nexport class Schema {\n\t/**\n\t * @param {Object<string, FieldConstraint>} fields - Field constraints\n\t * @param {Object} [options={}] - Schema options\n\t * @param {boolean} [options.strict=false] - Whether to allow additional fields\n\t * @param {boolean} [options.stripUnknown=false] - Whether to remove unknown fields\n\t */\n\tconstructor (fields = {}, { strict = false, stripUnknown = false } = {}) {\n\t\tthis.fields = fields;\n\t\tthis.strict = strict;\n\t\tthis.stripUnknown = stripUnknown;\n\t}\n\n\t/**\n\t * Validate a record against this schema\n\t * @param {Object} record - Record to validate\n\t * @returns {Object} Validated/normalized record\n\t * @throws {ValidationError} If validation fails\n\t */\n\tvalidate (record) {\n\t\tif (!record || typeof record !== \"object\" || Array.isArray(record)) {\n\t\t\tthrow new ValidationError(\"Record must be an object\", \"record\", record);\n\t\t}\n\n\t\tconst validated = {};\n\t\tconst fieldNames = Object.keys(this.fields);\n\t\tconst recordKeys = Object.keys(record);\n\n\t\t// Validate known fields\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tconst constraint = this.fields[fieldName];\n\t\t\tconst value = record[fieldName];\n\t\t\tvalidated[fieldName] = constraint.validate(value, fieldName);\n\t\t}\n\n\t\t// Handle unknown fields\n\t\tconst unknownFields = recordKeys.filter(key => !fieldNames.includes(key));\n\t\tif (unknownFields.length > 0) {\n\t\t\tif (this.strict) {\n\t\t\t\tthrow new ValidationError(`Unknown fields not allowed: ${unknownFields.join(\", \")}`, \"record\", record);\n\t\t\t} else if (!this.stripUnknown) {\n\t\t\t\t// Copy unknown fields as-is\n\t\t\t\tfor (const fieldName of unknownFields) {\n\t\t\t\t\tvalidated[fieldName] = record[fieldName];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn validated;\n\t}\n\n\t/**\n\t * Add a field constraint to the schema\n\t * @param {string} fieldName - Name of the field\n\t * @param {FieldConstraint} constraint - Field constraint\n\t * @returns {Schema} This schema for chaining\n\t */\n\taddField (fieldName, constraint) {\n\t\tthis.fields[fieldName] = constraint;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a field constraint from the schema\n\t * @param {string} fieldName - Name of the field\n\t * @returns {Schema} This schema for chaining\n\t */\n\tremoveField (fieldName) {\n\t\tdelete this.fields[fieldName];\n\n\t\treturn this;\n\t}\n}\n","import { ConfigurationError } from \"./errors.js\";\nimport { Schema } from \"./schema.js\";\n\n/**\n * Configuration validator for Haro options\n */\nexport class ConfigValidator {\n\t/**\n\t * Validate Haro configuration\n\t * @param {Object} config - Configuration to validate\n\t * @returns {Object} Validated configuration\n\t * @throws {ConfigurationError} If configuration is invalid\n\t */\n\tstatic validate (config = {}) {\n\t\tconst validated = { ...config };\n\n\t\t// Validate delimiter\n\t\tif (validated.delimiter !== undefined) {\n\t\t\tif (typeof validated.delimiter !== \"string\" || validated.delimiter.length === 0) {\n\t\t\t\tthrow new ConfigurationError(\"Delimiter must be a non-empty string\", \"delimiter\", validated.delimiter);\n\t\t\t}\n\t\t}\n\n\t\t// Validate id\n\t\tif (validated.id !== undefined && typeof validated.id !== \"string\") {\n\t\t\tthrow new ConfigurationError(\"ID must be a string\", \"id\", validated.id);\n\t\t}\n\n\t\t// Validate immutable\n\t\tif (validated.immutable !== undefined && typeof validated.immutable !== \"boolean\") {\n\t\t\tthrow new ConfigurationError(\"Immutable must be a boolean\", \"immutable\", validated.immutable);\n\t\t}\n\n\t\t// Validate index\n\t\tif (validated.index !== undefined) {\n\t\t\tif (!Array.isArray(validated.index)) {\n\t\t\t\tthrow new ConfigurationError(\"Index must be an array\", \"index\", validated.index);\n\t\t\t}\n\t\t\tfor (const indexField of validated.index) {\n\t\t\t\tif (typeof indexField !== \"string\") {\n\t\t\t\t\tthrow new ConfigurationError(\"Index field names must be strings\", \"index\", indexField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate key\n\t\tif (validated.key !== undefined && typeof validated.key !== \"string\") {\n\t\t\tthrow new ConfigurationError(\"Key field must be a string\", \"key\", validated.key);\n\t\t}\n\n\t\t// Validate versioning\n\t\tif (validated.versioning !== undefined && typeof validated.versioning !== \"boolean\") {\n\t\t\tthrow new ConfigurationError(\"Versioning must be a boolean\", \"versioning\", validated.versioning);\n\t\t}\n\n\t\t// Validate schema\n\t\tif (validated.schema !== undefined && !(validated.schema instanceof Schema)) {\n\t\t\tthrow new ConfigurationError(\"Schema must be an instance of Schema class\", \"schema\", validated.schema);\n\t\t}\n\n\t\treturn validated;\n\t}\n}\n","import { FieldConstraint } from \"./field-constraint.js\";\nimport { DataTypes } from \"./data-types.js\";\n\n/**\n * Utility functions for creating common field constraints\n */\nexport const Constraints = {\n\t/**\n\t * Create a required string field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} String constraint\n\t */\n\trequiredString (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.STRING, required: true, ...options });\n\t},\n\n\t/**\n\t * Create an optional string field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} String constraint\n\t */\n\toptionalString (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.STRING, required: false, ...options });\n\t},\n\n\t/**\n\t * Create a required number field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} Number constraint\n\t */\n\trequiredNumber (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.NUMBER, required: true, ...options });\n\t},\n\n\t/**\n\t * Create an optional number field\n\t * @param {Object} [options={}] - Additional constraint options\n\t * @returns {FieldConstraint} Number constraint\n\t */\n\toptionalNumber (options = {}) {\n\t\treturn new FieldConstraint({ type: DataTypes.NUMBER, required: false, ...options });\n\t},\n\n\t/**\n\t * Create a UUID field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} UUID constraint\n\t */\n\tuuid (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.UUID, required });\n\t},\n\n\t/**\n\t * Create an email field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Email constraint\n\t */\n\temail (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.EMAIL, required });\n\t},\n\n\t/**\n\t * Create an enum field\n\t * @param {Array} values - Allowed values\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Enum constraint\n\t */\n\tenum (values, required = true) {\n\t\treturn new FieldConstraint({ enum: values, required });\n\t},\n\n\t/**\n\t * Create a date field\n\t * @param {boolean} [required=true] - Whether field is required\n\t * @returns {FieldConstraint} Date constraint\n\t */\n\tdate (required = true) {\n\t\treturn new FieldConstraint({ type: DataTypes.DATE, required });\n\t}\n};\n","// Common values\nexport const INT_0 = 0;\nexport const STRING_EMPTY = \"\";\nexport const STRING_PIPE = \"|\";\nexport const STRING_COMMA = \",\";\nexport const STRING_ID = \"id\";\n\n// Data types\nexport const STRING_STRING = \"string\";\nexport const STRING_NUMBER = \"number\";\nexport const STRING_BOOLEAN = \"boolean\";\nexport const STRING_OBJECT = \"object\";\nexport const STRING_FUNCTION = \"function\";\n\n// Operations\nexport const STRING_SET = \"set\";\nexport const STRING_DEL = \"del\";\nexport const STRING_BATCH = \"batch\";\nexport const STRING_GET = \"get\";\nexport const STRING_FIND = \"find\";\nexport const STRING_DELETE = \"delete\";\n\n// Data structures\nexport const STRING_RECORDS = \"records\";\nexport const STRING_INDEXES = \"indexes\";\nexport const STRING_VERSIONS = \"versions\";\nexport const STRING_REGISTRY = \"registry\";\nexport const STRING_SIZE = \"size\";\n\n// Logical operators\nexport const STRING_DOUBLE_PIPE = \"||\";\nexport const STRING_DOUBLE_AND = \"&&\";\n\n// Error messages\nexport const STRING_RECORD_NOT_FOUND = \"Record not found\";\nexport const STRING_INVALID_FUNCTION = \"Invalid function\";\nexport const STRING_INVALID_FIELD = \"Invalid field\";\nexport const STRING_INVALID_TYPE = \"Invalid type\";\nexport const STRING_INVALID_INDEX = \"Invalid index\";\nexport const STRING_INVALID_OPERATION = \"Invalid operation\";\n\n// Configuration keys\nexport const CONFIG_DELIMITER = \"delimiter\";\nexport const CONFIG_ID = \"id\";\nexport const CONFIG_IMMUTABLE = \"immutable\";\nexport const CONFIG_INDEX = \"index\";\nexport const CONFIG_KEY = \"key\";\nexport const CONFIG_VERSIONING = \"versioning\";\nexport const CONFIG_SCHEMA = \"schema\";\nexport const CONFIG_RETENTION_POLICY = \"retentionPolicy\";\nexport const CONFIG_ENABLE_TRANSACTIONS = \"enableTransactions\";\nexport const CONFIG_ENABLE_OPTIMIZATION = \"enableOptimization\";\n\n// Default values\nexport const DEFAULT_DELIMITER = STRING_PIPE;\nexport const DEFAULT_KEY = STRING_ID;\nexport const DEFAULT_IMMUTABLE = false;\nexport const DEFAULT_VERSIONING = false;\nexport const DEFAULT_INDEX = [];\nexport const DEFAULT_ENABLE_TRANSACTIONS = false;\nexport const DEFAULT_ENABLE_OPTIMIZATION = true;\n\n// Performance thresholds\nexport const PERFORMANCE_INDEX_THRESHOLD = 1000;\nexport const PERFORMANCE_CACHE_SIZE = 100;\nexport const PERFORMANCE_BATCH_SIZE = 1000;\nexport const PERFORMANCE_STREAM_BUFFER_SIZE = 10000;\n\n// Memory limits\nexport const MEMORY_VERSION_LIMIT = 10 * 1024 * 1024; // 10MB\nexport const MEMORY_CACHE_LIMIT = 50 * 1024 * 1024; // 50MB\nexport const MEMORY_INDEX_LIMIT = 100 * 1024 * 1024; // 100MB\n\n// Time constants\nexport const TIME_TRANSACTION_TIMEOUT = 60 * 1000; // 60 seconds\nexport const TIME_LOCK_TIMEOUT = 30 * 1000; // 30 seconds\nexport const TIME_VERSION_MAX_AGE = 30 * 24 * 60 * 60 * 1000; // 30 days\nexport const TIME_CACHE_MAX_AGE = 5 * 60 * 1000; // 5 minutes\n\n// Query optimization constants\nexport const QUERY_FULL_SCAN_THRESHOLD = 10000;\nexport const QUERY_INDEX_SELECTIVITY_THRESHOLD = 0.1;\nexport const QUERY_PLAN_CACHE_SIZE = 1000;\n\n// Validation patterns\nexport const PATTERN_UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nexport const PATTERN_EMAIL = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nexport const PATTERN_URL = /^https?:\\/\\/.+/;\n\n// Error codes\nexport const ERROR_VALIDATION = \"VALIDATION_ERROR\";\nexport const ERROR_RECORD_NOT_FOUND = \"RECORD_NOT_FOUND\";\nexport const ERROR_INDEX = \"INDEX_ERROR\";\nexport const ERROR_CONFIGURATION = \"CONFIGURATION_ERROR\";\nexport const ERROR_QUERY = \"QUERY_ERROR\";\nexport const ERROR_TRANSACTION = \"TRANSACTION_ERROR\";\nexport const ERROR_VERSION = \"VERSION_ERROR\";\nexport const ERROR_TYPE_CONSTRAINT = \"TYPE_CONSTRAINT_ERROR\";\nexport const ERROR_CONCURRENCY = \"CONCURRENCY_ERROR\";\n\n// Index types\nexport const INDEX_TYPE_SINGLE = \"single\";\nexport const INDEX_TYPE_COMPOSITE = \"composite\";\nexport const INDEX_TYPE_ARRAY = \"array\";\nexport const INDEX_TYPE_PARTIAL = \"partial\";\n\n// Transaction states\nexport const TRANSACTION_STATE_PENDING = \"pending\";\nexport const TRANSACTION_STATE_ACTIVE = \"active\";\nexport const TRANSACTION_STATE_COMMITTED = \"committed\";\nexport const TRANSACTION_STATE_ABORTED = \"aborted\";\n\n// Lock types\nexport const LOCK_TYPE_SHARED = \"shared\";\nexport const LOCK_TYPE_EXCLUSIVE = \"exclusive\";\n\n// Isolation levels\nexport const ISOLATION_READ_UNCOMMITTED = 0;\nexport const ISOLATION_READ_COMMITTED = 1;\nexport const ISOLATION_REPEATABLE_READ = 2;\nexport const ISOLATION_SERIALIZABLE = 3;\n\n// Operation types for transaction log\nexport const OPERATION_TYPE_SET = \"set\";\nexport const OPERATION_TYPE_DELETE = \"delete\";\nexport const OPERATION_TYPE_BATCH = \"batch\";\n\n// Query types\nexport const QUERY_TYPE_FIND = \"find\";\nexport const QUERY_TYPE_FILTER = \"filter\";\nexport const QUERY_TYPE_SEARCH = \"search\";\nexport const QUERY_TYPE_WHERE = \"where\";\nexport const QUERY_TYPE_SORT = \"sort\";\nexport const QUERY_TYPE_LIMIT = \"limit\";\nexport const QUERY_TYPE_AGGREGATE = \"aggregate\";\n\n// Retention policy types\nexport const RETENTION_POLICY_COUNT = \"count\";\nexport const RETENTION_POLICY_TIME = \"time\";\nexport const RETENTION_POLICY_SIZE = \"size\";\nexport const RETENTION_POLICY_NONE = \"none\";\n\n// Data types for validation\nexport const DATA_TYPE_STRING = \"string\";\nexport const DATA_TYPE_NUMBER = \"number\";\nexport const DATA_TYPE_BOOLEAN = \"boolean\";\nexport const DATA_TYPE_OBJECT = \"object\";\nexport const DATA_TYPE_ARRAY = \"array\";\nexport const DATA_TYPE_DATE = \"date\";\nexport const DATA_TYPE_UUID = \"uuid\";\nexport const DATA_TYPE_EMAIL = \"email\";\nexport const DATA_TYPE_URL = \"url\";\nexport const DATA_TYPE_ANY = \"any\";\n\n// Cost factors for query optimization\nexport const COST_INDEX_LOOKUP = 1;\nexport const COST_FULL_SCAN = 100;\nexport const COST_FILTER_EVALUATION = 10;\nexport const COST_SORT_OPERATION = 50;\nexport const COST_MEMORY_ACCESS = 1;\nexport const COST_COMPARISON = 2;\nexport const COST_REGEX_MATCH = 20;\n\n// Object wrappers for backward compatibility\nexport const TransactionStates = {\n\tPENDING: TRANSACTION_STATE_PENDING,\n\tACTIVE: TRANSACTION_STATE_ACTIVE,\n\tCOMMITTED: TRANSACTION_STATE_COMMITTED,\n\tABORTED: TRANSACTION_STATE_ABORTED\n};\n\nexport const OperationTypes = {\n\tSET: OPERATION_TYPE_SET,\n\tDELETE: OPERATION_TYPE_DELETE,\n\tBATCH: OPERATION_TYPE_BATCH\n};\n\nexport const IsolationLevels = {\n\tREAD_UNCOMMITTED: ISOLATION_READ_UNCOMMITTED,\n\tREAD_COMMITTED: ISOLATION_READ_COMMITTED,\n\tREPEATABLE_READ: ISOLATION_REPEATABLE_READ,\n\tSERIALIZABLE: ISOLATION_SERIALIZABLE\n};\n\nexport const LockTypes = {\n\tSHARED: LOCK_TYPE_SHARED,\n\tEXCLUSIVE: LOCK_TYPE_EXCLUSIVE\n};\n","/**\n * Standardized record wrapper that provides consistent interface\n */\nexport class Record {\n\t/**\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} [metadata={}] - Additional metadata\n\t */\n\tconstructor (key, data, metadata = {}) {\n\t\tthis._key = key;\n\t\tthis._data = data;\n\t\tthis._metadata = {\n\t\t\tcreatedAt: new Date().toISOString(),\n\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\tversion: 1,\n\t\t\t...metadata\n\t\t};\n\n\t\t// Make the record immutable to prevent accidental modifications\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get the record key\n\t * @returns {string} Record key\n\t */\n\tget key () {\n\t\treturn this._key;\n\t}\n\n\t/**\n\t * Get the record data\n\t * @returns {Object} Record data (frozen copy)\n\t */\n\tget data () {\n\t\treturn Object.freeze({ ...this._data });\n\t}\n\n\t/**\n\t * Get record metadata\n\t * @returns {Object} Metadata object\n\t */\n\tget metadata () {\n\t\treturn Object.freeze({ ...this._metadata });\n\t}\n\n\t/**\n\t * Get a specific field value\n\t * @param {string} fieldName - Name of the field\n\t * @returns {*} Field value\n\t */\n\tget (fieldName) {\n\t\treturn this._data[fieldName];\n\t}\n\n\t/**\n\t * Check if record has a specific field\n\t * @param {string} fieldName - Name of the field\n\t * @returns {boolean} True if field exists\n\t */\n\thas (fieldName) {\n\t\treturn fieldName in this._data;\n\t}\n\n\t/**\n\t * Get all field names\n\t * @returns {string[]} Array of field names\n\t */\n\tgetFields () {\n\t\treturn Object.keys(this._data);\n\t}\n\n\t/**\n\t * Create a new record with updated data (immutable update)\n\t * @param {Object} updates - Data updates to apply\n\t * @param {Object} [metadataUpdates={}] - Metadata updates\n\t * @returns {Record} New record instance with updates\n\t */\n\tupdate (updates, metadataUpdates = {}) {\n\t\tconst newData = { ...this._data, ...updates };\n\t\tconst newMetadata = {\n\t\t\t...this._metadata,\n\t\t\t...metadataUpdates,\n\t\t\tupdatedAt: new Date().toISOString(),\n\t\t\tversion: this._metadata.version + 1\n\t\t};\n\n\t\treturn new Record(this._key, newData, newMetadata);\n\t}\n\n\t/**\n\t * Convert record to plain object\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {Object} Plain object representation\n\t */\n\ttoObject (includeMetadata = false) {\n\t\tconst result = { ...this._data };\n\n\t\tif (includeMetadata) {\n\t\t\tresult._metadata = this._metadata;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convert record to JSON string\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {string} JSON string representation\n\t */\n\ttoJSON (includeMetadata = false) {\n\t\treturn JSON.stringify(this.toObject(includeMetadata));\n\t}\n\n\t/**\n\t * Compare this record with another record\n\t * @param {Record} other - Other record to compare\n\t * @returns {boolean} True if records are equal\n\t */\n\tequals (other) {\n\t\tif (!(other instanceof Record)) return false;\n\t\tif (this._key !== other._key) return false;\n\n\t\treturn JSON.stringify(this._data) === JSON.stringify(other._data);\n\t}\n\n\t/**\n\t * Create a deep clone of this record\n\t * @returns {Record} Cloned record\n\t */\n\tclone () {\n\t\treturn new Record(this._key, structuredClone(this._data), structuredClone(this._metadata));\n\t}\n\n\t/**\n\t * Get the size of the record data (for memory analysis)\n\t * @returns {number} Estimated size in bytes\n\t */\n\tgetSize () {\n\t\treturn JSON.stringify(this._data).length * 2; // Rough estimate (UTF-16)\n\t}\n\n\t/**\n\t * Check if record matches a predicate\n\t * @param {Function|Object} predicate - Function or object to match against\n\t * @returns {boolean} True if record matches\n\t */\n\tmatches (predicate) {\n\t\tif (typeof predicate === \"function\") {\n\t\t\treturn predicate(this._data, this._key, this);\n\t\t}\n\n\t\tif (typeof predicate === \"object\" && predicate !== null) {\n\t\t\treturn Object.entries(predicate).every(([field, value]) => {\n\t\t\t\tconst recordValue = this._data[field];\n\n\t\t\t\tif (value instanceof RegExp) {\n\t\t\t\t\treturn value.test(recordValue);\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\treturn Array.isArray(recordValue) ?\n\t\t\t\t\t\tvalue.some(v => recordValue.includes(v)) :\n\t\t\t\t\t\tvalue.includes(recordValue);\n\t\t\t\t}\n\n\t\t\t\treturn recordValue === value;\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get a string representation of the record\n\t * @returns {string} String representation\n\t */\n\ttoString () {\n\t\treturn `Record(${this._key}: ${JSON.stringify(this._data)})`;\n\t}\n\n\t/**\n\t * Symbol for iteration (makes record iterable)\n\t * @returns {Iterator} Iterator over [fieldName, value] pairs\n\t */\n\t* [Symbol.iterator] () {\n\t\tfor (const [field, value] of Object.entries(this._data)) {\n\t\t\tyield [field, value];\n\t\t}\n\t}\n}\n\n/**\n * Collection of records with utilities for batch operations\n */\nexport class RecordCollection {\n\t/**\n\t * @param {Record[]} [records=[]] - Initial records\n\t */\n\tconstructor (records = []) {\n\t\tthis._records = [...records];\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get the number of records\n\t * @returns {number} Number of records\n\t */\n\tget length () {\n\t\treturn this._records.length;\n\t}\n\n\t/**\n\t * Get record at specific index\n\t * @param {number} index - Index to retrieve\n\t * @returns {Record|undefined} Record at index\n\t */\n\tat (index) {\n\t\treturn this._records[index];\n\t}\n\n\t/**\n\t * Get first record\n\t * @returns {Record|undefined} First record\n\t */\n\tfirst () {\n\t\treturn this._records[0];\n\t}\n\n\t/**\n\t * Get last record\n\t * @returns {Record|undefined} Last record\n\t */\n\tlast () {\n\t\treturn this._records[this._records.length - 1];\n\t}\n\n\t/**\n\t * Filter records by predicate\n\t * @param {Function} predicate - Filter function\n\t * @returns {RecordCollection} New collection with filtered records\n\t */\n\tfilter (predicate) {\n\t\treturn new RecordCollection(this._records.filter(predicate));\n\t}\n\n\t/**\n\t * Map records to new values\n\t * @param {Function} mapper - Mapping function\n\t * @returns {Array} Array of mapped values\n\t */\n\tmap (mapper) {\n\t\treturn this._records.map(mapper);\n\t}\n\n\t/**\n\t * Find first record matching predicate\n\t * @param {Function} predicate - Search predicate\n\t * @returns {Record|undefined} First matching record\n\t */\n\tfind (predicate) {\n\t\treturn this._records.find(predicate);\n\t}\n\n\t/**\n\t * Check if any record matches predicate\n\t * @param {Function} predicate - Test predicate\n\t * @returns {boolean} True if any record matches\n\t */\n\tsome (predicate) {\n\t\treturn this._records.some(predicate);\n\t}\n\n\t/**\n\t * Check if all records match predicate\n\t * @param {Function} predicate - Test predicate\n\t * @returns {boolean} True if all records match\n\t */\n\tevery (predicate) {\n\t\treturn this._records.every(predicate);\n\t}\n\n\t/**\n\t * Sort records by comparator\n\t * @param {Function} comparator - Sort function\n\t * @returns {RecordCollection} New sorted collection\n\t */\n\tsort (comparator) {\n\t\treturn new RecordCollection([...this._records].sort(comparator));\n\t}\n\n\t/**\n\t * Get a slice of records\n\t * @param {number} [start=0] - Start index\n\t * @param {number} [end] - End index\n\t * @returns {RecordCollection} New collection with sliced records\n\t */\n\tslice (start = 0, end) {\n\t\treturn new RecordCollection(this._records.slice(start, end));\n\t}\n\n\t/**\n\t * Reduce records to a single value\n\t * @param {Function} reducer - Reducer function\n\t * @param {*} [initialValue] - Initial value\n\t * @returns {*} Reduced value\n\t */\n\treduce (reducer, initialValue) {\n\t\treturn this._records.reduce(reducer, initialValue);\n\t}\n\n\t/**\n\t * Convert to array of records\n\t * @returns {Record[]} Array of records\n\t */\n\ttoArray () {\n\t\treturn [...this._records];\n\t}\n\n\t/**\n\t * Convert to array of plain objects\n\t * @param {boolean} [includeMetadata=false] - Whether to include metadata\n\t * @returns {Object[]} Array of plain objects\n\t */\n\ttoObjects (includeMetadata = false) {\n\t\treturn this._records.map(record => record.toObject(includeMetadata));\n\t}\n\n\t/**\n\t * Get records as key-value pairs\n\t * @returns {Array<[string, Object]>} Array of [key, data] pairs\n\t */\n\ttoPairs () {\n\t\treturn this._records.map(record => [record.key, record.data]);\n\t}\n\n\t/**\n\t * Group records by field value\n\t * @param {string|Function} keySelector - Field name or function to get grouping key\n\t * @returns {Map<string, RecordCollection>} Map of grouped records\n\t */\n\tgroupBy (keySelector) {\n\t\tconst groups = new Map();\n\t\tconst getKey = typeof keySelector === \"function\" ?\n\t\t\tkeySelector :\n\t\t\trecord => record.get(keySelector);\n\n\t\tfor (const record of this._records) {\n\t\t\tconst key = getKey(record);\n\t\t\tif (!groups.has(key)) {\n\t\t\t\tgroups.set(key, []);\n\t\t\t}\n\t\t\tgroups.get(key).push(record);\n\t\t}\n\n\t\t// Convert arrays to RecordCollections\n\t\tfor (const [key, records] of groups) {\n\t\t\tgroups.set(key, new RecordCollection(records));\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Get unique records (by key)\n\t * @returns {RecordCollection} Collection with unique records\n\t */\n\tunique () {\n\t\tconst seen = new Set();\n\t\tconst unique = [];\n\n\t\tfor (const record of this._records) {\n\t\t\tif (!seen.has(record.key)) {\n\t\t\t\tseen.add(record.key);\n\t\t\t\tunique.push(record);\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(unique);\n\t}\n\n\t/**\n\t * Iterate over records\n\t * @param {Function} callback - Callback function\n\t * @returns {void}\n\t */\n\tforEach (callback) {\n\t\tthis._records.forEach(callback);\n\t}\n\n\t/**\n\t * Symbol for iteration (makes collection iterable)\n\t * @returns {Iterator} Iterator over records\n\t */\n\t* [Symbol.iterator] () {\n\t\tfor (const record of this._records) {\n\t\t\tyield record;\n\t\t}\n\t}\n\n\t/**\n\t * Get string representation\n\t * @returns {string} String representation\n\t */\n\ttoString () {\n\t\treturn `RecordCollection(${this._records.length} records)`;\n\t}\n}\n\n/**\n * Factory functions for creating records and collections\n */\nexport const RecordFactory = {\n\t/**\n\t * Create a record from raw data\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {Record} New record instance\n\t */\n\tcreate (key, data, metadata = {}) {\n\t\treturn new Record(key, data, metadata);\n\t},\n\n\t/**\n\t * Create a record from a plain object (key extracted from data)\n\t * @param {Object} data - Data object containing key field\n\t * @param {string} [keyField='id'] - Name of the key field\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {Record} New record instance\n\t */\n\tfromObject (data, keyField = \"id\", metadata = {}) {\n\t\tconst key = data[keyField];\n\t\tif (!key) {\n\t\t\tthrow new Error(`Key field '${keyField}' not found in data`);\n\t\t}\n\n\t\treturn new Record(key, data, metadata);\n\t},\n\n\t/**\n\t * Create a collection from an array of records or data objects\n\t * @param {Array<Record|Object>} items - Items to create collection from\n\t * @param {string} [keyField='id'] - Key field name for objects\n\t * @returns {RecordCollection} New record collection\n\t */\n\tcreateCollection (items, keyField = \"id\") {\n\t\tconst records = items.map(item => {\n\t\t\tif (item instanceof Record) {\n\t\t\t\treturn item;\n\t\t\t}\n\n\t\t\treturn this.fromObject(item, keyField);\n\t\t});\n\n\t\treturn new RecordCollection(records);\n\t},\n\n\t/**\n\t * Create an empty collection\n\t * @returns {RecordCollection} Empty record collection\n\t */\n\temptyCollection () {\n\t\treturn new RecordCollection();\n\t}\n};\n","import { IndexError } from \"./errors.js\";\n\n/**\n * Types of indexes supported\n */\nexport const IndexTypes = {\n\tSINGLE: \"single\",\n\tCOMPOSITE: \"composite\",\n\tARRAY: \"array\",\n\tPARTIAL: \"partial\"\n};\n\n/**\n * Index definition with metadata\n */\nexport class IndexDefinition {\n\t/**\n\t * @param {string} name - Index name\n\t * @param {string[]} fields - Field names to index\n\t * @param {Object} [options={}] - Index options\n\t * @param {string} [options.type=IndexTypes.SINGLE] - Index type\n\t * @param {boolean} [options.unique=false] - Whether values should be unique\n\t * @param {Function} [options.filter] - Filter function for partial indexes\n\t * @param {Function} [options.transform] - Transform function for index values\n\t * @param {string} [options.delimiter='|'] - Delimiter for composite indexes\n\t */\n\tconstructor (name, fields, {\n\t\ttype = IndexTypes.SINGLE,\n\t\tunique = false,\n\t\tfilter,\n\t\ttransform,\n\t\tdelimiter = \"|\"\n\t} = {}) {\n\t\tthis.name = name;\n\t\tthis.fields = Array.isArray(fields) ? fields : [fields];\n\t\tthis.type = this._determineType(this.fields, type);\n\t\tthis.unique = unique;\n\t\tthis.filter = filter;\n\t\tthis.transform = transform;\n\t\tthis.delimiter = delimiter;\n\t\tthis.createdAt = new Date();\n\t\tthis.stats = {\n\t\t\ttotalKeys: 0,\n\t\t\ttotalEntries: 0,\n\t\t\tmemoryUsage: 0,\n\t\t\tlastUpdated: new Date()\n\t\t};\n\t}\n\n\t/**\n\t * Determine index type based on fields\n\t * @param {string[]} fields - Field names\n\t * @param {string} suggestedType - Suggested type\n\t * @returns {string} Determined index type\n\t * @private\n\t */\n\t_determineType (fields, suggestedType) {\n\t\tif (suggestedType === IndexTypes.PARTIAL) {\n\t\t\treturn IndexTypes.PARTIAL;\n\t\t}\n\n\t\tif (fields.length > 1) {\n\t\t\treturn IndexTypes.COMPOSITE;\n\t\t}\n\n\t\treturn IndexTypes.SINGLE;\n\t}\n\n\t/**\n\t * Generate index keys for a record\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of index keys\n\t */\n\tgenerateKeys (record) {\n\t\t// Apply filter for partial indexes\n\t\tif (this.filter && !this.filter(record)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst keys = this._extractKeys(record);\n\n\t\t// Apply transform if specified\n\t\tif (this.transform) {\n\t\t\treturn keys.map(key => this.transform(key, record));\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Extract raw keys from record\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of raw keys\n\t * @private\n\t */\n\t_extractKeys (record) {\n\t\tif (this.type === IndexTypes.COMPOSITE) {\n\t\t\treturn this._generateCompositeKeys(record);\n\t\t}\n\n\t\tconst field = this.fields[0];\n\t\tconst value = record[field];\n\n\t\tif (value === undefined || value === null) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Handle array fields\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value.map(v => String(v));\n\t\t}\n\n\t\treturn [String(value)];\n\t}\n\n\t/**\n\t * Generate composite keys\n\t * @param {Object} record - Record data\n\t * @returns {string[]} Array of composite keys\n\t * @private\n\t */\n\t_generateCompositeKeys (record) {\n\t\tlet keys = [\"\"];\n\n\t\tfor (const field of this.fields.sort()) {\n\t\t\tconst value = record[field];\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn []; // Skip records with missing composite fields\n\t\t\t}\n\n\t\t\tconst values = Array.isArray(value) ? value : [value];\n\t\t\tconst newKeys = [];\n\n\t\t\tfor (const existingKey of keys) {\n\t\t\t\tfor (const val of values) {\n\t\t\t\t\tconst newKey = existingKey === \"\" ?\n\t\t\t\t\t\tString(val) :\n\t\t\t\t\t\t`${existingKey}${this.delimiter}${String(val)}`;\n\t\t\t\t\tnewKeys.push(newKey);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tkeys = newKeys;\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Update statistics\n\t * @param {number} keyCount - Number of keys\n\t * @param {number} entryCount - Number of entries\n\t * @param {number} memoryDelta - Memory change in bytes\n\t */\n\tupdateStats (keyCount, entryCount, memoryDelta) {\n\t\tthis.stats.totalKeys = keyCount;\n\t\tthis.stats.totalEntries = entryCount;\n\t\tthis.stats.memoryUsage += memoryDelta;\n\t\tthis.stats.lastUpdated = new Date();\n\t}\n}\n\n/**\n * Memory-efficient index storage with reference counting\n */\nexport class IndexStorage {\n\tconstructor () {\n\t\t// Map<indexKey, Set<recordKey>>\n\t\tthis._storage = new Map();\n\t\t// Track reference counts for memory management\n\t\tthis._refCounts = new Map();\n\t}\n\n\t/**\n\t * Add a record to index\n\t * @param {string} indexKey - Index key\n\t * @param {string} recordKey - Record key\n\t */\n\tadd (indexKey, recordKey) {\n\t\tif (!this._storage.has(indexKey)) {\n\t\t\tthis._storage.set(indexKey, new Set());\n\t\t\tthis._refCounts.set(indexKey, 0);\n\t\t}\n\n\t\tconst recordSet = this._storage.get(indexKey);\n\t\tif (!recordSet.has(recordKey)) {\n\t\t\trecordSet.add(recordKey);\n\t\t\tthis._refCounts.set(indexKey, this._refCounts.get(indexKey) + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a record from index\n\t * @param {string} indexKey - Index key\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if record was removed\n\t */\n\tremove (indexKey, recordKey) {\n\t\tconst recordSet = this._storage.get(indexKey);\n\t\tif (!recordSet) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst removed = recordSet.delete(recordKey);\n\t\tif (removed) {\n\t\t\tconst newCount = this._refCounts.get(indexKey) - 1;\n\t\t\tif (newCount === 0) {\n\t\t\t\t// Clean up empty index keys\n\t\t\t\tthis._storage.delete(indexKey);\n\t\t\t\tthis._refCounts.delete(indexKey);\n\t\t\t} else {\n\t\t\t\tthis._refCounts.set(indexKey, newCount);\n\t\t\t}\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Get records for index key\n\t * @param {string} indexKey - Index key\n\t * @returns {Set<string>} Set of record keys\n\t */\n\tget (indexKey) {\n\t\treturn this._storage.get(indexKey) || new Set();\n\t}\n\n\t/**\n\t * Check if index key exists\n\t * @param {string} indexKey - Index key\n\t * @returns {boolean} True if key exists\n\t */\n\thas (indexKey) {\n\t\treturn this._storage.has(indexKey);\n\t}\n\n\t/**\n\t * Get all index keys\n\t * @returns {string[]} Array of index keys\n\t */\n\tkeys () {\n\t\treturn Array.from(this._storage.keys());\n\t}\n\n\t/**\n\t * Get index statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tlet totalEntries = 0;\n\t\tfor (const recordSet of this._storage.values()) {\n\t\t\ttotalEntries += recordSet.size;\n\t\t}\n\n\t\treturn {\n\t\t\ttotalKeys: this._storage.size,\n\t\t\ttotalEntries,\n\t\t\tmemoryUsage: this._estimateMemoryUsage()\n\t\t};\n\t}\n\n\t/**\n\t * Clear all index data\n\t */\n\tclear () {\n\t\tthis._storage.clear();\n\t\tthis._refCounts.clear();\n\t}\n\n\t/**\n\t * Estimate memory usage in bytes\n\t * @returns {number} Estimated memory usage\n\t * @private\n\t */\n\t_estimateMemoryUsage () {\n\t\tlet size = 0;\n\n\t\tfor (const [key, recordSet] of this._storage) {\n\t\t\t// Estimate key size (string)\n\t\t\tsize += key.length * 2;\n\n\t\t\t// Estimate Set overhead + record keys\n\t\t\tsize += 64; // Set object overhead\n\t\t\tfor (const recordKey of recordSet) {\n\t\t\t\tsize += recordKey.length * 2;\n\t\t\t}\n\t\t}\n\n\t\treturn size;\n\t}\n}\n\n/**\n * Index manager that handles multiple indexes efficiently\n */\nexport class IndexManager {\n\t/**\n\t * @param {string} [delimiter='|'] - Default delimiter for composite indexes\n\t */\n\tconstructor (delimiter = \"|\") {\n\t\tthis.delimiter = delimiter;\n\t\t// Map<indexName, IndexDefinition>\n\t\tthis._definitions = new Map();\n\t\t// Map<indexName, IndexStorage>\n\t\tthis._indexes = new Map();\n\t\t// Performance tracking\n\t\tthis._stats = {\n\t\t\ttotalOperations: 0,\n\t\t\ttotalTime: 0,\n\t\t\tlastOptimized: new Date()\n\t\t};\n\t}\n\n\t/**\n\t * Create a new index\n\t * @param {string} name - Index name\n\t * @param {string|string[]} fields - Field name(s) to index\n\t * @param {Object} [options={}] - Index options\n\t * @returns {IndexManager} This instance for chaining\n\t * @throws {IndexError} If index already exists or configuration is invalid\n\t */\n\tcreateIndex (name, fields, options = {}) {\n\t\tif (this._definitions.has(name)) {\n\t\t\tthrow new IndexError(`Index '${name}' already exists`, name, \"create\");\n\t\t}\n\n\t\tconst definition = new IndexDefinition(name, fields, {\n\t\t\tdelimiter: this.delimiter,\n\t\t\t...options\n\t\t});\n\n\t\tthis._definitions.set(name, definition);\n\t\tthis._indexes.set(name, new IndexStorage());\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Drop an index\n\t * @param {string} name - Index name\n\t * @returns {IndexManager} This instance for chaining\n\t * @throws {IndexError} If index doesn't exist\n\t */\n\tdropIndex (name) {\n\t\tif (!this._definitions.has(name)) {\n\t\t\tthrow new IndexError(`Index '${name}' does not exist`, name, \"drop\");\n\t\t}\n\n\t\tthis._definitions.delete(name);\n\t\tthis._indexes.delete(name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if index exists\n\t * @param {string} name - Index name\n\t * @returns {boolean} True if index exists\n\t */\n\thasIndex (name) {\n\t\treturn this._definitions.has(name);\n\t}\n\n\t/**\n\t * Get index definition\n\t * @param {string} name - Index name\n\t * @returns {IndexDefinition|undefined} Index definition\n\t */\n\tgetIndexDefinition (name) {\n\t\treturn this._definitions.get(name);\n\t}\n\n\t/**\n\t * List all indexes\n\t * @returns {string[]} Array of index names\n\t */\n\tlistIndexes () {\n\t\treturn Array.from(this._definitions.keys());\n\t}\n\n\t/**\n\t * Add a record to all applicable indexes\n\t * @param {string} recordKey - Record key\n\t * @param {Object} recordData - Record data\n\t * @throws {IndexError} If unique constraint is violated\n\t */\n\taddRecord (recordKey, recordData) {\n\t\tconst startTime = Date.now();\n\n\t\tfor (const [indexName, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(indexName);\n\t\t\tconst indexKeys = definition.generateKeys(recordData);\n\n\t\t\tfor (const indexKey of indexKeys) {\n\t\t\t\t// Check unique constraint\n\t\t\t\tif (definition.unique && storage.has(indexKey)) {\n\t\t\t\t\tconst existingRecords = storage.get(indexKey);\n\t\t\t\t\tif (existingRecords.size > 0 && !existingRecords.has(recordKey)) {\n\t\t\t\t\t\tthrow new IndexError(\n\t\t\t\t\t\t\t`Unique constraint violation on index '${indexName}' for value '${indexKey}'`,\n\t\t\t\t\t\t\tindexName,\n\t\t\t\t\t\t\t\"add\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstorage.add(indexKey, recordKey);\n\t\t\t}\n\n\t\t\t// Update statistics\n\t\t\tconst stats = storage.getStats();\n\t\t\tdefinition.updateStats(stats.totalKeys, stats.totalEntries, 0);\n\t\t}\n\n\t\tthis._updatePerformanceStats(Date.now() - startTime);\n\t}\n\n\t/**\n\t * Remove a record from all indexes\n\t * @param {string} recordKey - Record key\n\t * @param {Object} recordData - Record data\n\t */\n\tremoveRecord (recordKey, recordData) {\n\t\tconst startTime = Date.now();\n\n\t\tfor (const [indexName, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(indexName);\n\t\t\tconst indexKeys = definition.generateKeys(recordData);\n\n\t\t\tfor (const indexKey of indexKeys) {\n\t\t\t\tstorage.remove(indexKey, recordKey);\n\t\t\t}\n\n\t\t\t// Update statistics\n\t\t\tconst stats = storage.getStats();\n\t\t\tdefinition.updateStats(stats.totalKeys, stats.totalEntries, 0);\n\t\t}\n\n\t\tthis._updatePerformanceStats(Date.now() - startTime);\n\t}\n\n\t/**\n\t * Update a record in indexes (remove old, add new)\n\t * @param {string} recordKey - Record key\n\t * @param {Object} oldData - Old record data\n\t * @param {Object} newData - New record data\n\t */\n\tupdateRecord (recordKey, oldData, newData) {\n\t\tthis.removeRecord(recordKey, oldData);\n\t\tthis.addRecord(recordKey, newData);\n\t}\n\n\t/**\n\t * Find records using index\n\t * @param {string} indexName - Index name\n\t * @param {string} indexKey - Index key to search for\n\t * @returns {Set<string>} Set of record keys\n\t * @throws {IndexError} If index doesn't exist\n\t */\n\tfindByIndex (indexName, indexKey) {\n\t\tconst storage = this._indexes.get(indexName);\n\t\tif (!storage) {\n\t\t\tthrow new IndexError(`Index '${indexName}' does not exist`, indexName, \"query\");\n\t\t}\n\n\t\treturn new Set(storage.get(indexKey));\n\t}\n\n\t/**\n\t * Find records using multiple criteria (intersection)\n\t * @param {Object} criteria - Object with index names as keys and search values as values\n\t * @returns {Set<string>} Set of record keys that match all criteria\n\t */\n\tfindByCriteria (criteria) {\n\t\tconst indexNames = Object.keys(criteria);\n\t\tif (indexNames.length === 0) {\n\t\t\treturn new Set();\n\t\t}\n\n\t\tlet result = null;\n\n\t\tfor (const indexName of indexNames) {\n\t\t\tconst indexKey = String(criteria[indexName]);\n\t\t\tconst records = this.findByIndex(indexName, indexKey);\n\n\t\t\tif (result === null) {\n\t\t\t\tresult = records;\n\t\t\t} else {\n\t\t\t\t// Intersection\n\t\t\t\tresult = new Set([...result].filter(key => records.has(key)));\n\t\t\t}\n\n\t\t\t// Early termination if no matches\n\t\t\tif (result.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Get optimal index for query fields\n\t * @param {string[]} fields - Fields being queried\n\t * @returns {string|null} Best index name or null if no suitable index\n\t */\n\tgetOptimalIndex (fields) {\n\t\tconst sortedFields = [...fields].sort();\n\n\t\t// Look for exact match first\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst indexFields = [...definition.fields].sort();\n\t\t\tif (JSON.stringify(indexFields) === JSON.stringify(sortedFields)) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\t// Look for index that covers all fields\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tif (fields.every(field => definition.fields.includes(field))) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\n\t\t// Look for index that covers some fields (prefer single field indexes)\n\t\tconst candidates = [];\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst coverage = fields.filter(field => definition.fields.includes(field)).length;\n\t\t\tif (coverage > 0) {\n\t\t\t\tcandidates.push({ name, coverage, fields: definition.fields.length });\n\t\t\t}\n\t\t}\n\n\t\tif (candidates.length > 0) {\n\t\t\t// Sort by coverage (descending) then by field count (ascending)\n\t\t\tcandidates.sort((a, b) => {\n\t\t\t\tif (a.coverage !== b.coverage) {\n\t\t\t\t\treturn b.coverage - a.coverage;\n\t\t\t\t}\n\n\t\t\t\treturn a.fields - b.fields;\n\t\t\t});\n\n\t\t\treturn candidates[0].name;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Rebuild all indexes from scratch\n\t * @param {Map<string, Object>} records - All records to reindex\n\t */\n\trebuild (records) {\n\t\t// Clear all indexes\n\t\tfor (const storage of this._indexes.values()) {\n\t\t\tstorage.clear();\n\t\t}\n\n\t\t// Rebuild from records\n\t\tfor (const [recordKey, recordData] of records) {\n\t\t\tthis.addRecord(recordKey, recordData);\n\t\t}\n\n\t\tthis._stats.lastOptimized = new Date();\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst indexStats = {};\n\t\tlet totalMemory = 0;\n\n\t\tfor (const [name, definition] of this._definitions) {\n\t\t\tconst storage = this._indexes.get(name);\n\t\t\tconst stats = storage.getStats();\n\t\t\tindexStats[name] = {\n\t\t\t\t...definition.stats,\n\t\t\t\t...stats,\n\t\t\t\ttype: definition.type,\n\t\t\t\tfields: definition.fields\n\t\t\t};\n\t\t\ttotalMemory += stats.memoryUsage;\n\t\t}\n\n\t\treturn {\n\t\t\tindexes: indexStats,\n\t\t\ttotalIndexes: this._definitions.size,\n\t\t\ttotalMemoryUsage: totalMemory,\n\t\t\tperformance: {\n\t\t\t\t...this._stats,\n\t\t\t\taverageOperationTime: this._stats.totalOperations > 0 ?\n\t\t\t\t\tthis._stats.totalTime / this._stats.totalOperations :\n\t\t\t\t\t0\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Clear all indexes\n\t */\n\tclear () {\n\t\tfor (const storage of this._indexes.values()) {\n\t\t\tstorage.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Update performance statistics\n\t * @param {number} operationTime - Time taken for operation in ms\n\t * @private\n\t */\n\t_updatePerformanceStats (operationTime) {\n\t\tthis._stats.totalOperations++;\n\t\tthis._stats.totalTime += operationTime;\n\t}\n}\n","import { ConfigurationError } from \"./errors.js\";\n\n/**\n * Version retention policies\n */\nexport const RetentionPolicies = {\n\tCOUNT: \"count\",\n\tTIME: \"time\",\n\tSIZE: \"size\",\n\tNONE: \"none\"\n};\n\n/**\n * Version entry with metadata\n */\nexport class VersionEntry {\n\t/**\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t */\n\tconstructor (data, metadata = {}) {\n\t\tthis.data = Object.freeze(structuredClone(data));\n\t\tthis.timestamp = new Date();\n\t\tthis.size = this._calculateSize(data);\n\t\tthis.metadata = Object.freeze({\n\t\t\toperation: \"update\",\n\t\t\t...metadata\n\t\t});\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Calculate estimated size of version data\n\t * @param {Object} data - Data to measure\n\t * @returns {number} Size in bytes\n\t * @private\n\t */\n\t_calculateSize (data) {\n\t\ttry {\n\t\t\treturn JSON.stringify(data).length * 2; // UTF-16 estimate\n\t\t} catch {\n\t\t\treturn 1024; // Fallback estimate\n\t\t}\n\t}\n\n\t/**\n\t * Check if version is older than specified time\n\t * @param {number} maxAge - Maximum age in milliseconds\n\t * @returns {boolean} True if version is older\n\t */\n\tisOlderThan (maxAge) {\n\t\treturn Date.now() - this.timestamp.getTime() > maxAge;\n\t}\n\n\t/**\n\t * Get age of version in milliseconds\n\t * @returns {number} Age in milliseconds\n\t */\n\tgetAge () {\n\t\treturn Date.now() - this.timestamp.getTime();\n\t}\n\n\t/**\n\t * Convert to plain object for serialization\n\t * @returns {Object} Plain object representation\n\t */\n\ttoObject () {\n\t\treturn {\n\t\t\tdata: this.data,\n\t\t\ttimestamp: this.timestamp.toISOString(),\n\t\t\tsize: this.size,\n\t\t\tmetadata: this.metadata\n\t\t};\n\t}\n}\n\n/**\n * Version history for a single record\n */\nexport class VersionHistory {\n\t/**\n\t * @param {string} recordKey - Record key\n\t * @param {Object} [policy={}] - Retention policy\n\t */\n\tconstructor (recordKey, policy = {}) {\n\t\tthis.recordKey = recordKey;\n\t\tthis.policy = policy;\n\t\tthis.versions = [];\n\t\tthis.totalSize = 0;\n\t\tthis.createdAt = new Date();\n\t\tthis.lastAccessed = new Date();\n\t}\n\n\t/**\n\t * Add a new version\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t * @returns {VersionEntry} Created version entry\n\t */\n\taddVersion (data, metadata = {}) {\n\t\tconst version = new VersionEntry(data, metadata);\n\t\tthis.versions.push(version);\n\t\tthis.totalSize += version.size;\n\t\tthis.lastAccessed = new Date();\n\n\t\t// Apply retention policy\n\t\tthis._applyRetentionPolicy();\n\n\t\treturn version;\n\t}\n\n\t/**\n\t * Get version by index (0 = oldest, -1 = newest)\n\t * @param {number} index - Version index\n\t * @returns {VersionEntry|undefined} Version entry\n\t */\n\tgetVersion (index) {\n\t\tthis.lastAccessed = new Date();\n\n\t\tif (index < 0) {\n\t\t\treturn this.versions[this.versions.length + index];\n\t\t}\n\n\t\treturn this.versions[index];\n\t}\n\n\t/**\n\t * Get latest version\n\t * @returns {VersionEntry|undefined} Latest version\n\t */\n\tgetLatest () {\n\t\treturn this.getVersion(-1);\n\t}\n\n\t/**\n\t * Get oldest version\n\t * @returns {VersionEntry|undefined} Oldest version\n\t */\n\tgetOldest () {\n\t\treturn this.getVersion(0);\n\t}\n\n\t/**\n\t * Get all versions within time range\n\t * @param {Date} [start] - Start time (inclusive)\n\t * @param {Date} [end] - End time (inclusive)\n\t * @returns {VersionEntry[]} Array of versions in range\n\t */\n\tgetVersionsInRange (start, end) {\n\t\tthis.lastAccessed = new Date();\n\n\t\treturn this.versions.filter(version => {\n\t\t\tconst timestamp = version.timestamp;\n\t\t\tconst afterStart = !start || timestamp >= start;\n\t\t\tconst beforeEnd = !end || timestamp <= end;\n\n\t\t\treturn afterStart && beforeEnd;\n\t\t});\n\t}\n\n\t/**\n\t * Get number of versions\n\t * @returns {number} Version count\n\t */\n\tgetCount () {\n\t\treturn this.versions.length;\n\t}\n\n\t/**\n\t * Get total size of all versions\n\t * @returns {number} Total size in bytes\n\t */\n\tgetTotalSize () {\n\t\treturn this.totalSize;\n\t}\n\n\t/**\n\t * Clear all versions\n\t * @returns {number} Number of versions cleared\n\t */\n\tclear () {\n\t\tconst count = this.versions.length;\n\t\tthis.versions = [];\n\t\tthis.totalSize = 0;\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Remove versions older than specified age\n\t * @param {number} maxAge - Maximum age in milliseconds\n\t * @returns {number} Number of versions removed\n\t */\n\tremoveOlderThan (maxAge) {\n\t\tconst oldCount = this.versions.length;\n\t\tconst cutoffTime = Date.now() - maxAge;\n\n\t\tthis.versions = this.versions.filter(version => {\n\t\t\tconst keep = version.timestamp.getTime() >= cutoffTime;\n\t\t\tif (!keep) {\n\t\t\t\tthis.totalSize -= version.size;\n\t\t\t}\n\n\t\t\treturn keep;\n\t\t});\n\n\t\treturn oldCount - this.versions.length;\n\t}\n\n\t/**\n\t * Apply retention policy to limit versions\n\t * @private\n\t */\n\t_applyRetentionPolicy () {\n\t\tif (!this.policy || this.policy.type === RetentionPolicies.NONE) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet removed = 0;\n\n\t\tswitch (this.policy.type) {\n\t\t\tcase RetentionPolicies.COUNT:\n\t\t\t\tremoved = this._applyCountPolicy();\n\t\t\t\tbreak;\n\t\t\tcase RetentionPolicies.TIME:\n\t\t\t\tremoved = this._applyTimePolicy();\n\t\t\t\tbreak;\n\t\t\tcase RetentionPolicies.SIZE:\n\t\t\t\tremoved = this._applySizePolicy();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tremoved = 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Apply count-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applyCountPolicy () {\n\t\tconst maxCount = this.policy.maxCount || 10;\n\t\tif (this.versions.length <= maxCount) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst removeCount = this.versions.length - maxCount;\n\t\tconst removed = this.versions.splice(0, removeCount);\n\n\t\tfor (const version of removed) {\n\t\t\tthis.totalSize -= version.size;\n\t\t}\n\n\t\treturn removed.length;\n\t}\n\n\t/**\n\t * Apply time-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applyTimePolicy () {\n\t\tconst maxAge = this.policy.maxAge || 30 * 24 * 60 * 60 * 1000; // 30 days default\n\n\t\treturn this.removeOlderThan(maxAge);\n\t}\n\n\t/**\n\t * Apply size-based retention policy\n\t * @returns {number} Number of versions removed\n\t * @private\n\t */\n\t_applySizePolicy () {\n\t\tconst maxSize = this.policy.maxSize || 10 * 1024 * 1024; // 10MB default\n\t\tif (this.totalSize <= maxSize) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet removed = 0;\n\t\twhile (this.totalSize > maxSize && this.versions.length > 1) {\n\t\t\tconst version = this.versions.shift();\n\t\t\tthis.totalSize -= version.size;\n\t\t\tremoved++;\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t/**\n\t * Get statistics for this version history\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\trecordKey: this.recordKey,\n\t\t\tversionCount: this.versions.length,\n\t\t\ttotalSize: this.totalSize,\n\t\t\taverageSize: this.versions.length > 0 ? this.totalSize / this.versions.length : 0,\n\t\t\toldestVersion: this.versions.length > 0 ? this.versions[0].timestamp : null,\n\t\t\tnewestVersion: this.versions.length > 0 ? this.versions[this.versions.length - 1].timestamp : null,\n\t\t\tcreatedAt: this.createdAt,\n\t\t\tlastAccessed: this.lastAccessed,\n\t\t\tpolicy: this.policy\n\t\t};\n\t}\n}\n\n/**\n * Version manager for handling versioning across all records\n */\nexport class VersionManager {\n\t/**\n\t * @param {Object} [globalPolicy={}] - Global retention policy\n\t */\n\tconstructor (globalPolicy = {}) {\n\t\tthis.globalPolicy = this._validatePolicy(globalPolicy);\n\t\t// Map<recordKey, VersionHistory>\n\t\tthis.histories = new Map();\n\t\tthis.stats = {\n\t\t\ttotalHistories: 0,\n\t\t\ttotalVersions: 0,\n\t\t\ttotalSize: 0,\n\t\t\tlastCleanup: new Date(),\n\t\t\tcleanupCount: 0\n\t\t};\n\t}\n\n\t/**\n\t * Enable versioning for a record\n\t * @param {string} recordKey - Record key\n\t * @param {Object} [policy] - Custom retention policy for this record\n\t * @returns {VersionHistory} Created version history\n\t */\n\tenableVersioning (recordKey, policy) {\n\t\tif (this.histories.has(recordKey)) {\n\t\t\treturn this.histories.get(recordKey);\n\t\t}\n\n\t\tconst effectivePolicy = policy || this.globalPolicy;\n\t\tconst history = new VersionHistory(recordKey, effectivePolicy);\n\t\tthis.histories.set(recordKey, history);\n\t\tthis.stats.totalHistories++;\n\n\t\treturn history;\n\t}\n\n\t/**\n\t * Disable versioning for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if versioning was disabled\n\t */\n\tdisableVersioning (recordKey) {\n\t\tconst history = this.histories.get(recordKey);\n\t\tif (!history) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.stats.totalVersions -= history.getCount();\n\t\tthis.stats.totalSize -= history.getTotalSize();\n\t\tthis.stats.totalHistories--;\n\n\t\treturn this.histories.delete(recordKey);\n\t}\n\n\t/**\n\t * Add a version for a record\n\t * @param {string} recordKey - Record key\n\t * @param {Object} data - Version data\n\t * @param {Object} [metadata={}] - Version metadata\n\t * @returns {VersionEntry} Created version entry\n\t * @throws {VersionError} If versioning is not enabled for record\n\t */\n\taddVersion (recordKey, data, metadata = {}) {\n\t\tlet history = this.histories.get(recordKey);\n\t\tif (!history) {\n\t\t\t// Auto-enable versioning with global policy\n\t\t\thistory = this.enableVersioning(recordKey);\n\t\t}\n\n\t\tconst oldCount = history.getCount();\n\t\tconst oldSize = history.getTotalSize();\n\n\t\tconst version = history.addVersion(data, metadata);\n\n\t\t// Update global stats\n\t\tthis.stats.totalVersions += history.getCount() - oldCount;\n\t\tthis.stats.totalSize += history.getTotalSize() - oldSize;\n\n\t\treturn version;\n\t}\n\n\t/**\n\t * Get version history for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {VersionHistory|undefined} Version history\n\t */\n\tgetHistory (recordKey) {\n\t\treturn this.histories.get(recordKey);\n\t}\n\n\t/**\n\t * Get specific version of a record\n\t * @param {string} recordKey - Record key\n\t * @param {number} versionIndex - Version index\n\t * @returns {VersionEntry|undefined} Version entry\n\t */\n\tgetVersion (recordKey, versionIndex) {\n\t\tconst history = this.histories.get(recordKey);\n\n\t\treturn history ? history.getVersion(versionIndex) : undefined;\n\t}\n\n\t/**\n\t * Get latest version of a record\n\t * @param {string} recordKey - Record key\n\t * @returns {VersionEntry|undefined} Latest version\n\t */\n\tgetLatestVersion (recordKey) {\n\t\tconst history = this.histories.get(recordKey);\n\n\t\treturn history ? history.getLatest() : undefined;\n\t}\n\n\t/**\n\t * Check if versioning is enabled for a record\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if versioning is enabled\n\t */\n\tisVersioningEnabled (recordKey) {\n\t\treturn this.histories.has(recordKey);\n\t}\n\n\t/**\n\t * Clean up versions based on retention policies\n\t * @param {Object} [options={}] - Cleanup options\n\t * @param {boolean} [options.force=false] - Force cleanup even if not needed\n\t * @param {string[]} [options.recordKeys] - Specific records to clean up\n\t * @returns {Object} Cleanup results\n\t */\n\tcleanup (options = {}) {\n\t\tconst { recordKeys } = options;\n\t\tconst results = {\n\t\t\thistoriesProcessed: 0,\n\t\t\tversionsRemoved: 0,\n\t\t\tsizeFreed: 0,\n\t\t\tstartTime: new Date()\n\t\t};\n\n\t\tconst keysToProcess = recordKeys || Array.from(this.histories.keys());\n\n\t\tfor (const recordKey of keysToProcess) {\n\t\t\tconst history = this.histories.get(recordKey);\n\t\t\tif (history) {\n\t\t\t\tconst oldCount = history.getCount();\n\t\t\t\tconst oldSize = history.getTotalSize();\n\n\t\t\t\t// Apply retention policy\n\t\t\t\thistory._applyRetentionPolicy();\n\n\t\t\t\tconst newCount = history.getCount();\n\t\t\t\tconst newSize = history.getTotalSize();\n\n\t\t\t\tresults.historiesProcessed++;\n\t\t\t\tresults.versionsRemoved += oldCount - newCount;\n\t\t\t\tresults.sizeFreed += oldSize - newSize;\n\n\t\t\t\t// Remove empty histories\n\t\t\t\tif (newCount === 0) {\n\t\t\t\t\tthis.histories.delete(recordKey);\n\t\t\t\t\tthis.stats.totalHistories--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update global stats\n\t\tthis.stats.totalVersions -= results.versionsRemoved;\n\t\tthis.stats.totalSize -= results.sizeFreed;\n\t\tthis.stats.lastCleanup = new Date();\n\t\tthis.stats.cleanupCount++;\n\n\t\tresults.endTime = new Date();\n\t\tresults.duration = results.endTime.getTime() - results.startTime.getTime();\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Set global retention policy\n\t * @param {Object} policy - Retention policy\n\t * @returns {VersionManager} This instance for chaining\n\t */\n\tsetGlobalPolicy (policy) {\n\t\tthis.globalPolicy = this._validatePolicy(policy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\t// Recalculate stats from histories\n\t\tlet totalVersions = 0;\n\t\tlet totalSize = 0;\n\t\tconst historyStats = [];\n\n\t\tfor (const history of this.histories.values()) {\n\t\t\tconst stats = history.getStats();\n\t\t\thistoryStats.push(stats);\n\t\t\ttotalVersions += stats.versionCount;\n\t\t\ttotalSize += stats.totalSize;\n\t\t}\n\n\t\treturn {\n\t\t\t...this.stats,\n\t\t\ttotalHistories: this.histories.size,\n\t\t\ttotalVersions,\n\t\t\ttotalSize,\n\t\t\taverageVersionsPerRecord: this.histories.size > 0 ? totalVersions / this.histories.size : 0,\n\t\t\taverageSizePerRecord: this.histories.size > 0 ? totalSize / this.histories.size : 0,\n\t\t\tglobalPolicy: this.globalPolicy,\n\t\t\thistories: historyStats\n\t\t};\n\t}\n\n\t/**\n\t * Export version data for backup\n\t * @param {string[]} [recordKeys] - Specific records to export\n\t * @returns {Object} Exportable version data\n\t */\n\texport (recordKeys) {\n\t\tconst keysToExport = recordKeys || Array.from(this.histories.keys());\n\t\tconst exportData = {\n\t\t\tglobalPolicy: this.globalPolicy,\n\t\t\thistories: {},\n\t\t\texportedAt: new Date().toISOString()\n\t\t};\n\n\t\tfor (const recordKey of keysToExport) {\n\t\t\tconst history = this.histories.get(recordKey);\n\t\t\tif (history) {\n\t\t\t\texportData.histories[recordKey] = {\n\t\t\t\t\tpolicy: history.policy,\n\t\t\t\t\tversions: history.versions.map(v => v.toObject()),\n\t\t\t\t\tcreatedAt: history.createdAt.toISOString(),\n\t\t\t\t\tlastAccessed: history.lastAccessed.toISOString()\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn exportData;\n\t}\n\n\t/**\n\t * Import version data from backup\n\t * @param {Object} exportData - Exported version data\n\t * @param {Object} [options={}] - Import options\n\t * @param {boolean} [options.merge=false] - Whether to merge with existing data\n\t * @returns {Object} Import results\n\t */\n\timport (exportData, options = {}) {\n\t\tconst { merge = false } = options;\n\t\tconst results = {\n\t\t\thistoriesImported: 0,\n\t\t\tversionsImported: 0,\n\t\t\terrors: []\n\t\t};\n\n\t\tif (!merge) {\n\t\t\tthis.histories.clear();\n\t\t}\n\n\t\tif (exportData.globalPolicy) {\n\t\t\tthis.globalPolicy = this._validatePolicy(exportData.globalPolicy);\n\t\t}\n\n\t\tfor (const [recordKey, historyData] of Object.entries(exportData.histories)) {\n\t\t\ttry {\n\t\t\t\tconst history = new VersionHistory(recordKey, historyData.policy);\n\t\t\t\thistory.createdAt = new Date(historyData.createdAt);\n\t\t\t\thistory.lastAccessed = new Date(historyData.lastAccessed);\n\n\t\t\t\tfor (const versionData of historyData.versions) {\n\t\t\t\t\tconst version = new VersionEntry(versionData.data, versionData.metadata);\n\t\t\t\t\t// Restore original timestamp\n\t\t\t\t\tObject.defineProperty(version, \"timestamp\", {\n\t\t\t\t\t\tvalue: new Date(versionData.timestamp),\n\t\t\t\t\t\twritable: false\n\t\t\t\t\t});\n\t\t\t\t\thistory.versions.push(version);\n\t\t\t\t\thistory.totalSize += version.size;\n\t\t\t\t\tresults.versionsImported++;\n\t\t\t\t}\n\n\t\t\t\tthis.histories.set(recordKey, history);\n\t\t\t\tresults.historiesImported++;\n\t\t\t} catch (error) {\n\t\t\t\tresults.errors.push({\n\t\t\t\t\trecordKey,\n\t\t\t\t\terror: error.message\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Update stats\n\t\tthis._updateStats();\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Clear all version data\n\t * @returns {Object} Clear results\n\t */\n\tclear () {\n\t\tconst results = {\n\t\t\thistoriesCleared: this.histories.size,\n\t\t\tversionsCleared: this.stats.totalVersions,\n\t\t\tsizeFreed: this.stats.totalSize\n\t\t};\n\n\t\tthis.histories.clear();\n\t\tthis.stats = {\n\t\t\ttotalHistories: 0,\n\t\t\ttotalVersions: 0,\n\t\t\ttotalSize: 0,\n\t\t\tlastCleanup: new Date(),\n\t\t\tcleanupCount: this.stats.cleanupCount\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Validate retention policy\n\t * @param {Object} policy - Policy to validate\n\t * @returns {Object} Validated policy\n\t * @throws {ConfigurationError} If policy is invalid\n\t * @private\n\t */\n\t_validatePolicy (policy) {\n\t\tif (!policy || typeof policy !== \"object\") {\n\t\t\treturn { type: RetentionPolicies.NONE };\n\t\t}\n\n\t\tconst validTypes = Object.values(RetentionPolicies);\n\t\tif (policy.type && !validTypes.includes(policy.type)) {\n\t\t\tthrow new ConfigurationError(`Invalid retention policy type: ${policy.type}`, \"retentionPolicy.type\", policy.type);\n\t\t}\n\n\t\tconst validated = { ...policy };\n\n\t\tif (validated.type === RetentionPolicies.COUNT && validated.maxCount !== undefined) {\n\t\t\tif (typeof validated.maxCount !== \"number\" || validated.maxCount < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxCount must be a positive number\", \"retentionPolicy.maxCount\", validated.maxCount);\n\t\t\t}\n\t\t}\n\n\t\tif (validated.type === RetentionPolicies.TIME && validated.maxAge !== undefined) {\n\t\t\tif (typeof validated.maxAge !== \"number\" || validated.maxAge < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxAge must be a positive number\", \"retentionPolicy.maxAge\", validated.maxAge);\n\t\t\t}\n\t\t}\n\n\t\tif (validated.type === RetentionPolicies.SIZE && validated.maxSize !== undefined) {\n\t\t\tif (typeof validated.maxSize !== \"number\" || validated.maxSize < 1) {\n\t\t\t\tthrow new ConfigurationError(\"maxSize must be a positive number\", \"retentionPolicy.maxSize\", validated.maxSize);\n\t\t\t}\n\t\t}\n\n\t\treturn validated;\n\t}\n\n\t/**\n\t * Update global statistics\n\t * @private\n\t */\n\t_updateStats () {\n\t\tlet totalVersions = 0;\n\t\tlet totalSize = 0;\n\n\t\tfor (const history of this.histories.values()) {\n\t\t\ttotalVersions += history.getCount();\n\t\t\ttotalSize += history.getTotalSize();\n\t\t}\n\n\t\tthis.stats.totalHistories = this.histories.size;\n\t\tthis.stats.totalVersions = totalVersions;\n\t\tthis.stats.totalSize = totalSize;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { OperationTypes } from \"./constants.js\";\nimport { randomUUID as uuid } from \"crypto\";\n\n/**\n * Transaction operation entry\n */\nexport class TransactionOperation {\n\t/**\n\t * @param {string} type - Operation type\n\t * @param {string} key - Record key\n\t * @param {*} [oldValue] - Previous value (for rollback)\n\t * @param {*} [newValue] - New value\n\t * @param {Object} [metadata={}] - Additional metadata\n\t */\n\tconstructor (type, key, oldValue, newValue, metadata = {}) {\n\t\tthis.id = uuid();\n\t\tthis.type = type;\n\t\tthis.key = key;\n\t\tthis.oldValue = oldValue;\n\t\tthis.newValue = newValue;\n\t\tthis.metadata = metadata;\n\t\tthis.timestamp = new Date();\n\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Create rollback operation\n\t * @returns {TransactionOperation} Rollback operation\n\t */\n\tcreateRollback () {\n\t\tswitch (this.type) {\n\t\t\tcase OperationTypes.SET:\n\t\t\t\treturn this.oldValue === undefined ?\n\t\t\t\t\tnew TransactionOperation(OperationTypes.DELETE, this.key, this.newValue, undefined) :\n\t\t\t\t\tnew TransactionOperation(OperationTypes.SET, this.key, this.newValue, this.oldValue);\n\n\t\t\tcase OperationTypes.DELETE:\n\t\t\t\treturn new TransactionOperation(OperationTypes.SET, this.key, undefined, this.oldValue);\n\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(`Cannot create rollback for operation type: ${this.type}`, null, \"rollback\");\n\t\t}\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { TransactionStates, IsolationLevels } from \"./constants.js\";\nimport { TransactionOperation } from \"./transaction-operation.js\";\nimport { randomUUID as uuid } from \"crypto\";\n\n/**\n * Transaction implementation with ACID properties\n */\nexport class Transaction {\n\t/**\n\t * @param {string} [id] - Transaction ID (auto-generated if not provided)\n\t * @param {Object} [options={}] - Transaction options\n\t * @param {number} [options.isolationLevel=IsolationLevels.READ_COMMITTED] - Isolation level\n\t * @param {number} [options.timeout=60000] - Transaction timeout in milliseconds\n\t * @param {boolean} [options.readOnly=false] - Whether transaction is read-only\n\t */\n\tconstructor (id = uuid(), options = {}) {\n\t\tthis.id = id;\n\t\tthis.state = TransactionStates.PENDING;\n\t\tthis.isolationLevel = options.isolationLevel || IsolationLevels.READ_COMMITTED;\n\t\tthis.timeout = options.timeout || 60000;\n\t\tthis.readOnly = options.readOnly || false;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\n\t\t// Operation log for rollback\n\t\tthis.operations = [];\n\n\t\t// Read set for isolation (record keys read during transaction)\n\t\tthis.readSet = new Set();\n\n\t\t// Write set for isolation (record keys written during transaction)\n\t\tthis.writeSet = new Set();\n\n\t\t// Snapshot for repeatable read isolation\n\t\tthis.snapshot = new Map();\n\n\t\t// Validation callback for custom constraints\n\t\tthis.validationCallback = null;\n\n\t\t// Abort reason (set when transaction is aborted)\n\t\tthis.abortReason = null;\n\n\t\tObject.seal(this);\n\t}\n\n\t/**\n\t * Begin the transaction\n\t * @returns {Transaction} This transaction for chaining\n\t * @throws {TransactionError} If transaction is already active\n\t */\n\tbegin () {\n\t\tif (this.state !== TransactionStates.PENDING) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t`Cannot begin transaction in state: ${this.state}`,\n\t\t\t\tthis.id,\n\t\t\t\t\"begin\"\n\t\t\t);\n\t\t}\n\n\t\tthis.state = TransactionStates.ACTIVE;\n\t\tthis.startTime = new Date();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an operation to the transaction log\n\t * @param {string} type - Operation type\n\t * @param {string} key - Record key\n\t * @param {*} [oldValue] - Previous value\n\t * @param {*} [newValue] - New value\n\t * @param {Object} [metadata={}] - Additional metadata\n\t * @returns {TransactionOperation} Created operation\n\t * @throws {TransactionError} If transaction is not active or is read-only\n\t */\n\taddOperation (type, key, oldValue, newValue, metadata = {}) {\n\t\tthis._checkActive();\n\n\t\tif (this.readOnly && type !== \"read\") {\n\t\t\tthrow new TransactionError(\n\t\t\t\t\"Cannot perform write operations in read-only transaction\",\n\t\t\t\tthis.id,\n\t\t\t\t\"write\"\n\t\t\t);\n\t\t}\n\n\t\t// Check timeout\n\t\tif (this._isTimedOut()) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t\"Transaction has timed out\",\n\t\t\t\tthis.id,\n\t\t\t\t\"timeout\"\n\t\t\t);\n\t\t}\n\n\t\tconst operation = new TransactionOperation(type, key, oldValue, newValue, metadata);\n\t\tthis.operations.push(operation);\n\n\t\t// Track read and write sets\n\t\tif (type === \"read\") {\n\t\t\tthis.readSet.add(key);\n\t\t} else {\n\t\t\tthis.writeSet.add(key);\n\t\t}\n\n\t\treturn operation;\n\t}\n\n\t/**\n\t * Set validation callback for custom constraints\n\t * @param {Function} callback - Validation function\n\t * @returns {Transaction} This transaction for chaining\n\t */\n\tsetValidation (callback) {\n\t\tthis.validationCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Validate transaction before commit\n\t * @param {Object} [context] - Validation context\n\t * @returns {boolean} True if validation passes\n\t * @throws {TransactionError} If validation fails\n\t */\n\tvalidate (context = {}) {\n\t\tif (this.validationCallback) {\n\t\t\tconst result = this.validationCallback(this, context);\n\t\t\tif (result !== true) {\n\t\t\t\tconst message = typeof result === \"string\" ? result : \"Transaction validation failed\";\n\t\t\t\tthrow new TransactionError(message, this.id, \"validation\");\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Commit the transaction\n\t * @param {Object} [context] - Commit context\n\t * @returns {Transaction} This transaction for chaining\n\t * @throws {TransactionError} If commit fails\n\t */\n\tcommit (context = {}) {\n\t\tthis._checkActive();\n\n\t\ttry {\n\t\t\t// Validate before commit\n\t\t\tthis.validate(context);\n\n\t\t\tthis.state = TransactionStates.COMMITTED;\n\t\t\tthis.endTime = new Date();\n\n\t\t\treturn this;\n\t\t} catch (error) {\n\t\t\t// Auto-abort on commit failure\n\t\t\tthis.abort();\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Abort the transaction\n\t * @param {string} [reason] - Reason for abort\n\t * @returns {Transaction} This transaction for chaining\n\t */\n\tabort (reason = \"User abort\") {\n\t\tif (this.state === TransactionStates.ABORTED || this.state === TransactionStates.COMMITTED) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.state = TransactionStates.ABORTED;\n\t\tthis.endTime = new Date();\n\t\tthis.abortReason = reason;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get rollback operations (in reverse order)\n\t * @returns {TransactionOperation[]} Array of rollback operations\n\t */\n\tgetRollbackOperations () {\n\t\treturn this.operations\n\t\t\t.slice()\n\t\t\t.reverse()\n\t\t\t.filter(op => op.type !== \"read\") // Filter out read operations\n\t\t\t.map(op => op.createRollback())\n\t\t\t.filter(op => op !== null);\n\t}\n\n\t/**\n\t * Check if transaction is active\n\t * @returns {boolean} True if transaction is active\n\t */\n\tisActive () {\n\t\treturn this.state === TransactionStates.ACTIVE;\n\t}\n\n\t/**\n\t * Check if transaction is committed\n\t * @returns {boolean} True if transaction is committed\n\t */\n\tisCommitted () {\n\t\treturn this.state === TransactionStates.COMMITTED;\n\t}\n\n\t/**\n\t * Check if transaction is aborted\n\t * @returns {boolean} True if transaction is aborted\n\t */\n\tisAborted () {\n\t\treturn this.state === TransactionStates.ABORTED;\n\t}\n\n\t/**\n\t * Get transaction duration\n\t * @returns {number|null} Duration in milliseconds, null if not completed\n\t */\n\tgetDuration () {\n\t\tif (!this.startTime) return null;\n\t\tconst endTime = this.endTime || new Date();\n\n\t\treturn endTime.getTime() - this.startTime.getTime();\n\t}\n\n\t/**\n\t * Get transaction statistics\n\t * @returns {Object} Transaction statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\tstate: this.state,\n\t\t\tisolationLevel: this.isolationLevel,\n\t\t\treadOnly: this.readOnly,\n\t\t\tstartTime: this.startTime,\n\t\t\tendTime: this.endTime,\n\t\t\tduration: this.getDuration(),\n\t\t\toperationCount: this.operations.length,\n\t\t\treadSetSize: this.readSet.size,\n\t\t\twriteSetSize: this.writeSet.size,\n\t\t\tsnapshotSize: this.snapshot.size,\n\t\t\tabortReason: this.abortReason,\n\t\t\ttimedOut: this._isTimedOut()\n\t\t};\n\t}\n\n\t/**\n\t * Export transaction for debugging/logging\n\t * @returns {Object} Exportable transaction data\n\t */\n\texport () {\n\t\treturn {\n\t\t\t...this.getStats(),\n\t\t\toperations: this.operations.map(op => ({\n\t\t\t\tid: op.id,\n\t\t\t\ttype: op.type,\n\t\t\t\tkey: op.key,\n\t\t\t\ttimestamp: op.timestamp,\n\t\t\t\tmetadata: op.metadata\n\t\t\t})),\n\t\t\treadSet: Array.from(this.readSet),\n\t\t\twriteSet: Array.from(this.writeSet)\n\t\t};\n\t}\n\n\t/**\n\t * Check if transaction is active and throw if not\n\t * @throws {TransactionError} If transaction is not active\n\t * @private\n\t */\n\t_checkActive () {\n\t\tif (this.state !== TransactionStates.ACTIVE) {\n\t\t\tthrow new TransactionError(\n\t\t\t\t`Transaction is not active (current state: ${this.state})`,\n\t\t\t\tthis.id,\n\t\t\t\t\"state\"\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Check if transaction has timed out\n\t * @returns {boolean} True if timed out\n\t * @private\n\t */\n\t_isTimedOut () {\n\t\tif (!this.startTime) return false;\n\n\t\treturn Date.now() - this.startTime.getTime() > this.timeout;\n\t}\n}\n","import { ConcurrencyError } from \"./errors.js\";\nimport { LockTypes } from \"./constants.js\";\n\n/**\n * Lock manager for controlling concurrent access\n */\nexport class LockManager {\n\tconstructor () {\n\t\t// Map<recordKey, {type: string, holders: Set<transactionId>, waiters: Array}>\n\t\tthis.locks = new Map();\n\t\tthis.lockTimeout = 30000; // 30 seconds default\n\t}\n\n\t/**\n\t * Acquire a lock on a record\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key to lock\n\t * @param {string} lockType - Type of lock (shared/exclusive)\n\t * @param {number} [timeout] - Lock timeout in milliseconds\n\t * @returns {Promise<boolean>} True if lock acquired\n\t * @throws {ConcurrencyError} If lock cannot be acquired\n\t */\n\tasync acquireLock (transactionId, recordKey, lockType, timeout = this.lockTimeout) {\n\t\tconst startTime = Date.now();\n\n\t\twhile (Date.now() - startTime < timeout) {\n\t\t\tif (this._tryAcquireLock(transactionId, recordKey, lockType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Wait a bit before retrying\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 10));\n\t\t}\n\n\t\tthrow new ConcurrencyError(\n\t\t\t`Failed to acquire ${lockType} lock on record '${recordKey}' within timeout`,\n\t\t\trecordKey,\n\t\t\t\"lock\"\n\t\t);\n\t}\n\n\t/**\n\t * Try to acquire lock immediately\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key\n\t * @param {string} lockType - Lock type\n\t * @returns {boolean} True if lock acquired\n\t * @private\n\t */\n\t_tryAcquireLock (transactionId, recordKey, lockType) {\n\t\tconst existingLock = this.locks.get(recordKey);\n\n\t\tif (!existingLock) {\n\t\t\t// No existing lock, create new one\n\t\t\tthis.locks.set(recordKey, {\n\t\t\t\ttype: lockType,\n\t\t\t\tholders: new Set([transactionId]),\n\t\t\t\twaiters: []\n\t\t\t});\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if already holding the lock\n\t\tif (existingLock.holders.has(transactionId)) {\n\t\t\t// Check for lock upgrade\n\t\t\tif (existingLock.type === LockTypes.SHARED && lockType === LockTypes.EXCLUSIVE) {\n\t\t\t\t// Can upgrade if we're the only holder\n\t\t\t\tif (existingLock.holders.size === 1) {\n\t\t\t\t\texistingLock.type = LockTypes.EXCLUSIVE;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false; // Cannot upgrade with other holders\n\t\t\t}\n\n\t\t\treturn true; // Already have compatible lock\n\t\t}\n\n\t\t// Check compatibility\n\t\tif (lockType === LockTypes.SHARED && existingLock.type === LockTypes.SHARED) {\n\t\t\t// Shared locks are compatible\n\t\t\texistingLock.holders.add(transactionId);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Exclusive locks or mixed locks are not compatible\n\t\treturn false;\n\t}\n\n\t/**\n\t * Release a lock\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} recordKey - Record key\n\t * @returns {boolean} True if lock was released\n\t */\n\treleaseLock (transactionId, recordKey) {\n\t\tconst lock = this.locks.get(recordKey);\n\t\tif (!lock || !lock.holders.has(transactionId)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlock.holders.delete(transactionId);\n\n\t\t// If no more holders, remove the lock\n\t\tif (lock.holders.size === 0) {\n\t\t\tthis.locks.delete(recordKey);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Release all locks held by a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {number} Number of locks released\n\t */\n\treleaseAllLocks (transactionId) {\n\t\tlet released = 0;\n\n\t\tfor (const [recordKey, lock] of this.locks) {\n\t\t\tif (lock.holders.has(transactionId)) {\n\t\t\t\tlock.holders.delete(transactionId);\n\t\t\t\treleased++;\n\n\t\t\t\t// If no more holders, remove the lock\n\t\t\t\tif (lock.holders.size === 0) {\n\t\t\t\t\tthis.locks.delete(recordKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn released;\n\t}\n\n\t/**\n\t * Check if transaction holds any locks\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {boolean} True if transaction holds locks\n\t */\n\tholdsLocks (transactionId) {\n\t\tfor (const lock of this.locks.values()) {\n\t\t\tif (lock.holders.has(transactionId)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get lock statistics\n\t * @returns {Object} Lock statistics\n\t */\n\tgetStats () {\n\t\tconst stats = {\n\t\t\ttotalLocks: this.locks.size,\n\t\t\tsharedLocks: 0,\n\t\t\texclusiveLocks: 0,\n\t\t\tlockHolders: new Set(),\n\t\t\trecordsLocked: []\n\t\t};\n\n\t\tfor (const [recordKey, lock] of this.locks) {\n\t\t\tif (lock.type === LockTypes.SHARED) {\n\t\t\t\tstats.sharedLocks++;\n\t\t\t} else {\n\t\t\t\tstats.exclusiveLocks++;\n\t\t\t}\n\n\t\t\tfor (const holder of lock.holders) {\n\t\t\t\tstats.lockHolders.add(holder);\n\t\t\t}\n\n\t\t\tstats.recordsLocked.push({\n\t\t\t\trecordKey,\n\t\t\t\ttype: lock.type,\n\t\t\t\tholders: Array.from(lock.holders)\n\t\t\t});\n\t\t}\n\n\t\tstats.uniqueHolders = stats.lockHolders.size;\n\n\t\treturn stats;\n\t}\n}\n","/**\n * Transaction statistics manager for tracking metrics and performance\n */\nexport class TransactionStatistics {\n\tconstructor () {\n\t\tthis.stats = {\n\t\t\ttotalTransactions: 0,\n\t\t\tcommittedTransactions: 0,\n\t\t\tabortedTransactions: 0,\n\t\t\tactiveTransactions: 0,\n\t\t\taverageDuration: 0,\n\t\t\ttotalDuration: 0\n\t\t};\n\t}\n\n\t/**\n\t * Increment total transaction count\n\t */\n\tincrementTotal () {\n\t\tthis.stats.totalTransactions++;\n\t}\n\n\t/**\n\t * Increment committed transaction count\n\t */\n\tincrementCommitted () {\n\t\tthis.stats.committedTransactions++;\n\t}\n\n\t/**\n\t * Increment aborted transaction count\n\t */\n\tincrementAborted () {\n\t\tthis.stats.abortedTransactions++;\n\t}\n\n\t/**\n\t * Increment active transaction count\n\t */\n\tincrementActive () {\n\t\tthis.stats.activeTransactions++;\n\t}\n\n\t/**\n\t * Decrement active transaction count\n\t */\n\tdecrementActive () {\n\t\tthis.stats.activeTransactions--;\n\t}\n\n\t/**\n\t * Update duration statistics based on completed transaction\n\t * @param {Transaction} transaction - Completed transaction\n\t */\n\tupdateDurationStats (transaction) {\n\t\tconst duration = transaction.getDuration();\n\t\tif (duration !== null) {\n\t\t\tthis.stats.totalDuration += duration;\n\t\t\tconst completedTransactions = this.stats.committedTransactions + this.stats.abortedTransactions;\n\t\t\tthis.stats.averageDuration = this.stats.totalDuration / completedTransactions;\n\t\t}\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @param {Object} lockStats - Lock manager statistics\n\t * @param {number} activeCount - Current active transaction count\n\t * @param {number} transactionCounter - Global transaction counter\n\t * @returns {Object} Complete statistics object\n\t */\n\tgetStats (lockStats, activeCount, transactionCounter) {\n\t\treturn {\n\t\t\t...this.stats,\n\t\t\tactiveTransactions: activeCount,\n\t\t\tlockStats,\n\t\t\ttransactionCounter\n\t\t};\n\t}\n\n\t/**\n\t * Reset all statistics to zero\n\t */\n\treset () {\n\t\tthis.stats = {\n\t\t\ttotalTransactions: 0,\n\t\t\tcommittedTransactions: 0,\n\t\t\tabortedTransactions: 0,\n\t\t\tactiveTransactions: 0,\n\t\t\taverageDuration: 0,\n\t\t\ttotalDuration: 0\n\t\t};\n\t}\n\n\t/**\n\t * Get raw statistics object (for internal use)\n\t * @returns {Object} Raw stats object\n\t */\n\tgetRawStats () {\n\t\treturn { ...this.stats };\n\t}\n}\n","/**\n * Analyzer for detecting relationships between transaction keys\n * Handles hierarchical, semantic, pattern, temporal, and functional relationships\n */\nexport class KeyRelationshipAnalyzer {\n\t/**\n\t * Creates a new KeyRelationshipAnalyzer instance\n\t * Initializes caches for pattern and semantic analysis\n\t */\n\tconstructor () {\n\t\t// Pattern cache for performance\n\t\tthis.patternCache = new Map();\n\t\tthis.semanticCache = new Map();\n\t}\n\n\t/**\n\t * Check if two keys are related through various relationship types\n\t * @param {string} key1 - First key\n\t * @param {string} key2 - Second key\n\t * @returns {boolean} True if keys are related\n\t */\n\tareKeysRelated (key1, key2) {\n\t\t// Direct match - always related\n\t\tif (key1 === key2) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for hierarchical relationships\n\t\tif (this._hasHierarchicalKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for semantic relationships\n\t\tif (this._hasSemanticKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for pattern-based relationships\n\t\tif (this._hasPatternBasedKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for composite key relationships\n\t\tif (this._hasCompositeKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for temporal relationships\n\t\tif (this._hasTemporalKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for index-based relationships\n\t\tif (this._hasIndexKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for collection relationships\n\t\tif (this._hasCollectionKeyRelationship(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for functional dependencies\n\t\tif (this._hasFunctionalDependency(key1, key2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key falls within the range that could affect a snapshot\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {string} operationKey - Key from other transaction's operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key could affect snapshot\n\t */\n\tisKeyInSnapshotRange (transaction, operationKey, snapshotKey, expectedValue) {\n\t\t// Direct key match - always affects snapshot\n\t\tif (operationKey === snapshotKey) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for explicit range metadata stored with the snapshot\n\t\tif (this._hasExplicitRangeMetadata(transaction, snapshotKey)) {\n\t\t\treturn this._checkExplicitRange(transaction, operationKey, snapshotKey);\n\t\t}\n\n\t\t// Infer range from snapshot key patterns\n\t\tif (this._isPatternBasedSnapshot(snapshotKey)) {\n\t\t\treturn this._checkPatternBasedRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for hierarchical key relationships\n\t\tif (this._hasHierarchicalRelationship(operationKey, snapshotKey)) {\n\t\t\treturn this._checkHierarchicalRange(operationKey, snapshotKey, expectedValue);\n\t\t}\n\n\t\t// Check for index-based range queries\n\t\tif (this._isIndexBasedSnapshot(transaction, snapshotKey)) {\n\t\t\treturn this._checkIndexBasedRange(transaction, operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for semantic key relationships\n\t\tif (this._hasSemanticRelationship(operationKey, snapshotKey)) {\n\t\t\treturn this._checkSemanticRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for temporal range relationships\n\t\tif (this._isTemporalSnapshot(snapshotKey)) {\n\t\t\treturn this._checkTemporalRange(operationKey, snapshotKey);\n\t\t}\n\n\t\t// Check for composite key range relationships\n\t\tif (this._isCompositeKeySnapshot(snapshotKey)) {\n\t\t\treturn this._checkCompositeKeyRange(operationKey, snapshotKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key matches a range specification\n\t * @param {string} key - Key to check\n\t * @param {Object} range - Range specification\n\t * @returns {boolean} True if key is in range\n\t */\n\tkeyMatchesRange (key, range) {\n\t\tif (range.min !== undefined && range.max !== undefined) {\n\t\t\treturn key >= range.min && key <= range.max;\n\t\t}\n\n\t\tif (range.prefix !== undefined) {\n\t\t\treturn key.startsWith(range.prefix);\n\t\t}\n\n\t\tif (range.pattern !== undefined) {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(range.pattern);\n\n\t\t\t\treturn regex.test(key);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if key matches a query specification\n\t * @param {string} key - Key to check\n\t * @param {Object} queryInfo - Query specification\n\t * @returns {boolean} True if key matches query\n\t */\n\tkeyMatchesQuery (key, queryInfo) {\n\t\tif (queryInfo.type === \"range\") {\n\t\t\treturn this.keyMatchesRange(key, queryInfo);\n\t\t}\n\n\t\tif (queryInfo.type === \"prefix\") {\n\t\t\treturn key.startsWith(queryInfo.prefix || \"\");\n\t\t}\n\n\t\tif (queryInfo.type === \"pattern\") {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(queryInfo.pattern || \"\");\n\n\t\t\t\treturn regex.test(key);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (queryInfo.type === \"in\") {\n\t\t\treturn Array.isArray(queryInfo.values) && queryInfo.values.includes(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if key matches an index range\n\t * @param {string} key - Key to check\n\t * @param {Object} indexRange - Index range specification\n\t * @returns {boolean} True if key matches index range\n\t */\n\tkeyMatchesIndexRange (key, indexRange) {\n\t\tif (indexRange.fields && Array.isArray(indexRange.fields)) {\n\t\t\tfor (const field of indexRange.fields) {\n\t\t\t\tif (key.includes(field)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (indexRange.values) {\n\t\t\treturn this.keyMatchesRange(key, indexRange.values);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have a hierarchical relationship\n\t * Analyzes parent-child, sibling, and ancestor-descendant relationships\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have hierarchical relationship\n\t * @private\n\t */\n\t_hasHierarchicalKeyRelationship (key1, key2) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (key1.includes(sep) && key2.includes(sep)) {\n\t\t\t\tconst parts1 = key1.split(sep);\n\t\t\t\tconst parts2 = key2.split(sep);\n\n\t\t\t\tif (this._isParentChildRelationship(parts1, parts2) ||\n\t\t\t\t\tthis._isSiblingRelationship(parts1, parts2) ||\n\t\t\t\t\tthis._isAncestorDescendantRelationship(parts1, parts2)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn key1.startsWith(key2) || key2.startsWith(key1);\n\t}\n\n\t/**\n\t * Check if operation key and snapshot key have hierarchical relationship for snapshot range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if keys have hierarchical relationship\n\t * @private\n\t */\n\t_hasHierarchicalRelationship (operationKey, snapshotKey) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key falls within hierarchical range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key is in hierarchical range\n\t * @private\n\t */\n\t_checkHierarchicalRange (operationKey, snapshotKey, expectedValue) {\n\t\tconst separators = [\":\", \"/\", \".\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\tconst opParts = operationKey.split(sep);\n\t\t\t\tconst snapParts = snapshotKey.split(sep);\n\n\t\t\t\tif (this._isParentChildRelationship(opParts, snapParts) ||\n\t\t\t\t\tthis._isSiblingRelationship(opParts, snapParts) ||\n\t\t\t\t\tthis._isCollectionMembership(opParts, snapParts, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have a parent-child relationship\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if there's a parent-child relationship\n\t * @private\n\t */\n\t_isParentChildRelationship (opParts, snapParts) {\n\t\tif (opParts.length > snapParts.length) {\n\t\t\tfor (let i = 0; i < snapParts.length; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (snapParts.length > opParts.length) {\n\t\t\tfor (let i = 0; i < opParts.length; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have a sibling relationship\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if there's a sibling relationship\n\t * @private\n\t */\n\t_isSiblingRelationship (opParts, snapParts) {\n\t\tif (opParts.length === snapParts.length && opParts.length > 1) {\n\t\t\tfor (let i = 0; i < opParts.length - 1; i++) {\n\t\t\t\tif (opParts[i] !== snapParts[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn opParts[opParts.length - 1] !== snapParts[snapParts.length - 1];\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two key parts arrays have an ancestor-descendant relationship\n\t * @param {string[]} parts1 - Parts from first key\n\t * @param {string[]} parts2 - Parts from second key\n\t * @returns {boolean} True if there's an ancestor-descendant relationship\n\t * @private\n\t */\n\t_isAncestorDescendantRelationship (parts1, parts2) {\n\t\tconst shorter = parts1.length < parts2.length ? parts1 : parts2;\n\t\tconst longer = parts1.length < parts2.length ? parts2 : parts1;\n\n\t\tif (shorter.length < longer.length) {\n\t\t\tfor (let i = 0; i < shorter.length; i++) {\n\t\t\t\tif (shorter[i] !== longer[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key parts indicate collection membership relative to snapshot\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if operation key is collection member\n\t * @private\n\t */\n\t_isCollectionMembership (opParts, snapParts, expectedValue) {\n\t\tif (Array.isArray(expectedValue) ||\n\t\t\texpectedValue && typeof expectedValue === \"object\" && expectedValue.length !== undefined) {\n\t\t\treturn this._isParentChildRelationship(opParts, snapParts) ||\n\t\t\t\tthis._isSiblingRelationship(opParts, snapParts);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have semantic relationship based on their content meaning\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have semantic relationship\n\t * @private\n\t */\n\t_hasSemanticKeyRelationship (key1, key2) {\n\t\tconst semantics1 = this._extractSemanticIdentifiers(key1);\n\t\tconst semantics2 = this._extractSemanticIdentifiers(key2);\n\n\t\tfor (const sem1 of semantics1) {\n\t\t\tfor (const sem2 of semantics2) {\n\t\t\t\tif (this._areSemanticallySimilar(sem1, sem2)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._hasEntityRelationship(semantics1, semantics2);\n\t}\n\n\t/**\n\t * Check if operation key and snapshot key have semantic relationship for snapshot range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if keys have semantic relationship\n\t * @private\n\t */\n\t_hasSemanticRelationship (operationKey, snapshotKey) {\n\t\tconst semanticPrefixes = [\n\t\t\t\"user\", \"account\", \"profile\", \"session\",\n\t\t\t\"order\", \"product\", \"cart\", \"payment\",\n\t\t\t\"post\", \"comment\", \"thread\", \"message\",\n\t\t\t\"document\", \"file\", \"folder\", \"workspace\"\n\t\t];\n\n\t\tfor (const prefix of semanticPrefixes) {\n\t\t\tif (operationKey.toLowerCase().includes(prefix) &&\n\t\t\t\tsnapshotKey.toLowerCase().includes(prefix)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key falls within semantic range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot\n\t * @returns {boolean} True if operation key is in semantic range\n\t * @private\n\t */\n\t_checkSemanticRange (operationKey, snapshotKey) {\n\t\tconst opSemantics = this._extractSemanticIdentifiers(operationKey);\n\t\tconst snapSemantics = this._extractSemanticIdentifiers(snapshotKey);\n\n\t\tfor (const opSemantic of opSemantics) {\n\t\t\tfor (const snapSemantic of snapSemantics) {\n\t\t\t\tif (this._areSemanticallySimilar(opSemantic, snapSemantic)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Extract semantic identifiers from a key string using pattern matching\n\t * @param {string} key - Key to extract semantic identifiers from\n\t * @returns {string[]} Array of semantic identifiers found in the key\n\t * @private\n\t */\n\t_extractSemanticIdentifiers (key) {\n\t\tconst cacheKey = `semantic:${key}`;\n\t\tif (this.semanticCache.has(cacheKey)) {\n\t\t\treturn this.semanticCache.get(cacheKey);\n\t\t}\n\n\t\tconst identifiers = [];\n\t\tconst patterns = [\n\t\t\t/(\\w+):(\\w+)/g, // entity:id\n\t\t\t/(\\w+)_(\\w+)/g, // entity_id\n\t\t\t/([a-z]+)([A-Z]\\w+)/g // entityId (camelCase)\n\t\t];\n\n\t\tfor (const pattern of patterns) {\n\t\t\tlet match;\n\t\t\twhile ((match = pattern.exec(key)) !== null) {\n\t\t\t\tidentifiers.push(match[1].toLowerCase());\n\t\t\t\tif (match[2]) {\n\t\t\t\t\tidentifiers.push(match[2].toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.semanticCache.set(cacheKey, identifiers);\n\n\t\treturn identifiers;\n\t}\n\n\t/**\n\t * Check if two semantic identifiers are similar\n\t * Handles singular/plural forms and semantic equivalence\n\t * @param {string} id1 - First identifier\n\t * @param {string} id2 - Second identifier\n\t * @returns {boolean} True if identifiers are semantically similar\n\t * @private\n\t */\n\t_areSemanticallySimilar (id1, id2) {\n\t\tif (id1 === id2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst singularPlural = [\n\t\t\t[\"user\", \"users\"], [\"account\", \"accounts\"], [\"profile\", \"profiles\"],\n\t\t\t[\"order\", \"orders\"], [\"product\", \"products\"], [\"item\", \"items\"],\n\t\t\t[\"post\", \"posts\"], [\"comment\", \"comments\"], [\"message\", \"messages\"],\n\t\t\t[\"file\", \"files\"], [\"document\", \"documents\"], [\"folder\", \"folders\"]\n\t\t];\n\n\t\tfor (const [singular, plural] of singularPlural) {\n\t\t\tif (id1 === singular && id2 === plural ||\n\t\t\t\tid1 === plural && id2 === singular) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two semantic identifier arrays have entity relationships\n\t * @param {string[]} semantics1 - Semantic identifiers from first key\n\t * @param {string[]} semantics2 - Semantic identifiers from second key\n\t * @returns {boolean} True if entities have defined relationships\n\t * @private\n\t */\n\t_hasEntityRelationship (semantics1, semantics2) {\n\t\tconst entityRelations = [\n\t\t\t[\"user\", \"profile\"], [\"user\", \"account\"], [\"user\", \"session\"],\n\t\t\t[\"profile\", \"account\"], [\"account\", \"session\"],\n\t\t\t[\"user\", \"order\"], [\"user\", \"cart\"], [\"user\", \"payment\"],\n\t\t\t[\"order\", \"product\"], [\"order\", \"payment\"], [\"cart\", \"product\"],\n\t\t\t[\"user\", \"post\"], [\"user\", \"comment\"], [\"user\", \"message\"],\n\t\t\t[\"post\", \"comment\"], [\"thread\", \"message\"], [\"document\", \"file\"],\n\t\t\t[\"user\", \"workspace\"], [\"workspace\", \"document\"], [\"workspace\", \"folder\"],\n\t\t\t[\"folder\", \"file\"], [\"document\", \"file\"]\n\t\t];\n\n\t\tfor (const [entity1, entity2] of entityRelations) {\n\t\t\tconst hasEntity1InBoth = semantics1.includes(entity1) && semantics2.includes(entity2);\n\t\t\tconst hasEntity2InBoth = semantics1.includes(entity2) && semantics2.includes(entity1);\n\n\t\t\tif (hasEntity1InBoth || hasEntity2InBoth) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have pattern-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have pattern-based relationship\n\t * @private\n\t */\n\t_hasPatternBasedKeyRelationship (key1, key2) {\n\t\tif (this._isPatternBasedSnapshot(key1)) {\n\t\t\treturn this._checkPatternBasedRange(key2, key1);\n\t\t}\n\n\t\tif (this._isPatternBasedSnapshot(key2)) {\n\t\t\treturn this._checkPatternBasedRange(key1, key2);\n\t\t}\n\n\t\treturn this._haveSimilarPatterns(key1, key2);\n\t}\n\n\t/**\n\t * Check if a snapshot key contains pattern-based wildcards or indicators\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key contains pattern-based elements\n\t * @private\n\t */\n\t_isPatternBasedSnapshot (snapshotKey) {\n\t\treturn snapshotKey.includes(\"*\") ||\n\t\t\tsnapshotKey.includes(\"?\") ||\n\t\t\tsnapshotKey.includes(\"[\") ||\n\t\t\tsnapshotKey.includes(\"{\") ||\n\t\t\tsnapshotKey.endsWith(\"_range\") ||\n\t\t\tsnapshotKey.endsWith(\"_pattern\");\n\t}\n\n\t/**\n\t * Check if operation key matches a pattern-based snapshot key range\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Pattern-based snapshot key\n\t * @returns {boolean} True if operation key matches pattern\n\t * @private\n\t */\n\t_checkPatternBasedRange (operationKey, snapshotKey) {\n\t\tif (snapshotKey.includes(\"*\")) {\n\t\t\tconst pattern = snapshotKey.replace(/\\*/g, \".*\");\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${pattern}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\tconst prefix = snapshotKey.split(\"*\")[0];\n\n\t\t\t\treturn operationKey.startsWith(prefix);\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"?\")) {\n\t\t\tconst pattern = snapshotKey.replace(/\\?/g, \".\");\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${pattern}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"[\")) {\n\t\t\ttry {\n\t\t\t\tconst regex = new RegExp(`^${snapshotKey}$`);\n\n\t\t\t\treturn regex.test(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.includes(\"{\") && snapshotKey.includes(\"}\")) {\n\t\t\tconst beforeBrace = snapshotKey.substring(0, snapshotKey.indexOf(\"{\"));\n\t\t\tconst afterBrace = snapshotKey.substring(snapshotKey.indexOf(\"}\") + 1);\n\t\t\tconst choices = snapshotKey.substring(\n\t\t\t\tsnapshotKey.indexOf(\"{\") + 1,\n\t\t\t\tsnapshotKey.indexOf(\"}\")\n\t\t\t).split(\",\");\n\n\t\t\tfor (const choice of choices) {\n\t\t\t\tconst fullPattern = beforeBrace + choice.trim() + afterBrace;\n\t\t\t\tif (operationKey === fullPattern || operationKey.startsWith(fullPattern)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (snapshotKey.endsWith(\"_range\") || snapshotKey.endsWith(\"_pattern\")) {\n\t\t\tconst baseKey = snapshotKey.replace(/_range$|_pattern$/, \"\");\n\n\t\t\treturn operationKey.startsWith(baseKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have similar structural patterns\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have similar patterns\n\t * @private\n\t */\n\t_haveSimilarPatterns (key1, key2) {\n\t\tconst pattern1 = this._extractKeyPattern(key1);\n\t\tconst pattern2 = this._extractKeyPattern(key2);\n\n\t\treturn this._patternsAreSimilar(pattern1, pattern2);\n\t}\n\n\t/**\n\t * Extract structural pattern from a key by normalizing variable components\n\t * @param {string} key - Key to extract pattern from\n\t * @returns {string} Normalized pattern string\n\t * @private\n\t */\n\t_extractKeyPattern (key) {\n\t\tconst cacheKey = `pattern:${key}`;\n\t\tif (this.patternCache.has(cacheKey)) {\n\t\t\treturn this.patternCache.get(cacheKey);\n\t\t}\n\n\t\tconst pattern = key\n\t\t\t.replace(/\\d+/g, \"#\") // Numbers become #\n\t\t\t.replace(/[a-f0-9]{8,}/g, \"&\") // Hashes/UUIDs become &\n\t\t\t.replace(/\\w{1,3}(?=:|_|-)/g, \"@\"); // Short prefixes become @\n\n\t\tthis.patternCache.set(cacheKey, pattern);\n\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Check if two patterns are similar based on similarity threshold\n\t * @param {string} pattern1 - First pattern to compare\n\t * @param {string} pattern2 - Second pattern to compare\n\t * @returns {boolean} True if patterns are similar (>70% similarity)\n\t * @private\n\t */\n\t_patternsAreSimilar (pattern1, pattern2) {\n\t\tif (pattern1 === pattern2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst similarity = this._calculatePatternSimilarity(pattern1, pattern2);\n\n\t\treturn similarity > 0.7;\n\t}\n\n\t/**\n\t * Calculate similarity score between two patterns using Levenshtein distance\n\t * @param {string} pattern1 - First pattern\n\t * @param {string} pattern2 - Second pattern\n\t * @returns {number} Similarity score between 0 and 1\n\t * @private\n\t */\n\t_calculatePatternSimilarity (pattern1, pattern2) {\n\t\tconst len1 = pattern1.length;\n\t\tconst len2 = pattern2.length;\n\t\tconst maxLen = Math.max(len1, len2);\n\n\t\tif (maxLen === 0) return 1;\n\n\t\tconst distance = this._levenshteinDistance(pattern1, pattern2);\n\n\t\treturn 1 - distance / maxLen;\n\t}\n\n\t/**\n\t * Calculate Levenshtein distance between two strings\n\t * @param {string} str1 - First string\n\t * @param {string} str2 - Second string\n\t * @returns {number} Edit distance between strings\n\t * @private\n\t */\n\t_levenshteinDistance (str1, str2) {\n\t\tconst matrix = [];\n\n\t\tfor (let i = 0; i <= str2.length; i++) {\n\t\t\tmatrix[i] = [i];\n\t\t}\n\n\t\tfor (let j = 0; j <= str1.length; j++) {\n\t\t\tmatrix[0][j] = j;\n\t\t}\n\n\t\tfor (let i = 1; i <= str2.length; i++) {\n\t\t\tfor (let j = 1; j <= str1.length; j++) {\n\t\t\t\tif (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n\t\t\t\t\tmatrix[i][j] = matrix[i - 1][j - 1];\n\t\t\t\t} else {\n\t\t\t\t\tmatrix[i][j] = Math.min(\n\t\t\t\t\t\tmatrix[i - 1][j - 1] + 1, // substitution\n\t\t\t\t\t\tmatrix[i][j - 1] + 1, // insertion\n\t\t\t\t\t\tmatrix[i - 1][j] + 1 // deletion\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn matrix[str2.length][str1.length];\n\t}\n\n\t/**\n\t * Check if two keys have temporal relationship based on time-related components\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have temporal relationship\n\t * @private\n\t */\n\t_hasTemporalKeyRelationship (key1, key2) {\n\t\tif (this._isTemporalSnapshot(key1) && this._isTemporalSnapshot(key2)) {\n\t\t\tconst temporal1 = this._extractTemporalComponents(key1);\n\t\t\tconst temporal2 = this._extractTemporalComponents(key2);\n\n\t\t\treturn this._haveTemporalOverlap(temporal1, temporal2);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a snapshot key contains temporal/time-related keywords\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key contains temporal indicators\n\t * @private\n\t */\n\t_isTemporalSnapshot (snapshotKey) {\n\t\tconst temporalKeywords = [\n\t\t\t\"timestamp\", \"time\", \"date\", \"created\", \"updated\", \"modified\",\n\t\t\t\"datetime\", \"ts\", \"epoch\", \"iso\", \"utc\", \"log\", \"event\", \"history\"\n\t\t];\n\n\t\treturn temporalKeywords.some(keyword =>\n\t\t\tsnapshotKey.toLowerCase().includes(keyword)\n\t\t);\n\t}\n\n\t/**\n\t * Check if operation key falls within temporal range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Temporal snapshot key\n\t * @returns {boolean} True if operation key is in temporal range\n\t * @private\n\t */\n\t_checkTemporalRange (operationKey, snapshotKey) {\n\t\tif (this._isTemporalSnapshot(operationKey)) {\n\t\t\tconst opTemporal = this._extractTemporalComponents(operationKey);\n\t\t\tconst snapTemporal = this._extractTemporalComponents(snapshotKey);\n\n\t\t\treturn this._haveTemporalOverlap(opTemporal, snapTemporal);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Extract temporal components from a key using regex patterns\n\t * @param {string} key - Key to extract temporal components from\n\t * @returns {Object} Object with temporal component flags\n\t * @private\n\t */\n\t_extractTemporalComponents (key) {\n\t\tconst components = {\n\t\t\thasDate: false,\n\t\t\thasTime: false,\n\t\t\thasTimestamp: false,\n\t\t\thasEpoch: false\n\t\t};\n\n\t\tif ((/\\d{4}-\\d{2}-\\d{2}/).test(key)) components.hasDate = true;\n\t\tif ((/\\d{2}:\\d{2}:\\d{2}/).test(key)) components.hasTime = true;\n\t\tif ((/\\d{13}/).test(key)) components.hasTimestamp = true;\n\t\tif ((/\\d{10}/).test(key)) components.hasEpoch = true;\n\n\t\treturn components;\n\t}\n\n\t/**\n\t * Check if two temporal component objects have overlapping temporal elements\n\t * @param {Object} opTemporal - Temporal components from operation key\n\t * @param {Object} snapTemporal - Temporal components from snapshot key\n\t * @returns {boolean} True if temporal components overlap\n\t * @private\n\t */\n\t_haveTemporalOverlap (opTemporal, snapTemporal) {\n\t\treturn opTemporal.hasDate && snapTemporal.hasDate ||\n\t\t\topTemporal.hasTime && snapTemporal.hasTime ||\n\t\t\topTemporal.hasTimestamp && snapTemporal.hasTimestamp ||\n\t\t\topTemporal.hasEpoch && snapTemporal.hasEpoch;\n\t}\n\n\t/**\n\t * Check if two keys have composite key relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have composite key relationship\n\t * @private\n\t */\n\t_hasCompositeKeyRelationship (key1, key2) {\n\t\treturn this._checkCompositeKeyRange(key1, key2) ||\n\t\t\tthis._checkCompositeKeyRange(key2, key1);\n\t}\n\n\t/**\n\t * Check if a snapshot key represents a composite key structure\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if key is composite key structure\n\t * @private\n\t */\n\t_isCompositeKeySnapshot (snapshotKey) {\n\t\treturn snapshotKey.includes(\":\") ||\n\t\t\tsnapshotKey.includes(\"#\") ||\n\t\t\tsnapshotKey.includes(\"|\") ||\n\t\t\tsnapshotKey.includes(\"@\") ||\n\t\t\tsnapshotKey.split(\"_\").length > 2 ||\n\t\t\tsnapshotKey.split(\"-\").length > 2;\n\t}\n\n\t/**\n\t * Check if operation key falls within composite key range of snapshot key\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Composite snapshot key\n\t * @returns {boolean} True if operation key is in composite key range\n\t * @private\n\t */\n\t_checkCompositeKeyRange (operationKey, snapshotKey) {\n\t\tconst separators = [\":\", \"#\", \"|\", \"@\", \"_\", \"-\"];\n\n\t\tfor (const sep of separators) {\n\t\t\tif (operationKey.includes(sep) && snapshotKey.includes(sep)) {\n\t\t\t\tconst opParts = operationKey.split(sep);\n\t\t\t\tconst snapParts = snapshotKey.split(sep);\n\n\t\t\t\tif (this._hasCompositeKeyOverlap(opParts, snapParts)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if operation key parts overlap with snapshot key parts in composite key\n\t * @param {string[]} opParts - Parts from operation key\n\t * @param {string[]} snapParts - Parts from snapshot key\n\t * @returns {boolean} True if key parts have composite overlap\n\t * @private\n\t */\n\t_hasCompositeKeyOverlap (opParts, snapParts) {\n\t\tconst minLength = Math.min(opParts.length, snapParts.length);\n\n\t\tfor (let i = 1; i <= minLength; i++) {\n\t\t\tlet allMatch = true;\n\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\tif (opParts[j] !== snapParts[j]) {\n\t\t\t\t\tallMatch = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allMatch) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have index-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have index relationship\n\t * @private\n\t */\n\t_hasIndexKeyRelationship (key1, key2) {\n\t\tconst isIndex1 = this._isIndexKey(key1);\n\t\tconst isIndex2 = this._isIndexKey(key2);\n\n\t\tif (isIndex1 || isIndex2) {\n\t\t\tconst base1 = this._extractBaseKeyFromIndex(key1);\n\t\t\tconst base2 = this._extractBaseKeyFromIndex(key2);\n\n\t\t\treturn base1 === base2 ||\n\t\t\t\tkey1.startsWith(base2) ||\n\t\t\t\tkey2.startsWith(base1) ||\n\t\t\t\tbase1.startsWith(base2) ||\n\t\t\t\tbase2.startsWith(base1);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key represents an index key structure\n\t * @param {string} key - Key to check\n\t * @returns {boolean} True if key is an index key\n\t * @private\n\t */\n\t_isIndexKey (key) {\n\t\treturn key.includes(\"_index\") ||\n\t\t\tkey.includes(\"_idx\") ||\n\t\t\tkey.startsWith(\"idx_\") ||\n\t\t\tkey.includes(\"_key\") ||\n\t\t\tkey.includes(\"_lookup\");\n\t}\n\n\t/**\n\t * Extract base key from an index key by removing index-specific suffixes\n\t * @param {string} indexKey - Index key to extract base from\n\t * @returns {string} Base key without index identifiers\n\t * @private\n\t */\n\t_extractBaseKeyFromIndex (indexKey) {\n\t\treturn indexKey\n\t\t\t.replace(/_index.*$/, \"\")\n\t\t\t.replace(/_idx.*$/, \"\")\n\t\t\t.replace(/^idx_/, \"\")\n\t\t\t.replace(/_key.*$/, \"\")\n\t\t\t.replace(/_lookup.*$/, \"\");\n\t}\n\n\t/**\n\t * Check if a snapshot key represents an index-based query\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if snapshot is index-based\n\t * @private\n\t */\n\t_isIndexBasedSnapshot (transaction, snapshotKey) {\n\t\treturn snapshotKey.includes(\"_index\") ||\n\t\t\tsnapshotKey.includes(\"_idx\") ||\n\t\t\tsnapshotKey.startsWith(\"idx_\") ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:index_range`);\n\t}\n\n\t/**\n\t * Check if operation key falls within index-based range of snapshot key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Index-based snapshot key\n\t * @returns {boolean} True if operation key is in index range\n\t * @private\n\t */\n\t_checkIndexBasedRange (transaction, operationKey, snapshotKey) {\n\t\tconst indexRange = transaction.snapshot.get(`${snapshotKey}:index_range`);\n\t\tif (indexRange) {\n\t\t\treturn this.keyMatchesIndexRange(operationKey, indexRange);\n\t\t}\n\n\t\tif (snapshotKey.includes(\"_index\") || snapshotKey.includes(\"_idx\")) {\n\t\t\tconst baseKey = snapshotKey.replace(/_index.*$|_idx.*$/, \"\");\n\n\t\t\treturn operationKey.startsWith(baseKey);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two keys have collection-based relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have collection relationship\n\t * @private\n\t */\n\t_hasCollectionKeyRelationship (key1, key2) {\n\t\tconst isCollection1 = this._isCollectionKey(key1);\n\t\tconst isCollection2 = this._isCollectionKey(key2);\n\n\t\tif (isCollection1 || isCollection2) {\n\t\t\tconst base1 = this._extractCollectionBase(key1);\n\t\t\tconst base2 = this._extractCollectionBase(key2);\n\n\t\t\treturn base1 === base2 ||\n\t\t\t\tkey1.startsWith(base2) ||\n\t\t\t\tkey2.startsWith(base1);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if a key represents a collection structure\n\t * @param {string} key - Key to check\n\t * @returns {boolean} True if key is a collection key\n\t * @private\n\t */\n\t_isCollectionKey (key) {\n\t\tconst collectionIndicators = [\n\t\t\t\"_list\", \"_array\", \"_set\", \"_collection\",\n\t\t\t\"_items\", \"_elements\", \"_members\", \"_entries\"\n\t\t];\n\n\t\treturn collectionIndicators.some(indicator => key.includes(indicator));\n\t}\n\n\t/**\n\t * Extract base key from a collection key by removing collection-specific suffixes\n\t * @param {string} collectionKey - Collection key to extract base from\n\t * @returns {string} Base key without collection identifiers\n\t * @private\n\t */\n\t_extractCollectionBase (collectionKey) {\n\t\tconst indicators = [\"_list\", \"_array\", \"_set\", \"_collection\", \"_items\", \"_elements\", \"_members\", \"_entries\"];\n\n\t\tfor (const indicator of indicators) {\n\t\t\tif (collectionKey.includes(indicator)) {\n\t\t\t\treturn collectionKey.replace(indicator, \"\");\n\t\t\t}\n\t\t}\n\n\t\treturn collectionKey;\n\t}\n\n\t/**\n\t * Check if two keys have functional dependency relationship\n\t * @param {string} key1 - First key to compare\n\t * @param {string} key2 - Second key to compare\n\t * @returns {boolean} True if keys have functional dependency\n\t * @private\n\t */\n\t_hasFunctionalDependency (key1, key2) {\n\t\tconst dependencies = [\n\t\t\t[\"user_id\", \"user_email\"], [\"user_id\", \"user_profile\"],\n\t\t\t[\"account_id\", \"user_id\"], [\"session_id\", \"user_id\"],\n\t\t\t[\"order_id\", \"user_id\"], [\"order_id\", \"order_total\"],\n\t\t\t[\"payment_id\", \"order_id\"], [\"shipping_id\", \"order_id\"],\n\t\t\t[\"post_id\", \"user_id\"], [\"comment_id\", \"post_id\"],\n\t\t\t[\"message_id\", \"thread_id\"], [\"file_id\", \"folder_id\"],\n\t\t\t[\"document_id\", \"workspace_id\"], [\"task_id\", \"project_id\"]\n\t\t];\n\n\t\tconst norm1 = this._normalizeKeyForDependency(key1);\n\t\tconst norm2 = this._normalizeKeyForDependency(key2);\n\n\t\tfor (const [dep1, dep2] of dependencies) {\n\t\t\tif (norm1.includes(dep1) && norm2.includes(dep2) ||\n\t\t\t\tnorm1.includes(dep2) && norm2.includes(dep1)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Normalize a key for functional dependency comparison by converting to standard format\n\t * @param {string} key - Key to normalize\n\t * @returns {string} Normalized key in lowercase with underscores\n\t * @private\n\t */\n\t_normalizeKeyForDependency (key) {\n\t\treturn key.toLowerCase()\n\t\t\t.replace(/[:\\-/.]/g, \"_\")\n\t\t\t.replace(/([a-z])([A-Z])/g, \"$1_$2\")\n\t\t\t.toLowerCase();\n\t}\n\n\t/**\n\t * Check if transaction snapshot has explicit range metadata for a key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} snapshotKey - Key from snapshot to check\n\t * @returns {boolean} True if explicit range metadata exists\n\t * @private\n\t */\n\t_hasExplicitRangeMetadata (transaction, snapshotKey) {\n\t\treturn transaction.snapshot.has(`${snapshotKey}:range`) ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:query`) ||\n\t\t\ttransaction.snapshot.has(`${snapshotKey}:predicate`);\n\t}\n\n\t/**\n\t * Check if operation key matches explicit range metadata for snapshot key\n\t * @param {Transaction} transaction - Transaction containing snapshot\n\t * @param {string} operationKey - Key from operation\n\t * @param {string} snapshotKey - Key from snapshot with explicit range\n\t * @returns {boolean} True if operation key matches explicit range\n\t * @private\n\t */\n\t_checkExplicitRange (transaction, operationKey, snapshotKey) {\n\t\tconst rangeInfo = transaction.snapshot.get(`${snapshotKey}:range`);\n\t\tif (rangeInfo && typeof rangeInfo === \"object\") {\n\t\t\treturn this.keyMatchesRange(operationKey, rangeInfo);\n\t\t}\n\n\t\tconst queryInfo = transaction.snapshot.get(`${snapshotKey}:query`);\n\t\tif (queryInfo) {\n\t\t\treturn this.keyMatchesQuery(operationKey, queryInfo);\n\t\t}\n\n\t\tconst predicateInfo = transaction.snapshot.get(`${snapshotKey}:predicate`);\n\t\tif (predicateInfo && typeof predicateInfo === \"function\") {\n\t\t\ttry {\n\t\t\t\treturn predicateInfo(operationKey);\n\t\t\t} catch {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Clear internal caches\n\t */\n\tclearCaches () {\n\t\tthis.patternCache.clear();\n\t\tthis.semanticCache.clear();\n\t}\n}\n","import { IsolationLevels } from \"./constants.js\";\nimport { KeyRelationshipAnalyzer } from \"./key-relationship-analyzer.js\";\n\n/**\n * Deadlock detector using multiple detection strategies\n */\nexport class DeadlockDetector {\n\tconstructor (lockManager) {\n\t\tthis.lockManager = lockManager;\n\t\tthis.keyAnalyzer = new KeyRelationshipAnalyzer();\n\t}\n\n\t/**\n\t * Check for deadlocks using multiple detection strategies\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tdetectDeadlocks (activeTransactions, options = {}) {\n\t\tconst opts = {\n\t\t\tuseLockGraph: true,\n\t\t\tuseResourceGraph: true,\n\t\t\tuseTimeoutDetection: true,\n\t\t\ttimeoutThreshold: 10000,\n\t\t\t...options\n\t\t};\n\n\t\tconst results = {\n\t\t\tdeadlocks: [],\n\t\t\tsuspectedDeadlocks: [],\n\t\t\ttimeoutVictims: [],\n\t\t\twaitForGraph: null,\n\t\t\tresourceGraph: null\n\t\t};\n\n\t\tif (activeTransactions.length < 2) {\n\t\t\treturn results;\n\t\t}\n\n\t\t// 1. Lock-based wait-for graph deadlock detection\n\t\tif (opts.useLockGraph) {\n\t\t\tconst lockDeadlocks = this._detectLockBasedDeadlocks(activeTransactions);\n\t\t\tresults.deadlocks.push(...lockDeadlocks.cycles);\n\t\t\tresults.waitForGraph = lockDeadlocks.graph;\n\t\t}\n\n\t\t// 2. Resource allocation graph deadlock detection\n\t\tif (opts.useResourceGraph) {\n\t\t\tconst resourceDeadlocks = this._detectResourceDeadlocks(activeTransactions);\n\t\t\tresults.deadlocks.push(...resourceDeadlocks.cycles);\n\t\t\tresults.resourceGraph = resourceDeadlocks.graph;\n\t\t}\n\n\t\t// 3. Isolation-level based deadlock detection\n\t\tconst isolationDeadlocks = this._detectIsolationDeadlocks(activeTransactions);\n\t\tresults.suspectedDeadlocks.push(...isolationDeadlocks);\n\n\t\t// 4. Timeout-based deadlock detection (fallback)\n\t\tif (opts.useTimeoutDetection) {\n\t\t\tconst timeoutVictims = this._detectTimeoutVictims(activeTransactions, opts.timeoutThreshold);\n\t\t\tresults.timeoutVictims.push(...timeoutVictims);\n\t\t}\n\n\t\t// Remove duplicates and merge results\n\t\tresults.deadlocks = this._deduplicateDeadlocks(results.deadlocks);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Detect deadlocks using lock-based wait-for graph\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object} Lock-based deadlock detection results\n\t * @private\n\t */\n\t_detectLockBasedDeadlocks (activeTransactions) {\n\t\tconst waitForGraph = this._buildLockWaitForGraph(activeTransactions);\n\t\tconst cycles = this._detectCyclesInGraph(waitForGraph);\n\n\t\treturn {\n\t\t\tgraph: waitForGraph,\n\t\t\tcycles: cycles.map(cycle => ({\n\t\t\t\ttype: \"lock\",\n\t\t\t\ttransactions: cycle,\n\t\t\t\tresources: this._getResourcesInvolvedInCycle(cycle, activeTransactions)\n\t\t\t}))\n\t\t};\n\t}\n\n\t/**\n\t * Build wait-for graph based on lock dependencies\n\t * @param {Transaction[]} transactions - Active transactions\n\t * @returns {Map<string, Set<string>>} Wait-for graph\n\t * @private\n\t */\n\t_buildLockWaitForGraph (transactions) {\n\t\tconst graph = new Map();\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\t// Initialize graph nodes\n\t\tfor (const tx of transactions) {\n\t\t\tgraph.set(tx.id, new Set());\n\t\t}\n\n\t\t// Build edges based on lock conflicts\n\t\tfor (const lockInfo of lockStats.recordsLocked) {\n\t\t\tconst { recordKey, holders } = lockInfo;\n\n\t\t\t// Find transactions waiting for this lock\n\t\t\tconst waitingTransactions = this._findTransactionsWaitingForLock(recordKey, transactions);\n\n\t\t\t// Create edges from waiting transactions to lock holders\n\t\t\tfor (const waitingTx of waitingTransactions) {\n\t\t\t\tfor (const holderId of holders) {\n\t\t\t\t\tif (waitingTx !== holderId && graph.has(waitingTx) && graph.has(holderId)) {\n\t\t\t\t\t\tgraph.get(waitingTx).add(holderId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Find transactions that are waiting for a specific lock\n\t * @param {string} recordKey - Record key\n\t * @param {Transaction[]} transactions - All transactions to check\n\t * @returns {string[]} Transaction IDs waiting for the lock\n\t * @private\n\t */\n\t_findTransactionsWaitingForLock (recordKey, transactions) {\n\t\tconst waiting = [];\n\n\t\tfor (const tx of transactions) {\n\t\t\tconst hasOperationOnKey = tx.writeSet.has(recordKey) || tx.readSet.has(recordKey);\n\t\t\tconst holdsLock = this.lockManager.holdsLocks(tx.id);\n\n\t\t\tif (hasOperationOnKey && !holdsLock) {\n\t\t\t\twaiting.push(tx.id);\n\t\t\t}\n\t\t}\n\n\t\treturn waiting;\n\t}\n\n\t/**\n\t * Detect deadlocks using resource allocation graph\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object} Resource-based deadlock detection results\n\t * @private\n\t */\n\t_detectResourceDeadlocks (activeTransactions) {\n\t\tconst resourceGraph = this._buildResourceAllocationGraph(activeTransactions);\n\t\tconst cycles = this._detectCyclesInResourceGraph(resourceGraph);\n\n\t\treturn {\n\t\t\tgraph: resourceGraph,\n\t\t\tcycles: cycles.map(cycle => ({\n\t\t\t\ttype: \"resource\",\n\t\t\t\ttransactions: cycle.transactions,\n\t\t\t\tresources: cycle.resources\n\t\t\t}))\n\t\t};\n\t}\n\n\t/**\n\t * Build resource allocation graph\n\t * @param {Transaction[]} transactions - Active transactions\n\t * @returns {Object} Resource allocation graph\n\t * @private\n\t */\n\t_buildResourceAllocationGraph (transactions) {\n\t\tconst graph = {\n\t\t\ttransactions: new Map(), // tx -> Set<resources>\n\t\t\tresources: new Map(), // resource -> Set<tx>\n\t\t\twaiting: new Map() // tx -> Set<resources waiting for>\n\t\t};\n\n\t\t// Initialize\n\t\tfor (const tx of transactions) {\n\t\t\tgraph.transactions.set(tx.id, new Set());\n\t\t\tgraph.waiting.set(tx.id, new Set());\n\t\t}\n\n\t\t// Build allocation and waiting relationships\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\tfor (const lockInfo of lockStats.recordsLocked) {\n\t\t\tconst { recordKey, holders } = lockInfo;\n\n\t\t\tif (!graph.resources.has(recordKey)) {\n\t\t\t\tgraph.resources.set(recordKey, new Set());\n\t\t\t}\n\n\t\t\t// Record allocations\n\t\t\tfor (const holderId of holders) {\n\t\t\t\tif (graph.transactions.has(holderId)) {\n\t\t\t\t\tgraph.transactions.get(holderId).add(recordKey);\n\t\t\t\t\tgraph.resources.get(recordKey).add(holderId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Record waiting relationships\n\t\t\tconst waitingTx = this._findTransactionsWaitingForLock(recordKey, transactions);\n\t\t\tfor (const txId of waitingTx) {\n\t\t\t\tif (graph.waiting.has(txId)) {\n\t\t\t\t\tgraph.waiting.get(txId).add(recordKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Detect cycles in a wait-for graph\n\t * @param {Map<string, Set<string>>} graph - Wait-for graph\n\t * @returns {string[][]} Array of cycles (each cycle is array of transaction IDs)\n\t * @private\n\t */\n\t_detectCyclesInGraph (graph) {\n\t\tconst visited = new Set();\n\t\tconst recursionStack = new Set();\n\t\tconst cycles = [];\n\n\t\tconst dfs = (node, path) => {\n\t\t\tif (recursionStack.has(node)) {\n\t\t\t\t// Found a cycle\n\t\t\t\tconst cycleStart = path.indexOf(node);\n\t\t\t\tconst cycle = path.slice(cycleStart);\n\t\t\t\tcycles.push([...cycle, node]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (visited.has(node)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvisited.add(node);\n\t\t\trecursionStack.add(node);\n\t\t\tpath.push(node);\n\n\t\t\tconst neighbors = graph.get(node) || new Set();\n\t\t\tfor (const neighbor of neighbors) {\n\t\t\t\tdfs(neighbor, [...path]);\n\t\t\t}\n\n\t\t\trecursionStack.delete(node);\n\t\t};\n\n\t\t// Start DFS from each unvisited node\n\t\tfor (const node of graph.keys()) {\n\t\t\tif (!visited.has(node)) {\n\t\t\t\tdfs(node, []);\n\t\t\t}\n\t\t}\n\n\t\treturn cycles;\n\t}\n\n\t/**\n\t * Detect cycles in resource allocation graph\n\t * @param {Object} resourceGraph - Resource allocation graph\n\t * @returns {Object[]} Array of resource-based cycles\n\t * @private\n\t */\n\t_detectCyclesInResourceGraph (resourceGraph) {\n\t\tconst cycles = [];\n\n\t\t// Convert resource graph to wait-for graph\n\t\tconst waitForGraph = new Map();\n\n\t\tfor (const [txId] of resourceGraph.transactions) {\n\t\t\twaitForGraph.set(txId, new Set());\n\t\t}\n\n\t\t// Build wait-for relationships\n\t\tfor (const [waitingTx, wantedResources] of resourceGraph.waiting) {\n\t\t\tfor (const resource of wantedResources) {\n\t\t\t\tconst holders = resourceGraph.resources.get(resource) || new Set();\n\t\t\t\tfor (const holdingTx of holders) {\n\t\t\t\t\tif (waitingTx !== holdingTx) {\n\t\t\t\t\t\twaitForGraph.get(waitingTx).add(holdingTx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Detect cycles in the converted graph\n\t\tconst graphCycles = this._detectCyclesInGraph(waitForGraph);\n\n\t\t// Convert back to resource cycles\n\t\tfor (const cycle of graphCycles) {\n\t\t\tconst resources = this._getResourcesInvolvedInCycle(cycle,\n\t\t\t\tArray.from(resourceGraph.transactions.keys()).map(id => ({ id })));\n\t\t\tcycles.push({\n\t\t\t\ttransactions: cycle,\n\t\t\t\tresources: Array.from(resources)\n\t\t\t});\n\t\t}\n\n\t\treturn cycles;\n\t}\n\n\t/**\n\t * Get resources involved in a deadlock cycle\n\t * @param {string[]} cycle - Array of transaction IDs in cycle\n\t * @param {Transaction[]|Object[]} transactions - Transaction objects or objects with id\n\t * @returns {Set<string>} Set of resource keys involved\n\t * @private\n\t */\n\t_getResourcesInvolvedInCycle (cycle, transactions) {\n\t\tconst resources = new Set();\n\n\t\tfor (const txId of cycle) {\n\t\t\tconst tx = transactions.find(t => t.id === txId);\n\t\t\tif (tx && tx.writeSet && tx.readSet) {\n\t\t\t\tfor (const key of tx.writeSet) {\n\t\t\t\t\tresources.add(key);\n\t\t\t\t}\n\t\t\t\tfor (const key of tx.readSet) {\n\t\t\t\t\tresources.add(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn resources;\n\t}\n\n\t/**\n\t * Detect isolation-level based deadlocks\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @returns {Object[]} Array of suspected isolation deadlocks\n\t * @private\n\t */\n\t_detectIsolationDeadlocks (activeTransactions) {\n\t\tconst suspectedDeadlocks = [];\n\n\t\tfor (let i = 0; i < activeTransactions.length; i++) {\n\t\t\tfor (let j = i + 1; j < activeTransactions.length; j++) {\n\t\t\t\tconst tx1 = activeTransactions[i];\n\t\t\t\tconst tx2 = activeTransactions[j];\n\n\t\t\t\tif (this._hasIsolationConflict(tx1, tx2)) {\n\t\t\t\t\tsuspectedDeadlocks.push({\n\t\t\t\t\t\ttype: \"isolation\",\n\t\t\t\t\t\ttransactions: [tx1.id, tx2.id],\n\t\t\t\t\t\tconflict: this._getIsolationConflictType(tx1, tx2)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn suspectedDeadlocks;\n\t}\n\n\t/**\n\t * Check if two transactions have isolation conflicts\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if isolation conflict exists\n\t * @private\n\t */\n\t_hasIsolationConflict (tx1, tx2) {\n\t\tif (tx1.isolationLevel >= IsolationLevels.REPEATABLE_READ ||\n\t\t\ttx2.isolationLevel >= IsolationLevels.REPEATABLE_READ) {\n\n\t\t\tconst tx1ReadsWhatTx2Writes = this._readsOtherWrites(tx1, tx2);\n\t\t\tconst tx2ReadsWhatTx1Writes = this._readsOtherWrites(tx2, tx1);\n\n\t\t\treturn tx1ReadsWhatTx2Writes || tx2ReadsWhatTx1Writes;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get the type of isolation conflict between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {string} Conflict type description\n\t * @private\n\t */\n\t_getIsolationConflictType (tx1, tx2) {\n\t\tif (this._readsOtherWrites(tx1, tx2) && this._readsOtherWrites(tx2, tx1)) {\n\t\t\treturn \"bidirectional-dependency\";\n\t\t} else if (this._readsOtherWrites(tx1, tx2)) {\n\t\t\treturn \"tx1-depends-on-tx2\";\n\t\t} else if (this._readsOtherWrites(tx2, tx1)) {\n\t\t\treturn \"tx2-depends-on-tx1\";\n\t\t}\n\n\t\treturn \"unknown\";\n\t}\n\n\t/**\n\t * Check if one transaction reads what another writes\n\t * @param {Transaction} reader - Reading transaction\n\t * @param {Transaction} writer - Writing transaction\n\t * @returns {boolean} True if dependency exists\n\t * @private\n\t */\n\t_readsOtherWrites (reader, writer) {\n\t\tfor (const readKey of reader.readSet) {\n\t\t\tif (writer.writeSet.has(readKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Detect timeout-based deadlock victims\n\t * @param {Transaction[]} activeTransactions - Active transactions\n\t * @param {number} timeoutThreshold - Timeout threshold in milliseconds\n\t * @returns {string[]} Transaction IDs that have timed out\n\t * @private\n\t */\n\t_detectTimeoutVictims (activeTransactions, timeoutThreshold) {\n\t\tconst victims = [];\n\n\t\tfor (const transaction of activeTransactions) {\n\t\t\tconst duration = transaction.getDuration();\n\t\t\tif (duration !== null && duration > timeoutThreshold) {\n\t\t\t\tvictims.push(transaction.id);\n\t\t\t}\n\t\t}\n\n\t\treturn victims;\n\t}\n\n\t/**\n\t * Remove duplicate deadlocks from results\n\t * @param {Object[]} deadlocks - Array of deadlock objects\n\t * @returns {Object[]} Deduplicated deadlocks\n\t * @private\n\t */\n\t_deduplicateDeadlocks (deadlocks) {\n\t\tconst seen = new Set();\n\t\tconst unique = [];\n\n\t\tfor (const deadlock of deadlocks) {\n\t\t\tconst signature = this._createDeadlockSignature(deadlock);\n\n\t\t\tif (!seen.has(signature)) {\n\t\t\t\tseen.add(signature);\n\t\t\t\tunique.push(deadlock);\n\t\t\t}\n\t\t}\n\n\t\treturn unique;\n\t}\n\n\t/**\n\t * Create a normalized signature for a deadlock\n\t * @param {Object} deadlock - Deadlock object\n\t * @returns {string} Normalized signature\n\t * @private\n\t */\n\t_createDeadlockSignature (deadlock) {\n\t\tconst sortedTransactions = [...deadlock.transactions].sort();\n\t\tconst sortedResources = deadlock.resources ? [...deadlock.resources].sort() : [];\n\n\t\treturn `${deadlock.type}:${sortedTransactions.join(\",\")}:${sortedResources.join(\",\")}`;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { IsolationLevels } from \"./constants.js\";\nimport { KeyRelationshipAnalyzer } from \"./key-relationship-analyzer.js\";\n\n/**\n * Validator for transaction isolation levels and conflict detection\n */\nexport class IsolationValidator {\n\tconstructor () {\n\t\tthis.keyAnalyzer = new KeyRelationshipAnalyzer();\n\t}\n\n\t/**\n\t * Validate isolation level requirements for a transaction\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All active transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t */\n\tvalidateIsolation (transaction, allTransactions) {\n\t\tswitch (transaction.isolationLevel) {\n\t\t\tcase IsolationLevels.READ_UNCOMMITTED:\n\t\t\t\t// No validation needed - allows dirty reads\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.READ_COMMITTED:\n\t\t\t\tthis._validateReadCommitted(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.REPEATABLE_READ:\n\t\t\t\tthis._validateRepeatableRead(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tcase IsolationLevels.SERIALIZABLE:\n\t\t\t\tthis._validateSerializable(transaction, allTransactions);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Unknown isolation level: ${transaction.isolationLevel}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"isolation\"\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Validate READ_COMMITTED isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateReadCommitted (transaction, allTransactions) {\n\t\tfor (const writeKey of transaction.writeSet) {\n\t\t\tconst conflictingTransactions = this._findConflictingWrites(transaction.id, writeKey, allTransactions);\n\t\t\tif (conflictingTransactions.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Write conflict detected on key '${writeKey}' with transactions: ${conflictingTransactions.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"write-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate REPEATABLE_READ isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateRepeatableRead (transaction, allTransactions) {\n\t\t// First validate READ_COMMITTED requirements\n\t\tthis._validateReadCommitted(transaction, allTransactions);\n\n\t\t// Check for repeatable read violations\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tif (this._hasReadSetConflict(transaction, readKey, allTransactions)) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Repeatable read violation: key '${readKey}' was modified by another transaction`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"repeatable-read-violation\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for phantom reads in range queries\n\t\tif (transaction.snapshot.size > 0) {\n\t\t\tfor (const [snapshotKey, snapshotValue] of transaction.snapshot) {\n\t\t\t\tif (this._hasSnapshotConflict(transaction, snapshotKey, snapshotValue, allTransactions)) {\n\t\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t\t`Phantom read detected: snapshot inconsistency for key '${snapshotKey}'`,\n\t\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\t\"phantom-read\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate SERIALIZABLE isolation level\n\t * @param {Transaction} transaction - Transaction to validate\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @throws {TransactionError} If isolation violation detected\n\t * @private\n\t */\n\t_validateSerializable (transaction, allTransactions) {\n\t\t// First validate REPEATABLE_READ requirements\n\t\tthis._validateRepeatableRead(transaction, allTransactions);\n\n\t\t// Check for read-write conflicts\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tconst conflictingWrites = this._findConflictingWritesToRead(transaction, readKey, allTransactions);\n\t\t\tif (conflictingWrites.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Serialization conflict: key '${readKey}' was written by concurrent transactions: ${conflictingWrites.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"serialization-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Check for write-read conflicts\n\t\tfor (const writeKey of transaction.writeSet) {\n\t\t\tconst conflictingReads = this._findConflictingReadsToWrite(transaction, writeKey, allTransactions);\n\t\t\tif (conflictingReads.length > 0) {\n\t\t\t\tthrow new TransactionError(\n\t\t\t\t\t`Serialization conflict: key '${writeKey}' was read by concurrent transactions: ${conflictingReads.join(\", \")}`,\n\t\t\t\t\ttransaction.id,\n\t\t\t\t\t\"serialization-conflict\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Find transactions that have conflicting writes to the same key\n\t * @param {string} excludeTransactionId - Transaction ID to exclude from search\n\t * @param {string} key - Key to check for conflicts\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingWrites (excludeTransactionId, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, transaction] of allTransactions) {\n\t\t\tif (txId !== excludeTransactionId &&\n\t\t\t\ttransaction.isActive() &&\n\t\t\t\ttransaction.writeSet.has(key)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Find transactions that wrote to a key this transaction read\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was read\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingWritesToRead (transaction, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\totherTx.writeSet.has(key) &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Find transactions that read a key this transaction wrote\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was written\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {string[]} Array of conflicting transaction IDs\n\t * @private\n\t */\n\t_findConflictingReadsToWrite (transaction, key, allTransactions) {\n\t\tconst conflicting = [];\n\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\totherTx.readSet.has(key) &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tconflicting.push(txId);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicting;\n\t}\n\n\t/**\n\t * Check if a read key has conflicts with other transactions\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Key that was read\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if conflict detected\n\t * @private\n\t */\n\t_hasReadSetConflict (transaction, key, allTransactions) {\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isCommitted() &&\n\t\t\t\totherTx.writeSet.has(key) &&\n\t\t\t\totherTx.startTime > transaction.startTime &&\n\t\t\t\totherTx.endTime < new Date()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if snapshot has conflicts indicating phantom reads\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if conflict detected\n\t * @private\n\t */\n\t_hasSnapshotConflict (transaction, key, expectedValue, allTransactions) {\n\t\t// Check if any other transaction modified this specific key\n\t\tif (this._hasReadSetConflict(transaction, key, allTransactions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for phantom reads in range-based operations\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id && this._transactionsOverlap(transaction, otherTx)) {\n\t\t\t\tif (this._hasPhantomConflict(transaction, otherTx, key, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for serialization anomalies specific to snapshots\n\t\tif (this._hasSerializationAnomalyInSnapshot(transaction, key, allTransactions)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if another transaction creates phantom reads for this transaction's snapshot\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {Transaction} otherTransaction - Other concurrent transaction\n\t * @param {string} key - Snapshot key\n\t * @param {*} expectedValue - Expected value from snapshot\n\t * @returns {boolean} True if phantom conflict detected\n\t * @private\n\t */\n\t_hasPhantomConflict (transaction, otherTransaction, key, expectedValue) {\n\t\tfor (const operation of otherTransaction.operations) {\n\t\t\tif (operation.type !== \"read\") {\n\t\t\t\tif (operation.key === key) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this.keyAnalyzer.isKeyInSnapshotRange(transaction, operation.key, key, expectedValue)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for serialization anomalies in snapshot data\n\t * @param {Transaction} transaction - Transaction with snapshot\n\t * @param {string} key - Snapshot key\n\t * @param {Map<string, Transaction>} allTransactions - All transactions\n\t * @returns {boolean} True if serialization anomaly detected\n\t * @private\n\t */\n\t_hasSerializationAnomalyInSnapshot (transaction, key, allTransactions) {\n\t\tfor (const [txId, otherTx] of allTransactions) {\n\t\t\tif (txId !== transaction.id &&\n\t\t\t\totherTx.isActive() &&\n\t\t\t\tthis._transactionsOverlap(transaction, otherTx)) {\n\n\t\t\t\tif (this._hasWriteSkewAnomaly(transaction, otherTx, key)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (this._hasDependencyCycle(transaction, otherTx)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for write-skew anomalies between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @param {string} key - Key being checked\n\t * @returns {boolean} True if write-skew detected\n\t * @private\n\t */\n\t_hasWriteSkewAnomaly (tx1, tx2, key) {\n\t\tconst tx1ReadsRelated = this._hasRelatedReads(tx1, key);\n\t\tconst tx2ReadsRelated = this._hasRelatedReads(tx2, key);\n\n\t\tif (!tx1ReadsRelated || !tx2ReadsRelated) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tx1Writes = Array.from(tx1.writeSet);\n\t\tconst tx2Writes = Array.from(tx2.writeSet);\n\t\tconst hasOverlappingWrites = tx1Writes.some(k => tx2Writes.includes(k));\n\n\t\tif (hasOverlappingWrites) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn tx1Writes.length > 0 && tx2Writes.length > 0;\n\t}\n\n\t/**\n\t * Check if transaction has reads related to a key\n\t * @param {Transaction} transaction - Transaction to check\n\t * @param {string} key - Reference key\n\t * @returns {boolean} True if has related reads\n\t * @private\n\t */\n\t_hasRelatedReads (transaction, key) {\n\t\tfor (const readKey of transaction.readSet) {\n\t\t\tif (this.keyAnalyzer.areKeysRelated(readKey, key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check for dependency cycles between transactions\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if dependency cycle detected\n\t * @private\n\t */\n\t_hasDependencyCycle (tx1, tx2) {\n\t\tconst tx1ReadsTx2Writes = this._readsOtherWrites(tx1, tx2);\n\t\tconst tx2ReadsTx1Writes = this._readsOtherWrites(tx2, tx1);\n\n\t\treturn tx1ReadsTx2Writes && tx2ReadsTx1Writes;\n\t}\n\n\t/**\n\t * Check if one transaction reads what another writes\n\t * @param {Transaction} reader - Reading transaction\n\t * @param {Transaction} writer - Writing transaction\n\t * @returns {boolean} True if dependency exists\n\t * @private\n\t */\n\t_readsOtherWrites (reader, writer) {\n\t\tfor (const readKey of reader.readSet) {\n\t\t\tif (writer.writeSet.has(readKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if two transactions have overlapping execution periods\n\t * @param {Transaction} tx1 - First transaction\n\t * @param {Transaction} tx2 - Second transaction\n\t * @returns {boolean} True if transactions overlap in time\n\t * @private\n\t */\n\t_transactionsOverlap (tx1, tx2) {\n\t\tif (!tx1.startTime || !tx2.startTime) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tx1Start = tx1.startTime.getTime();\n\t\tconst tx1End = tx1.endTime ? tx1.endTime.getTime() : Date.now();\n\t\tconst tx2Start = tx2.startTime.getTime();\n\t\tconst tx2End = tx2.endTime ? tx2.endTime.getTime() : Date.now();\n\n\t\treturn tx1Start < tx2End && tx2Start < tx1End;\n\t}\n}\n","import { TransactionError } from \"./errors.js\";\nimport { LockTypes } from \"./constants.js\";\nimport { Transaction } from \"./transaction-individual.js\";\nimport { LockManager } from \"./lock-manager.js\";\nimport { TransactionStatistics } from \"./transaction-statistics.js\";\nimport { DeadlockDetector } from \"./deadlock-detector.js\";\nimport { IsolationValidator } from \"./isolation-validator.js\";\n\n/**\n * Refactored transaction manager for coordinating multiple transactions\n * Delegates complex operations to specialized classes\n */\nexport class TransactionManager {\n\tconstructor () {\n\t\t// Active transactions\n\t\tthis.transactions = new Map();\n\n\t\t// Lock manager for concurrency control\n\t\tthis.lockManager = new LockManager();\n\n\t\t// Global transaction counter\n\t\tthis.transactionCounter = 0;\n\n\t\t// Specialized components\n\t\tthis.statistics = new TransactionStatistics();\n\t\tthis.deadlockDetector = new DeadlockDetector(this.lockManager);\n\t\tthis.isolationValidator = new IsolationValidator();\n\t}\n\n\t/**\n\t * Begin a new transaction\n\t * @param {Object} [options={}] - Transaction options\n\t * @returns {Transaction} New transaction instance\n\t */\n\tbegin (options = {}) {\n\t\tconst transaction = new Transaction(undefined, options);\n\t\ttransaction.begin();\n\n\t\tthis.transactions.set(transaction.id, transaction);\n\t\tthis.transactionCounter++;\n\t\tthis.statistics.incrementTotal();\n\t\tthis.statistics.incrementActive();\n\n\t\treturn transaction;\n\t}\n\n\t/**\n\t * Get transaction by ID\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {Transaction|undefined} Transaction instance\n\t */\n\tgetTransaction (transactionId) {\n\t\treturn this.transactions.get(transactionId);\n\t}\n\n\t/**\n\t * Commit a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @param {Object} [context] - Commit context\n\t * @returns {Transaction} Committed transaction\n\t * @throws {TransactionError} If transaction not found or commit fails\n\t */\n\tasync commit (transactionId, context = {}) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"commit\");\n\t\t}\n\n\t\ttry {\n\t\t\t// Acquire locks for all writes\n\t\t\tfor (const key of transaction.writeSet) {\n\t\t\t\tawait this.lockManager.acquireLock(transactionId, key, LockTypes.EXCLUSIVE);\n\t\t\t}\n\n\t\t\t// Perform isolation level checks using specialized validator\n\t\t\tthis.isolationValidator.validateIsolation(transaction, this.transactions);\n\n\t\t\t// Commit the transaction\n\t\t\ttransaction.commit(context);\n\n\t\t\t// Update statistics\n\t\t\tthis.statistics.incrementCommitted();\n\t\t\tthis.statistics.decrementActive();\n\t\t\tthis.statistics.updateDurationStats(transaction);\n\n\t\t\treturn transaction;\n\t\t} catch (error) {\n\t\t\t// Auto-abort on failure\n\t\t\tthis.abort(transactionId, error.message);\n\t\t\tthrow error;\n\t\t/* c8 ignore next */ } finally {\n\t\t\t// Always release locks\n\t\t\tthis.lockManager.releaseAllLocks(transactionId);\n\t\t}\n\t}\n\n\t/**\n\t * Abort a transaction\n\t * @param {string} transactionId - Transaction ID\n\t * @param {string} [reason] - Reason for abort\n\t * @returns {Transaction} Aborted transaction\n\t * @throws {TransactionError} If transaction not found\n\t */\n\tabort (transactionId, reason = \"Manual abort\") {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"abort\");\n\t\t}\n\n\t\ttransaction.abort(reason);\n\n\t\t// Release all locks\n\t\tthis.lockManager.releaseAllLocks(transactionId);\n\n\t\t// Update statistics\n\t\tthis.statistics.incrementAborted();\n\t\tthis.statistics.decrementActive();\n\t\tthis.statistics.updateDurationStats(transaction);\n\n\t\treturn transaction;\n\t}\n\n\t/**\n\t * Clean up completed transactions\n\t * @param {number} [maxAge=3600000] - Maximum age in milliseconds (default: 1 hour)\n\t * @returns {number} Number of transactions cleaned up\n\t */\n\tcleanup (maxAge = 3600000) {\n\t\tconst cutoffTime = Date.now() - maxAge;\n\t\tlet cleaned = 0;\n\n\t\tfor (const [id, transaction] of this.transactions) {\n\t\t\t// Special case: maxAge of 0 means clean ALL completed transactions\n\t\t\tif (transaction.endTime && (maxAge === 0 || transaction.endTime.getTime() < cutoffTime)) {\n\t\t\t\tthis.transactions.delete(id);\n\t\t\t\tcleaned++;\n\t\t\t}\n\t\t}\n\n\t\treturn cleaned;\n\t}\n\n\t/**\n\t * Get all active transactions\n\t * @returns {Transaction[]} Array of active transactions\n\t */\n\tgetActiveTransactions () {\n\t\treturn Array.from(this.transactions.values()).filter(t => t.isActive());\n\t}\n\n\t/**\n\t * Check for deadlocks using specialized detector\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tdetectDeadlocks (options = {}) {\n\t\tconst activeTransactions = this.getActiveTransactions();\n\n\t\treturn this.deadlockDetector.detectDeadlocks(activeTransactions, options);\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst activeCount = this.getActiveTransactions().length;\n\t\tconst lockStats = this.lockManager.getStats();\n\n\t\treturn this.statistics.getStats(lockStats, activeCount, this.transactionCounter);\n\t}\n\n\t/**\n\t * Reset all statistics\n\t */\n\tresetStats () {\n\t\tthis.statistics.reset();\n\t}\n\n\t/**\n\t * Get access to specialized components for advanced usage\n\t * @returns {Object} Specialized components\n\t */\n\tgetComponents () {\n\t\treturn {\n\t\t\tstatistics: this.statistics,\n\t\t\tdeadlockDetector: this.deadlockDetector,\n\t\t\tisolationValidator: this.isolationValidator,\n\t\t\tlockManager: this.lockManager\n\t\t};\n\t}\n\n\t/**\n\t * Validate isolation for a specific transaction (for testing/debugging)\n\t * @param {string} transactionId - Transaction ID to validate\n\t * @throws {TransactionError} If validation fails\n\t */\n\tvalidateTransactionIsolation (transactionId) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\tthrow new TransactionError(`Transaction ${transactionId} not found`, transactionId, \"validate\");\n\t\t}\n\n\t\tthis.isolationValidator.validateIsolation(transaction, this.transactions);\n\t}\n\n\t/**\n\t * Force deadlock detection and return results\n\t * @param {Object} [options={}] - Detection options\n\t * @returns {Object} Deadlock detection results\n\t */\n\tcheckForDeadlocks (options = {}) {\n\t\treturn this.detectDeadlocks(options);\n\t}\n\n\t/**\n\t * Get detailed transaction information for debugging\n\t * @param {string} transactionId - Transaction ID\n\t * @returns {Object|null} Detailed transaction info or null if not found\n\t */\n\tgetTransactionDetails (transactionId) {\n\t\tconst transaction = this.transactions.get(transactionId);\n\t\tif (!transaction) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...transaction.getStats(),\n\t\t\tlockInfo: this.lockManager.getStats().recordsLocked.filter(\n\t\t\t\tlock => lock.holders.includes(transactionId)\n\t\t\t)\n\t\t};\n\t}\n\n\t/**\n\t * Get system health information\n\t * @returns {Object} System health metrics\n\t */\n\tgetSystemHealth () {\n\t\tconst stats = this.getStats();\n\t\tconst deadlockResults = this.detectDeadlocks();\n\n\t\treturn {\n\t\t\tactiveTransactions: stats.activeTransactions,\n\t\t\ttotalTransactions: stats.totalTransactions,\n\t\t\tcommitRate: stats.totalTransactions > 0 ? stats.committedTransactions / stats.totalTransactions : 0,\n\t\t\taverageDuration: stats.averageDuration,\n\t\t\thasDeadlocks: deadlockResults.deadlocks.length > 0,\n\t\t\tsuspectedDeadlocks: deadlockResults.suspectedDeadlocks.length,\n\t\t\ttimeoutVictims: deadlockResults.timeoutVictims.length,\n\t\t\ttotalLocks: stats.lockStats.totalLocks,\n\t\t\tlockUtilization: stats.lockStats.totalLocks > 0 ? stats.lockStats.uniqueHolders / stats.lockStats.totalLocks : 0\n\t\t};\n\t}\n}\n","/**\n * Query operation types\n */\nexport const QueryTypes = {\n\tFIND: \"find\",\n\tFILTER: \"filter\",\n\tSEARCH: \"search\",\n\tWHERE: \"where\",\n\tSORT: \"sort\",\n\tLIMIT: \"limit\",\n\tAGGREGATE: \"aggregate\"\n};\n\n/**\n * Cost estimation factors\n */\nexport const CostFactors = {\n\tINDEX_LOOKUP: 1,\n\tFULL_SCAN: 100,\n\tFILTER_EVALUATION: 10,\n\tSORT_OPERATION: 50,\n\tMEMORY_ACCESS: 1,\n\tCOMPARISON: 2,\n\tREGEX_MATCH: 20\n};\n\n/**\n * Query execution plan step\n */\nexport class QueryPlanStep {\n\t/**\n\t * @param {string} operation - Operation type\n\t * @param {Object} [options={}] - Operation options\n\t * @param {number} [estimatedCost=0] - Estimated cost of this step\n\t * @param {number} [estimatedRows=0] - Estimated number of rows processed\n\t */\n\tconstructor (operation, options = {}, estimatedCost = 0, estimatedRows = 0) {\n\t\tthis.operation = operation;\n\t\tthis.options = options;\n\t\tthis.estimatedCost = estimatedCost;\n\t\tthis.estimatedRows = estimatedRows;\n\t\tthis.actualCost = null;\n\t\tthis.actualRows = null;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\t}\n\n\t/**\n\t * Start execution timing\n\t */\n\tstartExecution () {\n\t\tthis.startTime = Date.now();\n\t}\n\n\t/**\n\t * End execution timing\n\t * @param {number} actualRows - Actual number of rows processed\n\t */\n\tendExecution (actualRows) {\n\t\tthis.endTime = Date.now();\n\t\tthis.actualCost = this.endTime - this.startTime;\n\t\tthis.actualRows = actualRows;\n\t}\n\n\t/**\n\t * Get execution statistics\n\t * @returns {Object} Execution statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\toperation: this.operation,\n\t\t\toptions: this.options,\n\t\t\testimatedCost: this.estimatedCost,\n\t\t\testimatedRows: this.estimatedRows,\n\t\t\tactualCost: this.actualCost,\n\t\t\tactualRows: this.actualRows,\n\t\t\tcostAccuracy: this.actualCost && this.estimatedCost ?\n\t\t\t\tMath.abs(this.actualCost - this.estimatedCost) / this.estimatedCost :\n\t\t\t\tnull,\n\t\t\trowAccuracy: this.actualRows !== null && this.estimatedRows ?\n\t\t\t\tMath.abs(this.actualRows - this.estimatedRows) / this.estimatedRows :\n\t\t\t\tnull\n\t\t};\n\t}\n}\n\n/**\n * Query execution plan\n */\nexport class QueryPlan {\n\t/**\n\t * @param {string} queryId - Unique query identifier\n\t * @param {Object} originalQuery - Original query object\n\t */\n\tconstructor (queryId, originalQuery) {\n\t\tthis.queryId = queryId;\n\t\tthis.originalQuery = originalQuery;\n\t\tthis.steps = [];\n\t\tthis.totalEstimatedCost = 0;\n\t\tthis.totalEstimatedRows = 0;\n\t\tthis.totalActualCost = null;\n\t\tthis.totalActualRows = null;\n\t\tthis.createdAt = new Date();\n\t\tthis.executedAt = null;\n\t\tthis.completedAt = null;\n\t}\n\n\t/**\n\t * Add a step to the execution plan\n\t * @param {QueryPlanStep} step - Query plan step\n\t * @returns {QueryPlan} This plan for chaining\n\t */\n\taddStep (step) {\n\t\tthis.steps.push(step);\n\t\tthis.totalEstimatedCost += step.estimatedCost;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start plan execution\n\t */\n\tstartExecution () {\n\t\tthis.executedAt = new Date();\n\t}\n\n\t/**\n\t * Complete plan execution\n\t * @param {number} actualRows - Final number of rows returned\n\t */\n\tcompleteExecution (actualRows) {\n\t\tthis.completedAt = new Date();\n\t\tthis.totalActualRows = actualRows;\n\t\tthis.totalActualCost = this.completedAt.getTime() - (this.executedAt?.getTime() || this.createdAt.getTime());\n\t}\n\n\t/**\n\t * Get execution statistics\n\t * @returns {Object} Execution statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tqueryId: this.queryId,\n\t\t\toriginalQuery: this.originalQuery,\n\t\t\tstepCount: this.steps.length,\n\t\t\ttotalEstimatedCost: this.totalEstimatedCost,\n\t\t\ttotalEstimatedRows: this.totalEstimatedRows,\n\t\t\ttotalActualCost: this.totalActualCost,\n\t\t\ttotalActualRows: this.totalActualRows,\n\t\t\tcreatedAt: this.createdAt,\n\t\t\texecutedAt: this.executedAt,\n\t\t\tcompletedAt: this.completedAt,\n\t\t\tsteps: this.steps.map(step => step.getStats()),\n\t\t\tefficiency: this.totalActualCost && this.totalEstimatedCost ?\n\t\t\t\tthis.totalEstimatedCost / this.totalActualCost :\n\t\t\t\tnull\n\t\t};\n\t}\n\n\t/**\n\t * Export plan for debugging\n\t * @returns {Object} Exportable plan data\n\t */\n\texport () {\n\t\treturn {\n\t\t\t...this.getStats(),\n\t\t\texplanation: this._generateExplanation()\n\t\t};\n\t}\n\n\t/**\n\t * Generate human-readable explanation of the plan\n\t * @returns {string[]} Array of explanation lines\n\t * @private\n\t */\n\t_generateExplanation () {\n\t\tconst explanation = [];\n\n\t\texplanation.push(`Query Plan for: ${JSON.stringify(this.originalQuery)}`);\n\t\texplanation.push(`Estimated cost: ${this.totalEstimatedCost}, rows: ${this.totalEstimatedRows}`);\n\n\t\tif (this.totalActualCost !== null) {\n\t\t\texplanation.push(`Actual cost: ${this.totalActualCost}, rows: ${this.totalActualRows}`);\n\t\t}\n\n\t\texplanation.push(\"\");\n\t\texplanation.push(\"Execution steps:\");\n\n\t\tthis.steps.forEach((step, index) => {\n\t\t\tconst stats = step.getStats();\n\t\t\texplanation.push(`${index + 1}. ${stats.operation} (cost: ${stats.estimatedCost}, rows: ${stats.estimatedRows})`);\n\n\t\t\tif (stats.actualCost !== null) {\n\t\t\t\texplanation.push(`   Actual: cost: ${stats.actualCost}, rows: ${stats.actualRows}`);\n\t\t\t}\n\t\t});\n\n\t\treturn explanation;\n\t}\n}\n\n/**\n * Statistics about data distribution for cost estimation\n */\nexport class DataStatistics {\n\tconstructor () {\n\t\tthis.totalRecords = 0;\n\t\tthis.indexStatistics = new Map(); // Map<indexName, {cardinality, selectivity, histogram}>\n\t\tthis.fieldStatistics = new Map(); // Map<fieldName, {nullCount, uniqueValues, dataType, avgLength}>\n\t\tthis.lastUpdated = new Date();\n\t}\n\n\t/**\n\t * Update statistics from current data\n\t * @param {Map} records - Current record data\n\t * @param {Map} indexes - Current index data\n\t */\n\tupdate (records, indexes) {\n\t\tthis.totalRecords = records.size;\n\t\tthis.lastUpdated = new Date();\n\n\t\t// Update field statistics\n\t\tthis._updateFieldStatistics(records);\n\n\t\t// Update index statistics\n\t\tthis._updateIndexStatistics(indexes);\n\t}\n\n\t/**\n\t * Get selectivity estimate for a field value\n\t * @param {string} fieldName - Field name\n\t * @returns {number} Selectivity estimate (0-1)\n\t */\n\tgetSelectivity (fieldName) {\n\t\tconst fieldStats = this.fieldStatistics.get(fieldName);\n\t\tif (!fieldStats) {\n\t\t\treturn 0.1; // Default selectivity\n\t\t}\n\n\t\t// Simple selectivity estimation\n\t\treturn 1 / (fieldStats.uniqueValues || 1);\n\t}\n\n\t/**\n\t * Get cardinality estimate for an index\n\t * @param {string} indexName - Index name\n\t * @returns {number} Cardinality estimate\n\t */\n\tgetIndexCardinality (indexName) {\n\t\tconst indexStats = this.indexStatistics.get(indexName);\n\n\t\treturn indexStats ? indexStats.cardinality : this.totalRecords;\n\t}\n\n\t/**\n\t * Update field statistics\n\t * @param {Map} records - Record data\n\t * @private\n\t */\n\t_updateFieldStatistics (records) {\n\t\tconst fieldData = new Map();\n\n\t\t// Collect field data\n\t\tfor (const record of records.values()) {\n\t\t\tfor (const [fieldName, value] of Object.entries(record)) {\n\t\t\t\tif (!fieldData.has(fieldName)) {\n\t\t\t\t\tfieldData.set(fieldName, {\n\t\t\t\t\t\tvalues: new Set(),\n\t\t\t\t\t\tnullCount: 0,\n\t\t\t\t\t\ttotalLength: 0,\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst data = fieldData.get(fieldName);\n\t\t\t\tdata.count++;\n\n\t\t\t\tif (value === null || value === undefined) {\n\t\t\t\t\tdata.nullCount++;\n\t\t\t\t} else {\n\t\t\t\t\tdata.values.add(value);\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\tdata.totalLength += value.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Convert to statistics\n\t\tfor (const [fieldName, data] of fieldData) {\n\t\t\tthis.fieldStatistics.set(fieldName, {\n\t\t\t\tuniqueValues: data.values.size,\n\t\t\t\tnullCount: data.nullCount,\n\t\t\t\tdataType: this._inferDataType(data.values),\n\t\t\t\tavgLength: data.totalLength / data.count || 0,\n\t\t\t\tcardinality: data.values.size / this.totalRecords\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Update index statistics\n\t * @param {Map} indexes - Index data\n\t * @private\n\t */\n\t_updateIndexStatistics (indexes) {\n\t\tfor (const [indexName, indexStorage] of indexes) {\n\t\t\tconst stats = indexStorage.getStats();\n\t\t\tthis.indexStatistics.set(indexName, {\n\t\t\t\tcardinality: stats.totalKeys,\n\t\t\t\tselectivity: stats.totalKeys / this.totalRecords || 1,\n\t\t\t\tavgEntriesPerKey: stats.totalEntries / stats.totalKeys || 1,\n\t\t\t\tmemoryUsage: stats.memoryUsage\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Infer data type from values\n\t * @param {Set} values - Set of values\n\t * @returns {string} Inferred data type\n\t * @private\n\t */\n\t_inferDataType (values) {\n\t\tconst sample = Array.from(values).slice(0, 10);\n\t\tconst types = new Set(sample.map(v => typeof v));\n\n\t\tif (types.size === 1) {\n\t\t\treturn types.values().next().value;\n\t\t}\n\n\t\treturn \"mixed\";\n\t}\n}\n\n/**\n * Query optimizer that creates efficient execution plans\n */\nexport class QueryOptimizer {\n\t/**\n\t * @param {Object} [options={}] - Optimizer options\n\t * @param {boolean} [options.collectStatistics=true] - Whether to collect query statistics\n\t * @param {number} [options.statisticsUpdateInterval=1000] - How often to update statistics (queries)\n\t */\n\tconstructor (options = {}) {\n\t\tthis.options = {\n\t\t\tcollectStatistics: true,\n\t\t\tstatisticsUpdateInterval: 1000,\n\t\t\t...options\n\t\t};\n\n\t\tthis.statistics = new DataStatistics();\n\t\tthis.queryCounter = 0;\n\t\tthis.planCache = new Map();\n\t\tthis.executionHistory = [];\n\t\tthis.maxHistorySize = 1000;\n\t\tthis.cacheHits = 0;\n\t\tthis.totalCacheRequests = 0;\n\n\t\t// Cost model adjustments based on learning\n\t\tthis.costAdjustments = new Map([\n\t\t\t[\"INDEX_LOOKUP\", 1.0],\n\t\t\t[\"FULL_SCAN\", 1.0],\n\t\t\t[\"FILTER_EVALUATION\", 1.0],\n\t\t\t[\"SORT_OPERATION\", 1.0],\n\t\t\t[\"MEMORY_ACCESS\", 1.0],\n\t\t\t[\"COMPARISON\", 1.0],\n\t\t\t[\"REGEX_MATCH\", 1.0]\n\t\t]);\n\t\tthis.lastCostModelUpdate = new Date();\n\t}\n\n\t/**\n\t * Create an optimized query plan\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Query context (available indexes, etc.)\n\t * @returns {QueryPlan} Optimized query plan\n\t */\n\tcreatePlan (query, context) {\n\t\tconst queryId = `query_${++this.queryCounter}`;\n\t\tconst plan = new QueryPlan(queryId, query);\n\n\t\t// Track cache request\n\t\tthis.totalCacheRequests++;\n\n\t\t// Check plan cache first\n\t\tconst cacheKey = this._generateCacheKey(query);\n\t\tconst cachedPlan = this.planCache.get(cacheKey);\n\t\tif (cachedPlan && this._isCacheValid(cachedPlan)) {\n\t\t\t// Cache hit\n\t\t\tthis.cacheHits++;\n\n\t\t\treturn this._copyPlan(cachedPlan, queryId);\n\t\t}\n\n\t\t// Cache miss - create optimized plan\n\t\tthis._buildOptimizedPlan(plan, query, context);\n\n\t\t// Cache the plan\n\t\tthis.planCache.set(cacheKey, plan);\n\n\t\treturn plan;\n\t}\n\n\t/**\n\t * Update statistics with current data\n\t * @param {Map} records - Current records\n\t * @param {Map} indexes - Current indexes\n\t */\n\tupdateStatistics (records, indexes) {\n\t\tthis.statistics.update(records, indexes);\n\t}\n\n\t/**\n\t * Record plan execution for learning\n\t * @param {QueryPlan} plan - Executed plan\n\t */\n\trecordExecution (plan) {\n\t\tif (!this.options.collectStatistics) return;\n\n\t\tthis.executionHistory.push(plan.getStats());\n\n\t\t// Limit history size\n\t\tif (this.executionHistory.length > this.maxHistorySize) {\n\t\t\tthis.executionHistory.shift();\n\t\t}\n\n\t\t// Periodically update statistics\n\t\tif (this.queryCounter % this.options.statisticsUpdateInterval === 0) {\n\t\t\tthis._updateCostModel();\n\t\t}\n\t}\n\n\t/**\n\t * Get optimal execution strategy for a query\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Available indexes and options\n\t * @returns {Object} Execution strategy\n\t */\n\tgetOptimalStrategy (query, context) {\n\t\tconst strategies = this._generateStrategies(query, context);\n\n\t\t// Estimate costs for each strategy\n\t\tconst costedStrategies = strategies.map(strategy => ({\n\t\t\t...strategy,\n\t\t\testimatedCost: this._estimateStrategyCost(strategy)\n\t\t}));\n\n\t\t// Sort by estimated cost\n\t\tcostedStrategies.sort((a, b) => a.estimatedCost - b.estimatedCost);\n\n\t\treturn costedStrategies[0] || { type: \"full_scan\", estimatedCost: this._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords };\n\t}\n\n\t/**\n\t * Get optimizer statistics\n\t * @returns {Object} Optimizer statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tqueryCounter: this.queryCounter,\n\t\t\tplanCacheSize: this.planCache.size,\n\t\t\texecutionHistorySize: this.executionHistory.length,\n\t\t\tdataStatistics: {\n\t\t\t\ttotalRecords: this.statistics.totalRecords,\n\t\t\t\tlastUpdated: this.statistics.lastUpdated,\n\t\t\t\tindexCount: this.statistics.indexStatistics.size,\n\t\t\t\tfieldCount: this.statistics.fieldStatistics.size\n\t\t\t},\n\t\t\taverageQueryCost: this._calculateAverageQueryCost(),\n\t\t\tcacheHitRate: this._calculateCacheHitRate(),\n\t\t\tcacheStatistics: {\n\t\t\t\ttotalRequests: this.totalCacheRequests,\n\t\t\t\thits: this.cacheHits,\n\t\t\t\tmisses: this.totalCacheRequests - this.cacheHits,\n\t\t\t\thitRate: this._calculateCacheHitRate()\n\t\t\t},\n\t\t\tcostModel: {\n\t\t\t\tadjustments: Object.fromEntries(this.costAdjustments),\n\t\t\t\tlastUpdated: this.lastCostModelUpdate\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Clear optimizer caches and history\n\t */\n\tclear () {\n\t\tthis.planCache.clear();\n\t\tthis.executionHistory = [];\n\t\tthis.queryCounter = 0;\n\t\tthis.cacheHits = 0;\n\t\tthis.totalCacheRequests = 0;\n\n\t\t// Reset cost adjustments to default values\n\t\tthis.costAdjustments.clear();\n\t\tthis.costAdjustments.set(\"INDEX_LOOKUP\", 1.0);\n\t\tthis.costAdjustments.set(\"FULL_SCAN\", 1.0);\n\t\tthis.costAdjustments.set(\"FILTER_EVALUATION\", 1.0);\n\t\tthis.costAdjustments.set(\"SORT_OPERATION\", 1.0);\n\t\tthis.costAdjustments.set(\"MEMORY_ACCESS\", 1.0);\n\t\tthis.costAdjustments.set(\"COMPARISON\", 1.0);\n\t\tthis.costAdjustments.set(\"REGEX_MATCH\", 1.0);\n\t\tthis.lastCostModelUpdate = new Date();\n\t}\n\n\t/**\n\t * Build optimized execution plan\n\t * @param {QueryPlan} plan - Plan to build\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Query context\n\t * @private\n\t */\n\t_buildOptimizedPlan (plan, query, context) {\n\t\tconst strategy = this.getOptimalStrategy(query, context);\n\n\t\tswitch (strategy.type) {\n\t\t\tcase \"index_lookup\":\n\t\t\t\tthis._addIndexLookupSteps(plan, strategy);\n\t\t\t\tbreak;\n\t\t\tcase \"filtered_scan\":\n\t\t\t\tthis._addFilteredScanSteps(plan, query, strategy);\n\t\t\t\tbreak;\n\t\t\tcase \"full_scan\":\n\t\t\t\tthis._addFullScanSteps(plan);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._addFullScanSteps(plan);\n\t\t}\n\n\t\t// Add post-processing steps\n\t\tthis._addPostProcessingSteps(plan, query);\n\t}\n\n\t/**\n\t * Add index lookup steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} strategy - Execution strategy\n\t * @private\n\t */\n\t_addIndexLookupSteps (plan, strategy) {\n\t\tconst step = new QueryPlanStep(\n\t\t\t\"index_lookup\",\n\t\t\t{\n\t\t\t\tindexName: strategy.indexName,\n\t\t\t\tlookupKey: strategy.lookupKey\n\t\t\t},\n\t\t\tthis._getAdjustedCostFactor(\"INDEX_LOOKUP\"),\n\t\t\tthis._estimateIndexLookupRows(strategy.indexName)\n\t\t);\n\n\t\tplan.addStep(step);\n\t}\n\n\t/**\n\t * Add filtered scan steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} query - Query object\n\t * @param {Object} strategy - Execution strategy\n\t * @private\n\t */\n\t_addFilteredScanSteps (plan, query, strategy) {\n\t\t// First, index lookup for partial filtering\n\t\tif (strategy.indexName) {\n\t\t\tthis._addIndexLookupSteps(plan, strategy);\n\t\t}\n\n\t\t// Then, filter remaining records\n\t\tconst filterStep = new QueryPlanStep(\n\t\t\t\"filter\",\n\t\t\t{ predicate: query.filter || query.where },\n\t\t\tthis._getAdjustedCostFactor(\"FILTER_EVALUATION\") * this.statistics.totalRecords,\n\t\t\tthis.statistics.totalRecords * 0.1 // Assume 10% selectivity\n\t\t);\n\n\t\tplan.addStep(filterStep);\n\t}\n\n\t/**\n\t * Add full scan steps to plan\n\t * @param {QueryPlan} plan - Query plan\n\t * @private\n\t */\n\t_addFullScanSteps (plan) {\n\t\tconst step = new QueryPlanStep(\n\t\t\t\"full_scan\",\n\t\t\t{ scanType: \"sequential\" },\n\t\t\tthis._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords,\n\t\t\tthis.statistics.totalRecords\n\t\t);\n\n\t\tplan.addStep(step);\n\t}\n\n\t/**\n\t * Add post-processing steps (sort, limit, etc.)\n\t * @param {QueryPlan} plan - Query plan\n\t * @param {Object} query - Query object\n\t * @private\n\t */\n\t_addPostProcessingSteps (plan, query) {\n\t\t// Add sort step if needed\n\t\tif (query.sort || query.sortBy) {\n\t\t\tconst sortStep = new QueryPlanStep(\n\t\t\t\t\"sort\",\n\t\t\t\t{ sortField: query.sortBy, sortFunction: query.sort },\n\t\t\t\tthis._getAdjustedCostFactor(\"SORT_OPERATION\") * plan.totalEstimatedRows,\n\t\t\t\tplan.totalEstimatedRows\n\t\t\t);\n\t\t\tplan.addStep(sortStep);\n\t\t}\n\n\t\t// Add limit step if needed\n\t\tif (query.limit) {\n\t\t\tconst limitStep = new QueryPlanStep(\n\t\t\t\t\"limit\",\n\t\t\t\t{ offset: query.offset || 0, max: query.limit },\n\t\t\t\tthis._getAdjustedCostFactor(\"MEMORY_ACCESS\"),\n\t\t\t\tMath.min(query.limit, plan.totalEstimatedRows)\n\t\t\t);\n\t\t\tplan.addStep(limitStep);\n\t\t}\n\t}\n\n\t/**\n\t * Generate possible execution strategies\n\t * @param {Object} query - Query object\n\t * @param {Object} context - Available indexes and options\n\t * @returns {Array} Array of possible strategies\n\t * @private\n\t */\n\t_generateStrategies (query, context) {\n\t\tconst strategies = [];\n\n\t\t// Strategy 1: Full scan (always available)\n\t\tstrategies.push({ type: \"full_scan\" });\n\n\t\t// Strategy 2: Index-based lookup\n\t\tif (query.find && context.indexManager) {\n\t\t\tconst fields = Object.keys(query.find);\n\t\t\tconst optimalIndex = context.indexManager.getOptimalIndex(fields);\n\n\t\t\tif (optimalIndex) {\n\t\t\t\tstrategies.push({\n\t\t\t\t\ttype: \"index_lookup\",\n\t\t\t\t\tindexName: optimalIndex,\n\t\t\t\t\tlookupKey: this._generateLookupKey(query.find, fields)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Strategy 3: Filtered scan with partial index\n\t\tif ((query.filter || query.where) && context.indexManager) {\n\t\t\tconst availableIndexes = context.indexManager.listIndexes();\n\n\t\t\tfor (const indexName of availableIndexes) {\n\t\t\t\tstrategies.push({\n\t\t\t\t\ttype: \"filtered_scan\",\n\t\t\t\t\tindexName,\n\t\t\t\t\tpartialFilter: true\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn strategies;\n\t}\n\n\t/**\n\t * Estimate cost of an execution strategy\n\t * @param {Object} strategy - Execution strategy\n\t * @returns {number} Estimated cost\n\t * @private\n\t */\n\t_estimateStrategyCost (strategy) {\n\t\tswitch (strategy.type) {\n\t\t\tcase \"index_lookup\":\n\t\t\t\treturn this._getAdjustedCostFactor(\"INDEX_LOOKUP\") +\n\t\t\t\t\tthis._estimateIndexLookupRows(strategy.indexName, strategy.lookupKey) * this._getAdjustedCostFactor(\"MEMORY_ACCESS\");\n\n\t\t\tcase \"filtered_scan\": {\n\t\t\t\tconst indexCost = strategy.indexName ? this._getAdjustedCostFactor(\"INDEX_LOOKUP\") : 0;\n\t\t\t\tconst filterCost = this._getAdjustedCostFactor(\"FILTER_EVALUATION\") * this.statistics.totalRecords;\n\n\t\t\t\treturn indexCost + filterCost;\n\t\t\t}\n\n\t\t\tcase \"full_scan\":\n\t\t\t\treturn this._getAdjustedCostFactor(\"FULL_SCAN\") * this.statistics.totalRecords;\n\n\t\t\tdefault:\n\t\t\t\treturn Number.MAX_SAFE_INTEGER;\n\t\t}\n\t}\n\n\t/**\n\t * Get cost factor adjusted by learned performance data\n\t * @param {string} factorName - Name of the cost factor\n\t * @returns {number} Adjusted cost factor\n\t * @private\n\t */\n\t_getAdjustedCostFactor (factorName) {\n\t\tconst baseCost = CostFactors[factorName] || 1;\n\t\tconst adjustment = this.costAdjustments.get(factorName) || 1.0;\n\n\t\treturn baseCost * adjustment;\n\t}\n\n\t/**\n\t * Estimate number of rows returned by index lookup\n\t * @param {string} indexName - Index name\n\t * @returns {number} Estimated row count\n\t * @private\n\t */\n\t_estimateIndexLookupRows (indexName) {\n\t\tconst indexStats = this.statistics.indexStatistics.get(indexName);\n\t\tif (!indexStats) {\n\t\t\treturn this.statistics.totalRecords * 0.1; // Default 10%\n\t\t}\n\n\t\treturn Math.max(1, this.statistics.totalRecords / indexStats.cardinality);\n\t}\n\n\t/**\n\t * Generate cache key for query\n\t * @param {Object} query - Query object\n\t * @returns {string} Cache key\n\t * @private\n\t */\n\t_generateCacheKey (query) {\n\t\treturn JSON.stringify(query);\n\t}\n\n\t/**\n\t * Check if cached plan is still valid\n\t * @param {QueryPlan} cachedPlan - Cached plan\n\t * @returns {boolean} True if cache is valid\n\t * @private\n\t */\n\t_isCacheValid (cachedPlan) {\n\t\t// Simple cache invalidation based on time\n\t\tconst maxAge = 5 * 60 * 1000; // 5 minutes\n\n\t\treturn Date.now() - cachedPlan.createdAt.getTime() < maxAge;\n\t}\n\n\t/**\n\t * Copy a cached plan with new ID\n\t * @param {QueryPlan} originalPlan - Original plan\n\t * @param {string} newQueryId - New query ID\n\t * @returns {QueryPlan} Copied plan\n\t * @private\n\t */\n\t_copyPlan (originalPlan, newQueryId) {\n\t\tconst newPlan = new QueryPlan(newQueryId, originalPlan.originalQuery);\n\n\t\tfor (const step of originalPlan.steps) {\n\t\t\tconst newStep = new QueryPlanStep(\n\t\t\t\tstep.operation,\n\t\t\t\tstep.options,\n\t\t\t\tstep.estimatedCost,\n\t\t\t\tstep.estimatedRows\n\t\t\t);\n\t\t\tnewPlan.addStep(newStep);\n\t\t}\n\n\t\treturn newPlan;\n\t}\n\n\t/**\n\t * Generate lookup key from query criteria\n\t * @param {Object} criteria - Query criteria\n\t * @param {string[]} fields - Field names\n\t * @returns {string} Lookup key\n\t * @private\n\t */\n\t_generateLookupKey (criteria, fields) {\n\t\treturn fields.sort().map(field => String(criteria[field])).join(\"|\");\n\t}\n\n\t/**\n\t * Update cost model based on execution history\n\t * @private\n\t */\n\t_updateCostModel () {\n\t\tif (this.executionHistory.length < 10) {\n\t\t\treturn; // Need sufficient data for meaningful analysis\n\t\t}\n\n\t\tthis.lastCostModelUpdate = new Date();\n\n\t\t// Analyze each operation type separately\n\t\tconst operationStats = this._analyzeOperationPerformance();\n\n\t\t// Update cost adjustments based on performance analysis\n\t\tfor (const [operation, stats] of operationStats) {\n\t\t\tif (stats.sampleSize >= 3) { // Only process operations with sufficient data\n\t\t\t\tconst currentAdjustment = this.costAdjustments.get(operation) || 1.0;\n\t\t\t\tlet newAdjustment = currentAdjustment;\n\n\t\t\t\t// Calculate performance ratio (actual vs estimated)\n\t\t\t\tconst performanceRatio = stats.avgActualCost / stats.avgEstimatedCost;\n\n\t\t\t\tif (stats.consistency > 0.7) { // Only adjust if performance is consistent\n\t\t\t\t\t// Gradually adjust towards the observed performance\n\t\t\t\t\tconst learningRate = 0.1; // Conservative learning rate\n\t\t\t\t\tnewAdjustment = currentAdjustment * (1 + learningRate * (performanceRatio - 1));\n\n\t\t\t\t\t// Clamp adjustments to reasonable bounds\n\t\t\t\t\tnewAdjustment = Math.max(0.1, Math.min(10.0, newAdjustment));\n\n\t\t\t\t\tthis.costAdjustments.set(operation, newAdjustment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clear old execution history to prevent memory bloat\n\t\tif (this.executionHistory.length > this.maxHistorySize * 0.8) {\n\t\t\tthis.executionHistory = this.executionHistory.slice(-Math.floor(this.maxHistorySize * 0.6));\n\t\t}\n\t}\n\n\t/**\n\t * Analyze operation performance from execution history\n\t * @returns {Map} Map of operation -> performance statistics\n\t * @private\n\t */\n\t_analyzeOperationPerformance () {\n\t\tconst operationStats = new Map();\n\n\t\t// Process each execution in history\n\t\tfor (const execution of this.executionHistory) {\n\t\t\tif (execution.steps && Array.isArray(execution.steps)) {\n\t\t\t\t// Analyze each step in the execution\n\t\t\t\tfor (const step of execution.steps) {\n\t\t\t\t\tif (step.operation && step.actualCost !== null && step.estimatedCost !== 0) {\n\t\t\t\t\t\tconst operation = this._mapOperationToCostFactor(step.operation);\n\t\t\t\t\t\tif (operation) {\n\t\t\t\t\t\t\tif (!operationStats.has(operation)) {\n\t\t\t\t\t\t\t\toperationStats.set(operation, {\n\t\t\t\t\t\t\t\t\tsampleSize: 0,\n\t\t\t\t\t\t\t\t\ttotalActualCost: 0,\n\t\t\t\t\t\t\t\t\ttotalEstimatedCost: 0,\n\t\t\t\t\t\t\t\t\tcosts: [],\n\t\t\t\t\t\t\t\t\testimatedCosts: []\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst stats = operationStats.get(operation);\n\t\t\t\t\t\t\tstats.sampleSize++;\n\t\t\t\t\t\t\tstats.totalActualCost += step.actualCost;\n\t\t\t\t\t\t\tstats.totalEstimatedCost += step.estimatedCost;\n\t\t\t\t\t\t\tstats.costs.push(step.actualCost);\n\t\t\t\t\t\t\tstats.estimatedCosts.push(step.estimatedCost);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Calculate derived statistics\n\t\tfor (const [, stats] of operationStats) {\n\t\t\tstats.avgActualCost = stats.totalActualCost / stats.sampleSize;\n\t\t\tstats.avgEstimatedCost = stats.totalEstimatedCost / stats.sampleSize;\n\n\t\t\t// Calculate consistency (inverse of coefficient of variation)\n\t\t\tconst variance = this._calculateVariance(stats.costs, stats.avgActualCost);\n\t\t\tconst stdDev = Math.sqrt(variance);\n\t\t\tconst coefficientOfVariation = stdDev / stats.avgActualCost;\n\t\t\tstats.consistency = Math.max(0, 1 - coefficientOfVariation);\n\n\t\t\t// Calculate accuracy (how close estimates were to actual)\n\t\t\tconst accuracyScores = stats.costs.map((actual, i) => {\n\t\t\t\tconst estimated = stats.estimatedCosts[i];\n\n\t\t\t\treturn 1 - Math.abs(actual - estimated) / Math.max(actual, estimated);\n\t\t\t});\n\t\t\tstats.accuracy = accuracyScores.reduce((sum, score) => sum + score, 0) / accuracyScores.length;\n\t\t}\n\n\t\treturn operationStats;\n\t}\n\n\t/**\n\t * Map step operation to cost factor name\n\t * @param {string} operation - Operation name from step\n\t * @returns {string|null} Cost factor name\n\t * @private\n\t */\n\t_mapOperationToCostFactor (operation) {\n\t\tconst mapping = {\n\t\t\t\"index_lookup\": \"INDEX_LOOKUP\",\n\t\t\t\"full_scan\": \"FULL_SCAN\",\n\t\t\t\"filter\": \"FILTER_EVALUATION\",\n\t\t\t\"sort\": \"SORT_OPERATION\",\n\t\t\t\"limit\": \"MEMORY_ACCESS\",\n\t\t\t\"regex\": \"REGEX_MATCH\"\n\t\t};\n\n\t\treturn mapping[operation] || null;\n\t}\n\n\t/**\n\t * Calculate variance of a set of values\n\t * @param {number[]} values - Array of values\n\t * @param {number} mean - Mean of the values\n\t * @returns {number} Variance\n\t * @private\n\t */\n\t_calculateVariance (values, mean) {\n\t\tif (values.length <= 1) return 0;\n\n\t\tconst squaredDifferences = values.map(value => Math.pow(value - mean, 2));\n\n\t\treturn squaredDifferences.reduce((sum, diff) => sum + diff, 0) / (values.length - 1);\n\t}\n\n\t/**\n\t * Calculate average query cost from history\n\t * @returns {number} Average query cost\n\t * @private\n\t */\n\t_calculateAverageQueryCost () {\n\t\tif (this.executionHistory.length === 0) return 0;\n\n\t\tconst totalCost = this.executionHistory.reduce((sum, plan) => sum + (plan.totalActualCost || 0), 0);\n\n\t\treturn totalCost / this.executionHistory.length;\n\t}\n\n\t/**\n\t * Calculate cache hit rate\n\t * @returns {number} Cache hit rate (0-1)\n\t * @private\n\t */\n\t_calculateCacheHitRate () {\n\t\tif (this.totalCacheRequests === 0) return 0;\n\n\t\treturn this.cacheHits / this.totalCacheRequests;\n\t}\n}\n","/**\n * Deep immutability implementation with structural sharing\n */\nexport class ImmutableStore {\n\t/**\n\t * @param {Map} [data] - Initial data\n\t */\n\tconstructor (data = new Map()) {\n\t\tthis._data = new Map(data);\n\t\tthis._frozenViews = new WeakMap();\n\t\tObject.freeze(this);\n\t}\n\n\t/**\n\t * Get a deeply frozen view of the data\n\t * @param {string} key - Record key\n\t * @returns {Object|null} Frozen record or null\n\t */\n\tget (key) {\n\t\tconst record = this._data.get(key);\n\t\tif (!record) return null;\n\n\t\t// Check if we already have a frozen view\n\t\tif (this._frozenViews.has(record)) {\n\t\t\treturn this._frozenViews.get(record);\n\t\t}\n\n\t\t// Create deeply frozen view\n\t\tconst frozen = this._deepFreeze(structuredClone(record));\n\t\tthis._frozenViews.set(record, frozen);\n\n\t\treturn frozen;\n\t}\n\n\t/**\n\t * Create new store with updated record (structural sharing)\n\t * @param {string} key - Record key\n\t * @param {Object} record - Record data\n\t * @returns {ImmutableStore} New store instance\n\t */\n\tset (key, record) {\n\t\tconst newData = new Map(this._data);\n\t\tnewData.set(key, record);\n\n\t\treturn new ImmutableStore(newData);\n\t}\n\n\t/**\n\t * Create new store without record\n\t * @param {string} key - Record key to remove\n\t * @returns {ImmutableStore} New store instance\n\t */\n\tdelete (key) {\n\t\tconst newData = new Map(this._data);\n\t\tnewData.delete(key);\n\n\t\treturn new ImmutableStore(newData);\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if exists\n\t */\n\thas (key) {\n\t\treturn this._data.has(key);\n\t}\n\n\t/**\n\t * Get all keys\n\t * @returns {string[]} Array of keys\n\t */\n\tkeys () {\n\t\treturn Array.from(this._data.keys());\n\t}\n\n\t/**\n\t * Get store size\n\t * @returns {number} Number of records\n\t */\n\tget size () {\n\t\treturn this._data.size;\n\t}\n\n\t/**\n\t * Get all entries\n\t * @returns {Array<[string, Object]>} Array of [key, value] pairs\n\t */\n\tentries () {\n\t\treturn Array.from(this._data.entries());\n\t}\n\n\t/**\n\t * Deep freeze an object\n\t * @param {*} obj - Object to freeze\n\t * @returns {*} Frozen object\n\t * @private\n\t */\n\t_deepFreeze (obj) {\n\t\tif (obj === null || typeof obj !== \"object\") {\n\t\t\treturn obj;\n\t\t}\n\n\t\tif (Array.isArray(obj)) {\n\t\t\tobj.forEach(item => this._deepFreeze(item));\n\t\t} else {\n\t\t\tObject.values(obj).forEach(value => this._deepFreeze(value));\n\t\t}\n\n\t\treturn Object.freeze(obj);\n\t}\n}\n","/**\n * Streaming support for large datasets\n */\nexport class DataStream {\n\t/**\n\t * @param {Iterator} iterator - Data iterator\n\t * @param {Object} [options={}] - Stream options\n\t */\n\tconstructor (iterator, options = {}) {\n\t\tthis.iterator = iterator;\n\t\tthis.options = {\n\t\t\tbatchSize: 1000,\n\t\t\tbufferSize: 10000,\n\t\t\t...options\n\t\t};\n\t\tthis.buffer = [];\n\t\tthis.ended = false;\n\t\tthis.position = 0;\n\t}\n\n\t/**\n\t * Read next batch of records\n\t * @param {number} [size] - Batch size\n\t * @returns {Promise<Record[]>} Array of records\n\t */\n\tasync read (size = this.options.batchSize) {\n\t\tconst batch = [];\n\n\t\twhile (batch.length < size && !this.ended) {\n\t\t\tconst { value, done } = this.iterator.next();\n\n\t\t\tif (done) {\n\t\t\t\tthis.ended = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbatch.push(value);\n\t\t\tthis.position++;\n\t\t}\n\n\t\treturn batch;\n\t}\n\n\t/**\n\t * Read all remaining records\n\t * @returns {Promise<Record[]>} All records\n\t */\n\tasync readAll () {\n\t\tconst records = [];\n\n\t\twhile (!this.ended) {\n\t\t\tconst batch = await this.read();\n\t\t\trecords.push(...batch);\n\t\t}\n\n\t\treturn records;\n\t}\n\n\t/**\n\t * Apply transformation to stream\n\t * @param {Function} transform - Transform function\n\t * @returns {DataStream} New transformed stream\n\t */\n\tmap (transform) {\n\t\tconst transformedIterator = {\n\t\t\tnext: () => {\n\t\t\t\tconst { value, done } = this.iterator.next();\n\n\t\t\t\treturn done ? { done: true } : { value: transform(value), done: false };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(transformedIterator, this.options);\n\t}\n\n\t/**\n\t * Filter stream records\n\t * @param {Function} predicate - Filter predicate\n\t * @returns {DataStream} New filtered stream\n\t */\n\tfilter (predicate) {\n\t\tconst filteredIterator = {\n\t\t\tnext: () => {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst { value, done } = this.iterator.next();\n\t\t\t\t\tif (done) return { done: true };\n\t\t\t\t\tif (predicate(value)) return { value, done: false };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(filteredIterator, this.options);\n\t}\n\n\t/**\n\t * Take limited number of records\n\t * @param {number} limit - Maximum records\n\t * @returns {DataStream} New limited stream\n\t */\n\ttake (limit) {\n\t\tlet count = 0;\n\t\tconst limitedIterator = {\n\t\t\tnext: () => {\n\t\t\t\tif (count >= limit) return { done: true };\n\t\t\t\tconst { value, done } = this.iterator.next();\n\t\t\t\tif (done) return { done: true };\n\t\t\t\tcount++;\n\n\t\t\t\treturn { value, done: false };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(limitedIterator, this.options);\n\t}\n\n\t/**\n\t * Get stream statistics\n\t * @returns {Object} Stream statistics\n\t */\n\tgetStats () {\n\t\treturn {\n\t\t\tposition: this.position,\n\t\t\tended: this.ended,\n\t\t\tbufferSize: this.buffer.length,\n\t\t\toptions: this.options\n\t\t};\n\t}\n}\n","import { ImmutableStore } from \"./immutable-store.js\";\n\n/**\n * Manages storage operations with support for both mutable and immutable stores\n */\nexport class StorageManager {\n\t/**\n\t * @param {Object} config - Storage configuration\n\t */\n\tconstructor (config = {}) {\n\t\tthis.config = {\n\t\t\timmutable: false,\n\t\t\t...config\n\t\t};\n\n\t\t// Initialize storage based on configuration\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = new ImmutableStore();\n\t\t} else {\n\t\t\tthis._store = new Map();\n\t\t}\n\t}\n\n\t/**\n\t * Get a record from storage\n\t * @param {string} key - Record key\n\t * @returns {Object|null} Record data or null\n\t */\n\tget (key) {\n\t\treturn this._store.get(key) || null;\n\t}\n\n\t/**\n\t * Set a record in storage\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @returns {boolean} Success status\n\t */\n\tset (key, data) {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = this._store.set(key, data);\n\t\t} else {\n\t\t\tthis._store.set(key, data);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete a record from storage\n\t * @param {string} key - Record key\n\t * @returns {boolean} Success status\n\t */\n\tdelete (key) {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = this._store.delete(key);\n\t\t} else {\n\t\t\tthis._store.delete(key);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if record exists in storage\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if exists\n\t */\n\thas (key) {\n\t\treturn this._store.has(key);\n\t}\n\n\t/**\n\t * Get all storage keys\n\t * @returns {string[]} Array of keys\n\t */\n\tkeys () {\n\t\tif (this.config.immutable) {\n\t\t\treturn this._store.keys();\n\t\t}\n\n\t\treturn Array.from(this._store.keys());\n\t}\n\n\t/**\n\t * Get all storage entries\n\t * @returns {Array<[string, Object]>} Array of [key, value] pairs\n\t */\n\tentries () {\n\t\tif (this.config.immutable) {\n\t\t\treturn this._store.entries();\n\t\t}\n\n\t\treturn Array.from(this._store.entries());\n\t}\n\n\t/**\n\t * Get storage size\n\t * @returns {number} Number of records\n\t */\n\tget size () {\n\t\treturn this._store.size;\n\t}\n\n\t/**\n\t * Clear all storage\n\t */\n\tclear () {\n\t\tif (this.config.immutable) {\n\t\t\tthis._store = new ImmutableStore();\n\t\t} else {\n\t\t\tthis._store.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Get underlying store (for compatibility)\n\t * @returns {Map|ImmutableStore} The underlying store\n\t */\n\tgetStore () {\n\t\treturn this._store;\n\t}\n\n\t/**\n\t * Estimate storage memory usage\n\t * @returns {number} Estimated bytes\n\t */\n\testimateMemoryUsage () {\n\t\tlet dataSize = 0;\n\t\tfor (const [key, value] of this.entries()) {\n\t\t\tdataSize += JSON.stringify({ key, value }).length * 2; // UTF-16 estimate\n\t\t}\n\n\t\treturn dataSize;\n\t}\n}\n","import { randomUUID as uuid } from \"crypto\";\nimport { ValidationError, RecordNotFoundError, HaroError } from \"./errors.js\";\nimport { RecordFactory } from \"./record.js\";\n\n/**\n * Manages CRUD operations with validation and error handling\n */\nexport class CRUDManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {VersionManager} [dependencies.versionManager] - Version manager\n\t * @param {Object} dependencies.config - Configuration\n\t */\n\tconstructor ({ storageManager, indexManager, versionManager = null, config }) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.versionManager = versionManager;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Set or update a record with comprehensive validation and error handling\n\t * @param {string|null} key - Record key or null for auto-generation\n\t * @param {Object} [data={}] - Record data\n\t * @param {Object} [options={}] - Operation options\n\t * @returns {Record} Created/updated record\n\t * @throws {ValidationError} If data validation fails\n\t */\n\tset (key, data = {}, options = {}) {\n\t\ttry {\n\t\t\tconst {\n\t\t\t\toverride = false,\n\t\t\t\tvalidate = true\n\t\t\t} = options;\n\n\t\t\t// Generate key if not provided\n\t\t\tif (key === null) {\n\t\t\t\tkey = data[this.config.key] ?? uuid();\n\t\t\t}\n\n\t\t\t// Ensure key is in data\n\t\t\tconst recordData = { ...data, [this.config.key]: key };\n\n\t\t\t// Validate against schema if configured\n\t\t\tif (validate && this.config.schema) {\n\t\t\t\tthis.config.schema.validate(recordData);\n\t\t\t}\n\n\t\t\t// Get existing record for merging and versioning\n\t\t\tconst existingRecord = this.storageManager.has(key) ? this.storageManager.get(key) : null;\n\t\t\tlet finalData = recordData;\n\n\t\t\t// Handle merging vs override\n\t\t\tif (existingRecord && !override) {\n\t\t\t\tfinalData = this._mergeRecords(existingRecord, recordData);\n\t\t\t}\n\n\t\t\t// Store version if versioning enabled\n\t\t\tif (this.versionManager && existingRecord) {\n\t\t\t\tthis.versionManager.addVersion(key, existingRecord);\n\t\t\t}\n\n\t\t\t// Update indexes\n\t\t\tif (existingRecord) {\n\t\t\t\tthis.indexManager.removeRecord(key, existingRecord);\n\t\t\t}\n\t\t\tthis.indexManager.addRecord(key, finalData);\n\n\t\t\t// Store record\n\t\t\tthis.storageManager.set(key, finalData);\n\n\t\t\t// Create record wrapper\n\t\t\tconst record = RecordFactory.create(key, finalData);\n\n\t\t\treturn record;\n\n\t\t} catch (error) {\n\t\t\tif (error instanceof HaroError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new ValidationError(`Failed to set record: ${error.message}`, \"record\", data);\n\t\t}\n\t}\n\n\t/**\n\t * Get a record by key with consistent return format\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Get options\n\t * @returns {Record|null} Record instance or null if not found\n\t */\n\tget (key, options = {}) {\n\t\tconst { includeVersions = false } = options;\n\n\t\tconst recordData = this.storageManager.get(key);\n\n\t\tif (!recordData) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst record = RecordFactory.create(key, recordData);\n\n\t\t// Add version information if requested\n\t\tif (includeVersions && this.versionManager) {\n\t\t\tconst history = this.versionManager.getHistory(key);\n\t\t\tif (history) {\n\t\t\t\tconst metadata = { versions: history.versions };\n\n\t\t\t\treturn RecordFactory.create(key, recordData, metadata);\n\t\t\t}\n\t\t}\n\n\t\treturn record;\n\t}\n\n\t/**\n\t * Delete a record with proper cleanup\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Delete options\n\t * @returns {boolean} True if deleted successfully\n\t * @throws {RecordNotFoundError} If record not found\n\t */\n\tdelete (key) {\n\t\tif (!this.storageManager.has(key)) {\n\t\t\tthrow new RecordNotFoundError(key, this.config.id);\n\t\t}\n\n\t\tconst recordData = this.storageManager.get(key);\n\n\t\t// Remove from indexes\n\t\tthis.indexManager.removeRecord(key, recordData);\n\n\t\t// Remove from store\n\t\tthis.storageManager.delete(key);\n\n\t\t// Cleanup versions\n\t\tif (this.versionManager) {\n\t\t\tthis.versionManager.disableVersioning(key);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if record exists\n\t */\n\thas (key) {\n\t\treturn this.storageManager.has(key);\n\t}\n\n\t/**\n\t * Merge two records\n\t * @param {Object} existing - Existing record\n\t * @param {Object} updates - Updates to apply\n\t * @returns {Object} Merged record\n\t * @private\n\t */\n\t_mergeRecords (existing, updates) {\n\t\tif (Array.isArray(existing) && Array.isArray(updates)) {\n\t\t\treturn [...existing, ...updates];\n\t\t}\n\n\t\tif (typeof existing === \"object\" && typeof updates === \"object\") {\n\t\t\tconst merged = { ...existing };\n\t\t\tfor (const [key, value] of Object.entries(updates)) {\n\t\t\t\tif (typeof value === \"object\" && value !== null && !Array.isArray(value) &&\n\t\t\t\t\ttypeof existing[key] === \"object\" && existing[key] !== null && !Array.isArray(existing[key])) {\n\t\t\t\t\tmerged[key] = this._mergeRecords(existing[key], value);\n\t\t\t\t} else {\n\t\t\t\t\tmerged[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn merged;\n\t\t}\n\n\t\treturn updates;\n\t}\n}\n","import { QueryError } from \"./errors.js\";\nimport { RecordCollection, RecordFactory } from \"./record.js\";\n\n/**\n * Manages complex querying operations and criteria matching\n */\nexport class QueryManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {QueryOptimizer} [dependencies.queryOptimizer] - Query optimizer\n\t */\n\tconstructor ({ storageManager, indexManager, queryOptimizer = null }) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.queryOptimizer = queryOptimizer;\n\t}\n\n\t/**\n\t * Find records using optimized queries\n\t * @param {Object} [criteria={}] - Search criteria\n\t * @param {Object} [options={}] - Query options\n\t * @returns {RecordCollection} Collection of matching records\n\t */\n\tfind (criteria = {}, options = {}) {\n\t\tconst {\n\t\t\tlimit,\n\t\t\toffset = 0\n\t\t} = options;\n\n\t\ttry {\n\t\t\t// Create query plan if optimizer is available\n\t\t\tlet plan = null;\n\t\t\tif (this.queryOptimizer) {\n\t\t\t\tconst query = { find: criteria, limit, offset };\n\t\t\t\tconst context = { indexManager: this.indexManager };\n\t\t\t\tplan = this.queryOptimizer.createPlan(query, context);\n\t\t\t\tplan.startExecution();\n\t\t\t}\n\n\t\t\t// Use index if available\n\t\t\tconst fields = Object.keys(criteria);\n\t\t\tconst optimalIndex = this.indexManager.getOptimalIndex(fields);\n\n\t\t\tlet recordKeys;\n\t\t\tif (optimalIndex) {\n\t\t\t\trecordKeys = this.indexManager.findByCriteria(criteria);\n\t\t\t} else {\n\t\t\t\t// Fallback to full scan\n\t\t\t\trecordKeys = new Set(this.storageManager.keys());\n\t\t\t}\n\n\t\t\t// Convert to records and filter\n\t\t\tconst records = [];\n\t\t\tfor (const key of recordKeys) {\n\t\t\t\tconst recordData = this.storageManager.get(key);\n\t\t\t\tif (this._matchesCriteria(recordData, criteria)) {\n\t\t\t\t\trecords.push(RecordFactory.create(key, recordData));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply pagination\n\t\t\tconst start = offset;\n\t\t\tconst end = limit ? start + limit : records.length;\n\t\t\tconst paginatedRecords = records.slice(start, end);\n\n\t\t\tif (plan) {\n\t\t\t\tplan.completeExecution(paginatedRecords.length);\n\t\t\t\tthis.queryOptimizer.recordExecution(plan);\n\t\t\t}\n\n\t\t\treturn new RecordCollection(paginatedRecords);\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Find operation failed: ${error.message}`, criteria, \"find\");\n\t\t}\n\t}\n\n\t/**\n\t * Advanced filtering with predicate logic\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\twhere (predicate, options = {}) {\n\t\ttry {\n\t\t\tif (typeof predicate === \"function\") {\n\t\t\t\treturn this._filterByFunction(predicate, options);\n\t\t\t}\n\n\t\t\tif (typeof predicate === \"object\" && predicate !== null) {\n\t\t\t\treturn this._filterByObject(predicate, options);\n\t\t\t}\n\n\t\t\tthrow new QueryError(\"Predicate must be a function or object\", predicate, \"where\");\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Where operation failed: ${error.message}`, predicate, \"where\");\n\t\t}\n\t}\n\n\t/**\n\t * Check if record matches criteria\n\t * @param {Object} record - Record to check\n\t * @param {Object} criteria - Criteria object\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesCriteria (record, criteria) {\n\t\tfor (const [field, value] of Object.entries(criteria)) {\n\t\t\tconst recordValue = record[field];\n\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\tif (!value.test(recordValue)) return false;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (Array.isArray(recordValue)) {\n\t\t\t\t\tif (!value.some(v => recordValue.includes(v))) return false;\n\t\t\t\t} else if (!value.includes(recordValue)) return false;\n\t\t\t} else if (recordValue !== value) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Filter by function predicate\n\t * @param {Function} predicate - Filter function\n\t * @param {Object} options - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t * @private\n\t */\n\t_filterByFunction (predicate, options) {\n\t\tconst { limit, offset = 0 } = options;\n\t\tconst records = [];\n\n\t\tlet count = 0;\n\t\tfor (const [key, recordData] of this.storageManager.entries()) {\n\t\t\tconst record = RecordFactory.create(key, recordData);\n\t\t\tif (predicate(record)) {\n\t\t\t\tif (count >= offset) {\n\t\t\t\t\trecords.push(record);\n\t\t\t\t\tif (limit && records.length >= limit) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\treturn new RecordCollection(records);\n\t}\n\n\t/**\n\t * Filter by object predicate\n\t * @param {Object} predicate - Filter object\n\t * @param {Object} options - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t * @private\n\t */\n\t_filterByObject (predicate, options) {\n\t\treturn this.find(predicate, options);\n\t}\n}\n","import { QueryError, TransactionError } from \"./errors.js\";\n\n/**\n * Manages batch operations with transaction support\n */\nexport class BatchManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {CRUDManager} dependencies.crudManager - CRUD manager\n\t * @param {TransactionManager} [dependencies.transactionManager] - Transaction manager\n\t * @param {LifecycleManager} dependencies.lifecycleManager - Lifecycle manager\n\t */\n\tconstructor ({ crudManager, transactionManager = null, lifecycleManager }) {\n\t\tthis.crudManager = crudManager;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.lifecycleManager = lifecycleManager;\n\t}\n\n\t/**\n\t * Batch operations with transaction support\n\t * @param {Array} operations - Array of operations or records\n\t * @param {string} [type='set'] - Operation type\n\t * @param {Object} [options={}] - Batch options\n\t * @returns {Promise<Array>|Array} Array of results (Promise when using transactions)\n\t */\n\tbatch (operations, type = \"set\", options = {}) {\n\t\tconst {\n\t\t\ttransaction = null,\n\t\t\tatomic = false\n\t\t} = options;\n\n\t\ttry {\n\t\t\t// Use transaction for atomic operations\n\t\t\tif (atomic || transaction) {\n\t\t\t\treturn this._executeBatchInTransaction(operations, type, transaction);\n\t\t\t}\n\n\t\t\t// Execute operations individually\n\t\t\tconst results = [];\n\t\t\tfor (const operation of operations) {\n\t\t\t\ttry {\n\t\t\t\t\tlet result;\n\t\t\t\t\tif (type === \"set\") {\n\t\t\t\t\t\tresult = this.crudManager.set(null, operation, { batch: true });\n\t\t\t\t\t} else if (type === \"del\") {\n\t\t\t\t\t\tthis.crudManager.delete(operation, { batch: true });\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(result);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tresults.push(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Trigger batch lifecycle hook\n\t\t\tthis.lifecycleManager.onbatch(results, type);\n\n\t\t\treturn results;\n\n\t\t} catch (error) {\n\t\t\tthrow new QueryError(`Batch operation failed: ${error.message}`, operations, \"batch\");\n\t\t}\n\t}\n\n\t/**\n\t * Execute batch in transaction\n\t * @param {Array} operations - Operations to execute\n\t * @param {string} type - Operation type\n\t * @param {Transaction} [transaction] - Existing transaction\n\t * @returns {Promise<Array>} Operation results\n\t * @private\n\t */\n\tasync _executeBatchInTransaction (operations, type, transaction) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new TransactionError(\"Transaction manager not available for atomic batch operations\");\n\t\t}\n\n\t\tconst ownTransaction = !transaction;\n\t\tif (ownTransaction) {\n\t\t\ttransaction = this.transactionManager.begin();\n\t\t}\n\n\t\ttry {\n\t\t\tconst results = [];\n\t\t\tfor (const operation of operations) {\n\t\t\t\tif (type === \"set\") {\n\t\t\t\t\tconst result = this._executeSetInTransaction(null, operation, transaction);\n\t\t\t\t\tresults.push(result);\n\t\t\t\t} else if (type === \"del\") {\n\t\t\t\t\tthis._executeDeleteInTransaction(operation, transaction);\n\t\t\t\t\tresults.push(true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ownTransaction) {\n\t\t\t\tawait this.transactionManager.commit(transaction.id);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t} catch (error) {\n\t\t\tif (ownTransaction) {\n\t\t\t\tthis.transactionManager.abort(transaction.id, error.message);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Execute set operation in transaction\n\t * @param {string|null} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Transaction} transaction - Transaction instance\n\t * @returns {Record} Created record\n\t * @private\n\t */\n\t_executeSetInTransaction (key, data, transaction) {\n\t\t// Add operation to transaction log\n\t\tconst oldValue = key ? this.crudManager.storageManager.get(key) : null;\n\t\ttransaction.addOperation(\"set\", key, oldValue, data);\n\n\t\t// Execute operation\n\t\treturn this.crudManager.set(key, data, { batch: true });\n\t}\n\n\t/**\n\t * Execute delete operation in transaction\n\t * @param {string} key - Record key\n\t * @param {Transaction} transaction - Transaction instance\n\t * @private\n\t */\n\t_executeDeleteInTransaction (key, transaction) {\n\t\t// Add operation to transaction log\n\t\tconst oldValue = this.crudManager.storageManager.get(key);\n\t\ttransaction.addOperation(\"delete\", key, oldValue);\n\n\t\t// Execute operation\n\t\tthis.crudManager.delete(key, { batch: true });\n\t}\n}\n","import { DataStream } from \"./data-stream.js\";\n\n/**\n * Manages streaming operations for large datasets\n */\nexport class StreamManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t */\n\tconstructor ({ storageManager }) {\n\t\tthis.storageManager = storageManager;\n\t}\n\n\t/**\n\t * Create a data stream for large datasets\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Data stream instance\n\t */\n\tstream (options = {}) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\tconst iterator = {\n\t\t\tnext: () => {\n\t\t\t\tif (index < entries.length) {\n\t\t\t\t\treturn { value: entries[index++], done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a filtered stream\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Filtered stream\n\t */\n\tstreamWhere (predicate, options = {}) {\n\t\tconst iterator = this._createFilteredIterator(predicate);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a transformed stream\n\t * @param {Function} transform - Transform function\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Transformed stream\n\t */\n\tstreamMap (transform, options = {}) {\n\t\tconst iterator = this._createTransformIterator(transform);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create a limited stream\n\t * @param {number} limit - Maximum number of records\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Limited stream\n\t */\n\tstreamTake (limit, options = {}) {\n\t\tconst iterator = this._createLimitedIterator(limit);\n\n\t\treturn new DataStream(iterator, options);\n\t}\n\n\t/**\n\t * Create iterator for filtered data\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @returns {Iterator} Filtered iterator\n\t * @private\n\t */\n\t_createFilteredIterator (predicate) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\twhile (index < entries.length) {\n\t\t\t\t\tconst [key, value] = entries[index++];\n\n\t\t\t\t\tif (typeof predicate === \"function\") {\n\t\t\t\t\t\tif (predicate({ key, ...value })) {\n\t\t\t\t\t\t\treturn { value: [key, value], done: false };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof predicate === \"object\") {\n\t\t\t\t\t\tif (this._matchesCriteria(value, predicate)) {\n\t\t\t\t\t\t\treturn { value: [key, value], done: false };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create iterator for transformed data\n\t * @param {Function} transform - Transform function\n\t * @returns {Iterator} Transform iterator\n\t * @private\n\t */\n\t_createTransformIterator (transform) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tif (index < entries.length) {\n\t\t\t\t\tconst [key, value] = entries[index++];\n\t\t\t\t\tconst transformed = transform({ key, ...value });\n\n\t\t\t\t\treturn { value: [key, transformed], done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Create iterator for limited data\n\t * @param {number} limit - Record limit\n\t * @returns {Iterator} Limited iterator\n\t * @private\n\t */\n\t_createLimitedIterator (limit) {\n\t\tconst entries = this.storageManager.entries();\n\t\tlet index = 0;\n\n\t\treturn {\n\t\t\tnext: () => {\n\t\t\t\tif (index < limit && index < entries.length) {\n\t\t\t\t\tconst entry = entries[index++];\n\n\t\t\t\t\treturn { value: entry, done: false };\n\t\t\t\t}\n\n\t\t\t\treturn { done: true };\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Check if record matches criteria\n\t * @param {Object} record - Record to check\n\t * @param {Object} criteria - Criteria object\n\t * @returns {boolean} True if matches\n\t * @private\n\t */\n\t_matchesCriteria (record, criteria) {\n\t\tfor (const [field, value] of Object.entries(criteria)) {\n\t\t\tconst recordValue = record[field];\n\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\tif (!value.test(recordValue)) return false;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\tif (Array.isArray(recordValue)) {\n\t\t\t\t\tif (!value.some(v => recordValue.includes(v))) return false;\n\t\t\t\t} else if (!value.includes(recordValue)) return false;\n\t\t\t} else if (recordValue !== value) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","/**\n * Manages statistics gathering and memory usage estimation\n */\nexport class StatisticsManager {\n\t/**\n\t * @param {Object} dependencies - Required dependencies\n\t * @param {StorageManager} dependencies.storageManager - Storage manager\n\t * @param {IndexManager} dependencies.indexManager - Index manager\n\t * @param {VersionManager} [dependencies.versionManager] - Version manager\n\t * @param {TransactionManager} [dependencies.transactionManager] - Transaction manager\n\t * @param {QueryOptimizer} [dependencies.queryOptimizer] - Query optimizer\n\t * @param {Object} dependencies.config - Configuration\n\t */\n\tconstructor ({\n\t\tstorageManager,\n\t\tindexManager,\n\t\tversionManager = null,\n\t\ttransactionManager = null,\n\t\tqueryOptimizer = null,\n\t\tconfig\n\t}) {\n\t\tthis.storageManager = storageManager;\n\t\tthis.indexManager = indexManager;\n\t\tthis.versionManager = versionManager;\n\t\tthis.transactionManager = transactionManager;\n\t\tthis.queryOptimizer = queryOptimizer;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\tconst stats = {\n\t\t\trecords: this.storageManager.size,\n\t\t\tconfiguration: this.config,\n\t\t\tindexes: this.indexManager.getStats(),\n\t\t\tmemory: this._estimateMemoryUsage()\n\t\t};\n\n\t\tif (this.versionManager) {\n\t\t\tstats.versions = this.versionManager.getStats();\n\t\t}\n\n\t\tif (this.transactionManager) {\n\t\t\tstats.transactions = this.transactionManager.getStats();\n\t\t}\n\n\t\tif (this.queryOptimizer) {\n\t\t\tstats.queries = this.queryOptimizer.getStats();\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\t/**\n\t * Get storage statistics\n\t * @returns {Object} Storage statistics\n\t */\n\tgetStorageStats () {\n\t\treturn {\n\t\t\tsize: this.storageManager.size,\n\t\t\tmemoryUsage: this.storageManager.estimateMemoryUsage(),\n\t\t\ttype: this.config.immutable ? \"immutable\" : \"mutable\"\n\t\t};\n\t}\n\n\t/**\n\t * Get index statistics\n\t * @returns {Object} Index statistics\n\t */\n\tgetIndexStats () {\n\t\treturn this.indexManager.getStats();\n\t}\n\n\t/**\n\t * Get version statistics\n\t * @returns {Object|null} Version statistics\n\t */\n\tgetVersionStats () {\n\t\treturn this.versionManager ? this.versionManager.getStats() : null;\n\t}\n\n\t/**\n\t * Get transaction statistics\n\t * @returns {Object|null} Transaction statistics\n\t */\n\tgetTransactionStats () {\n\t\treturn this.transactionManager ? this.transactionManager.getStats() : null;\n\t}\n\n\t/**\n\t * Get query optimization statistics\n\t * @returns {Object|null} Query statistics\n\t */\n\tgetQueryStats () {\n\t\treturn this.queryOptimizer ? this.queryOptimizer.getStats() : null;\n\t}\n\n\t/**\n\t * Get performance metrics\n\t * @returns {Object} Performance metrics\n\t */\n\tgetPerformanceMetrics () {\n\t\tconst stats = this.getStats();\n\n\t\treturn {\n\t\t\trecordsPerIndex: stats.records / Math.max(1, Object.keys(stats.indexes).length),\n\t\t\tmemoryPerRecord: stats.memory.total / Math.max(1, stats.records),\n\t\t\tindexEfficiency: this._calculateIndexEfficiency(stats),\n\t\t\toverheadRatio: stats.memory.overhead / Math.max(1, stats.memory.data)\n\t\t};\n\t}\n\n\t/**\n\t * Estimate memory usage\n\t * @returns {Object} Memory usage statistics\n\t * @private\n\t */\n\t_estimateMemoryUsage () {\n\t\tconst dataSize = this.storageManager.estimateMemoryUsage();\n\t\tconst indexSize = this.indexManager.getStats().totalMemoryUsage || 0;\n\t\tconst versionSize = this.versionManager ? this.versionManager.getStats().totalSize : 0;\n\n\t\treturn {\n\t\t\ttotal: dataSize + indexSize + versionSize,\n\t\t\tdata: dataSize,\n\t\t\tindexes: indexSize,\n\t\t\tversions: versionSize,\n\t\t\toverhead: indexSize + versionSize\n\t\t};\n\t}\n\n\t/**\n\t * Calculate index efficiency\n\t * @param {Object} stats - Statistics object\n\t * @returns {number} Efficiency percentage\n\t * @private\n\t */\n\t_calculateIndexEfficiency (stats) {\n\t\tif (!stats.indexes || !stats.queries) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst totalQueries = stats.queries.totalExecutions || 1;\n\t\tconst indexedQueries = stats.queries.indexedExecutions || 0;\n\n\t\treturn indexedQueries / totalQueries * 100;\n\t}\n\n\t/**\n\t * Generate performance report\n\t * @returns {Object} Performance report\n\t */\n\tgenerateReport () {\n\t\tconst stats = this.getStats();\n\t\tconst performance = this.getPerformanceMetrics();\n\n\t\treturn {\n\t\t\tsummary: {\n\t\t\t\ttotalRecords: stats.records,\n\t\t\t\ttotalMemory: stats.memory.total,\n\t\t\t\tactiveIndexes: Object.keys(stats.indexes).length,\n\t\t\t\tversioning: !!this.versionManager,\n\t\t\t\ttransactions: !!this.transactionManager,\n\t\t\t\toptimization: !!this.queryOptimizer\n\t\t\t},\n\t\t\tperformance,\n\t\t\tbreakdown: {\n\t\t\t\tstorage: this.getStorageStats(),\n\t\t\t\tindexes: this.getIndexStats(),\n\t\t\t\tversions: this.getVersionStats(),\n\t\t\t\ttransactions: this.getTransactionStats(),\n\t\t\t\tqueries: this.getQueryStats()\n\t\t\t},\n\t\t\trecommendations: this._generateRecommendations(stats, performance)\n\t\t};\n\t}\n\n\t/**\n\t * Generate performance recommendations\n\t * @param {Object} stats - Statistics object\n\t * @param {Object} performance - Performance metrics\n\t * @returns {Array} Array of recommendations\n\t * @private\n\t */\n\t_generateRecommendations (stats, performance) {\n\t\tconst recommendations = [];\n\n\t\tif (performance.indexEfficiency < 50) {\n\t\t\trecommendations.push(\"Consider adding more indexes for frequently queried fields\");\n\t\t}\n\n\t\tif (performance.overheadRatio > 2) {\n\t\t\trecommendations.push(\"High memory overhead detected - consider optimizing indexes or version retention\");\n\t\t}\n\n\t\tif (stats.records > 10000 && !this.queryOptimizer) {\n\t\t\trecommendations.push(\"Enable query optimization for better performance with large datasets\");\n\t\t}\n\n\t\tif (stats.memory.versions > stats.memory.data) {\n\t\t\trecommendations.push(\"Version storage is larger than data - consider adjusting retention policy\");\n\t\t}\n\n\t\treturn recommendations;\n\t}\n}\n","import { ValidationError } from \"./errors.js\";\n\n/**\n * Manages lifecycle hooks and events\n */\nexport class LifecycleManager {\n\t/**\n\t * @param {Object} [hooks={}] - Custom lifecycle hooks\n\t */\n\tconstructor (hooks = {}) {\n\t\t// Default no-op hooks\n\t\tthis.hooks = {\n\t\t\tbeforeSet: () => {},\n\t\t\tonset: () => {},\n\t\t\tbeforeDelete: () => {},\n\t\t\tondelete: () => {},\n\t\t\tbeforeClear: () => {},\n\t\t\tonclear: () => {},\n\t\t\tonbatch: () => {},\n\t\t\t...hooks\n\t\t};\n\t}\n\n\t/**\n\t * Register a lifecycle hook\n\t * @param {string} event - Event name\n\t * @param {Function} handler - Event handler\n\t */\n\tregisterHook (event, handler) {\n\t\tif (typeof handler !== \"function\") {\n\t\t\tthrow new ValidationError(`Hook handler for '${event}' must be a function`, \"handler\", handler);\n\t\t}\n\t\tthis.hooks[event] = handler;\n\t}\n\n\t/**\n\t * Unregister a lifecycle hook\n\t * @param {string} event - Event name\n\t */\n\tunregisterHook (event) {\n\t\tthis.hooks[event] = () => {};\n\t}\n\n\t/**\n\t * Execute a lifecycle hook\n\t * @param {string} event - Event name\n\t * @param {...*} args - Arguments to pass to hook\n\t * @returns {*} Hook result\n\t */\n\texecuteHook (event, ...args) {\n\t\tif (this.hooks[event]) {\n\t\t\treturn this.hooks[event](...args);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Before set hook\n\t * @param {string} key - Record key\n\t * @param {Object} data - Record data\n\t * @param {Object} options - Operation options\n\t */\n\tbeforeSet (key, data, options) {\n\t\treturn this.executeHook(\"beforeSet\", key, data, options);\n\t}\n\n\t/**\n\t * On set hook\n\t * @param {Record} record - Created/updated record\n\t * @param {Object} options - Operation options\n\t */\n\tonset (record, options) {\n\t\treturn this.executeHook(\"onset\", record, options);\n\t}\n\n\t/**\n\t * Before delete hook\n\t * @param {string} key - Record key\n\t * @param {boolean} batch - Is batch operation\n\t */\n\tbeforeDelete (key, batch) {\n\t\treturn this.executeHook(\"beforeDelete\", key, batch);\n\t}\n\n\t/**\n\t * On delete hook\n\t * @param {string} key - Deleted record key\n\t */\n\tondelete (key) {\n\t\treturn this.executeHook(\"ondelete\", key);\n\t}\n\n\t/**\n\t * Before clear hook\n\t */\n\tbeforeClear () {\n\t\treturn this.executeHook(\"beforeClear\");\n\t}\n\n\t/**\n\t * On clear hook\n\t */\n\tonclear () {\n\t\treturn this.executeHook(\"onclear\");\n\t}\n\n\t/**\n\t * On batch hook\n\t * @param {Array} results - Batch operation results\n\t * @param {string} type - Operation type\n\t */\n\tonbatch (results, type) {\n\t\treturn this.executeHook(\"onbatch\", results, type);\n\t}\n\n\t/**\n\t * Get all registered hooks\n\t * @returns {Object} Hooks object\n\t */\n\tgetHooks () {\n\t\treturn { ...this.hooks };\n\t}\n\n\t/**\n\t * Check if hook is registered\n\t * @param {string} event - Event name\n\t * @returns {boolean} True if hook exists\n\t */\n\thasHook (event) {\n\t\treturn event in this.hooks && typeof this.hooks[event] === \"function\";\n\t}\n\n\t/**\n\t * Clear all hooks (reset to no-ops)\n\t */\n\tclearHooks () {\n\t\tfor (const event in this.hooks) {\n\t\t\tthis.hooks[event] = () => {};\n\t\t}\n\t}\n}\n","import { randomUUID as uuid } from \"crypto\";\nimport {\n\tConfigurationError,\n\tTransactionError,\n\tErrorRecovery\n} from \"./errors.js\";\nimport { DataTypes } from \"./data-types.js\";\nimport { FieldConstraint } from \"./field-constraint.js\";\nimport { Schema } from \"./schema.js\";\nimport { ConfigValidator } from \"./config-validator.js\";\nimport { Constraints } from \"./constraints.js\";\nimport { IsolationLevels } from \"./constants.js\";\nimport { Record, RecordCollection, RecordFactory } from \"./record.js\";\nimport { IndexManager, IndexTypes } from \"./index-manager.js\";\nimport { VersionManager, RetentionPolicies } from \"./version-manager.js\";\nimport { TransactionManager } from \"./transaction-manager.js\";\nimport { QueryOptimizer, QueryTypes } from \"./query-optimizer.js\";\nimport { ImmutableStore } from \"./immutable-store.js\";\nimport { DataStream } from \"./data-stream.js\";\nimport { StorageManager } from \"./storage-manager.js\";\nimport { CRUDManager } from \"./crud-manager.js\";\nimport { QueryManager } from \"./query-manager.js\";\nimport { BatchManager } from \"./batch-manager.js\";\nimport { StreamManager } from \"./stream-manager.js\";\nimport { StatisticsManager } from \"./statistics-manager.js\";\nimport { LifecycleManager } from \"./lifecycle-manager.js\";\n\n\n/**\n * Haro class with all design flaws addressed and enterprise features added\n */\nexport class Haro {\n\t/**\n\t * @param {Array|Object} [data] - Initial data or configuration\n\t * @param {Object} [config={}] - Configuration options\n\t */\n\tconstructor (data = null, config = {}) {\n\t\t// Set defaults first\n\t\tconst defaults = {\n\t\t\tdelimiter: \"|\",\n\t\t\tid: uuid(),\n\t\t\timmutable: false,\n\t\t\tindex: [],\n\t\t\tkey: \"id\",\n\t\t\tversioning: false,\n\t\t\tschema: null,\n\t\t\tretentionPolicy: { type: RetentionPolicies.NONE },\n\t\t\tenableTransactions: false,\n\t\t\tenableOptimization: true\n\t\t};\n\n\t\t// Handle parameter overloading and merge with defaults\n\t\tlet userConfig;\n\t\tif (Array.isArray(data) || data === null) {\n\t\t\tuserConfig = ConfigValidator.validate(config);\n\t\t\tthis.initialData = data;\n\t\t} else {\n\t\t\tuserConfig = ConfigValidator.validate(data);\n\t\t\tthis.initialData = null;\n\t\t}\n\n\t\t// Merge defaults with user configuration (user config takes precedence)\n\t\tthis.config = { ...defaults, ...userConfig };\n\n\t\t// Initialize core managers\n\t\tthis.storageManager = new StorageManager({ immutable: this.config.immutable });\n\t\tthis.indexManager = new IndexManager(this.config.delimiter);\n\t\tthis.versionManager = this.config.versioning ?\n\t\t\tnew VersionManager(this.config.retentionPolicy) :\n\t\t\tnull;\n\t\tthis.transactionManager = this.config.enableTransactions ?\n\t\t\tnew TransactionManager() :\n\t\t\tnull;\n\t\tthis.queryOptimizer = this.config.enableOptimization ?\n\t\t\tnew QueryOptimizer() :\n\t\t\tnull;\n\n\t\t// Initialize lifecycle manager\n\t\tthis.lifecycleManager = new LifecycleManager();\n\n\t\t// Initialize specialized managers\n\t\tthis.crudManager = new CRUDManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tversionManager: this.versionManager,\n\t\t\tconfig: this.config\n\t\t});\n\n\t\tthis.queryManager = new QueryManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tqueryOptimizer: this.queryOptimizer\n\t\t});\n\n\t\tthis.batchManager = new BatchManager({\n\t\t\tcrudManager: this.crudManager,\n\t\t\ttransactionManager: this.transactionManager,\n\t\t\tlifecycleManager: this.lifecycleManager\n\t\t});\n\n\t\tthis.streamManager = new StreamManager({\n\t\t\tstorageManager: this.storageManager\n\t\t});\n\n\t\tthis.statisticsManager = new StatisticsManager({\n\t\t\tstorageManager: this.storageManager,\n\t\t\tindexManager: this.indexManager,\n\t\t\tversionManager: this.versionManager,\n\t\t\ttransactionManager: this.transactionManager,\n\t\t\tqueryOptimizer: this.queryOptimizer,\n\t\t\tconfig: this.config\n\t\t});\n\n\t\t// Create indexes\n\t\tfor (const indexField of this.config.index) {\n\t\t\tthis.indexManager.createIndex(indexField, indexField);\n\t\t}\n\n\t\t// Properties for backward compatibility\n\t\tObject.defineProperty(this, \"data\", {\n\t\t\tget: () => this.storageManager.getStore(),\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(this, \"size\", {\n\t\t\tget: () => this.storageManager.size,\n\t\t\tenumerable: true\n\t\t});\n\n\t\tObject.defineProperty(this, \"registry\", {\n\t\t\tget: () => this.storageManager.keys(),\n\t\t\tenumerable: true\n\t\t});\n\n\t\t// Initialize with data if provided\n\t\tif (this.initialData && Array.isArray(this.initialData)) {\n\t\t\tthis.batch(this.initialData);\n\t\t}\n\t}\n\n\t/**\n\t * Set or update a record with comprehensive validation and error handling\n\t * @param {string|null} key - Record key or null for auto-generation\n\t * @param {Object} [data={}] - Record data\n\t * @param {Object} [options={}] - Operation options\n\t * @returns {Record} Created/updated record\n\t * @throws {ValidationError} If data validation fails\n\t */\n\tset (key, data = {}, options = {}) {\n\t\tconst {\n\t\t\tbatch = false,\n\t\t\ttransaction = null\n\t\t} = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"set\", key, data, options);\n\t\t}\n\n\t\t// Trigger lifecycle hook\n\t\tthis.lifecycleManager.beforeSet(key, data, options);\n\n\t\t// Delegate to CRUD manager\n\t\tconst record = this.crudManager.set(key, data, options);\n\n\t\t// Trigger lifecycle hook\n\t\tif (!batch) {\n\t\t\tthis.lifecycleManager.onset(record, options);\n\t\t}\n\n\t\treturn record;\n\t}\n\n\t/**\n\t * Get a record by key with consistent return format\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Get options\n\t * @returns {Record|null} Record instance or null if not found\n\t */\n\tget (key, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"get\", key, options);\n\t\t}\n\n\t\t// Delegate to CRUD manager\n\t\treturn this.crudManager.get(key, options);\n\t}\n\n\t/**\n\t * Delete a record with proper cleanup\n\t * @param {string} key - Record key\n\t * @param {Object} [options={}] - Delete options\n\t * @returns {boolean} True if deleted successfully\n\t * @throws {RecordNotFoundError} If record not found\n\t */\n\tdelete (key, options = {}) {\n\t\tconst {\n\t\t\tbatch = false,\n\t\t\ttransaction = null\n\t\t} = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"delete\", key, options);\n\t\t}\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.beforeDelete(key, batch);\n\n\t\t// Delegate to CRUD manager\n\t\tconst result = this.crudManager.delete(key, options);\n\n\t\t// Lifecycle hook\n\t\tif (!batch) {\n\t\t\tthis.lifecycleManager.ondelete(key);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Check if record exists\n\t * @param {string} key - Record key\n\t * @returns {boolean} True if record exists\n\t */\n\thas (key) {\n\t\treturn this.crudManager.has(key);\n\t}\n\n\t/**\n\t * Find records using optimized queries\n\t * @param {Object} [criteria={}] - Search criteria\n\t * @param {Object} [options={}] - Query options\n\t * @returns {RecordCollection} Collection of matching records\n\t */\n\tfind (criteria = {}, options = {}) {\n\t\tconst { transaction = null } = options;\n\n\t\t// Execute in transaction if provided\n\t\tif (transaction) {\n\t\t\treturn this._executeInTransaction(transaction, \"find\", criteria, options);\n\t\t}\n\n\t\t// Delegate to query manager\n\t\treturn this.queryManager.find(criteria, options);\n\t}\n\n\t/**\n\t * Advanced filtering with predicate logic\n\t * @param {Function|Object} predicate - Filter predicate\n\t * @param {Object} [options={}] - Filter options\n\t * @returns {RecordCollection} Filtered records\n\t */\n\twhere (predicate, options = {}) {\n\t\t// Delegate to query manager\n\t\treturn this.queryManager.where(predicate, options);\n\t}\n\n\t/**\n\t * Batch operations with transaction support\n\t * @param {Array} operations - Array of operations or records\n\t * @param {string} [type='set'] - Operation type\n\t * @param {Object} [options={}] - Batch options\n\t * @returns {Promise<Array>|Array} Array of results (Promise when using transactions)\n\t */\n\tbatch (operations, type = \"set\", options = {}) {\n\t\t// Delegate to batch manager\n\t\treturn this.batchManager.batch(operations, type, options);\n\t}\n\n\t/**\n\t * Begin a new transaction\n\t * @param {Object} [options={}] - Transaction options\n\t * @returns {Transaction} New transaction\n\t * @throws {ConfigurationError} If transactions not enabled\n\t */\n\tbeginTransaction (options = {}) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\treturn this.transactionManager.begin(options);\n\t}\n\n\t/**\n\t * Commit a transaction\n\t * @param {string|Transaction} transaction - Transaction ID or instance\n\t * @returns {Transaction} Committed transaction\n\t */\n\tasync commitTransaction (transaction) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\tconst transactionId = typeof transaction === \"string\" ? transaction : transaction.id;\n\n\t\treturn await this.transactionManager.commit(transactionId);\n\t}\n\n\t/**\n\t * Abort a transaction\n\t * @param {string|Transaction} transaction - Transaction ID or instance\n\t * @param {string} [reason] - Abort reason\n\t * @returns {Transaction} Aborted transaction\n\t */\n\tabortTransaction (transaction, reason) {\n\t\tif (!this.transactionManager) {\n\t\t\tthrow new ConfigurationError(\"Transactions not enabled\", \"enableTransactions\", false);\n\t\t}\n\n\t\tconst transactionId = typeof transaction === \"string\" ? transaction : transaction.id;\n\n\t\treturn this.transactionManager.abort(transactionId, reason);\n\t}\n\n\t/**\n\t * Create a data stream for large datasets\n\t * @param {Object} [options={}] - Stream options\n\t * @returns {DataStream} Data stream instance\n\t */\n\tstream (options = {}) {\n\t\t// Delegate to stream manager\n\t\treturn this.streamManager.stream(options);\n\t}\n\n\t/**\n\t * Get comprehensive statistics\n\t * @returns {Object} Statistics object\n\t */\n\tgetStats () {\n\t\t// Delegate to statistics manager\n\t\treturn this.statisticsManager.getStats();\n\t}\n\n\t/**\n\t * Clear all data and reset state\n\t * @param {Object} [options={}] - Clear options\n\t */\n\tclear (options = {}) {\n\t\tconst {\n\t\t\tpreserveIndexes = false,\n\t\t\tpreserveVersions = false\n\t\t} = options;\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.beforeClear();\n\n\t\t// Clear storage\n\t\tthis.storageManager.clear();\n\n\t\t// Clear indexes\n\t\tif (!preserveIndexes) {\n\t\t\tthis.indexManager.clear();\n\t\t}\n\n\t\t// Clear versions\n\t\tif (!preserveVersions && this.versionManager) {\n\t\t\tthis.versionManager.clear();\n\t\t}\n\n\t\t// Clear query cache\n\t\tif (this.queryOptimizer) {\n\t\t\tthis.queryOptimizer.clear();\n\t\t}\n\n\t\t// Lifecycle hook\n\t\tthis.lifecycleManager.onclear();\n\t}\n\n\t// Lifecycle hooks (backward compatibility - delegate to lifecycle manager)\n\tbeforeSet (key, data, options) {\n\t\treturn this.lifecycleManager.beforeSet(key, data, options);\n\t}\n\tonset (record, options) {\n\t\treturn this.lifecycleManager.onset(record, options);\n\t}\n\tbeforeDelete (key, batch) {\n\t\treturn this.lifecycleManager.beforeDelete(key, batch);\n\t}\n\tondelete (key) {\n\t\treturn this.lifecycleManager.ondelete(key);\n\t}\n\tbeforeClear () {\n\t\treturn this.lifecycleManager.beforeClear();\n\t}\n\tonclear () {\n\t\treturn this.lifecycleManager.onclear();\n\t}\n\tonbatch (results, type) {\n\t\treturn this.lifecycleManager.onbatch(results, type);\n\t}\n\n\n\t/**\n\t * Execute operation in transaction\n\t * @param {Transaction} transaction - Transaction instance\n\t * @param {string} operation - Operation type\n\t * @param {...*} args - Operation arguments\n\t * @returns {*} Operation result\n\t * @private\n\t */\n\t_executeInTransaction (transaction, operation, ...args) {\n\t\t// Handle different operation parameter patterns\n\t\tswitch (operation) {\n\t\t\tcase \"set\": {\n\t\t\t\tconst [key, data, options = {}] = args;\n\t\t\t\tconst oldValue = this.storageManager.get(key);\n\n\t\t\t\ttransaction.addOperation(operation, key, oldValue, data);\n\n\t\t\t\treturn this.set(key, data, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"get\": {\n\t\t\t\tconst [key, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", key);\n\n\t\t\t\treturn this.get(key, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"delete\": {\n\t\t\t\tconst [key, options = {}] = args;\n\t\t\t\tconst oldValue = this.storageManager.get(key);\n\n\t\t\t\ttransaction.addOperation(operation, key, oldValue);\n\n\t\t\t\treturn this.delete(key, { ...options, transaction: null });\n\t\t\t}\n\t\t\tcase \"find\": {\n\t\t\t\tconst [criteria, options = {}] = args;\n\n\t\t\t\ttransaction.addOperation(\"read\", \"find_operation\", null, criteria);\n\n\t\t\t\treturn this.find(criteria, { ...options, transaction: null });\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new TransactionError(`Unknown operation: ${operation}`, transaction.id, operation);\n\t\t}\n\t}\n\n}\n\n/**\n * Factory function for creating Haro instances\n * @param {Array|Object} [data] - Initial data or configuration\n * @param {Object} [config={}] - Configuration options\n * @returns {Haro} New Haro instance\n */\nexport function haro (data = null, config = {}) {\n\treturn new Haro(data, config);\n}\n\n// Export types and utilities\nexport {\n\tDataTypes,\n\tFieldConstraint,\n\tSchema,\n\tConstraints,\n\tRecord,\n\tRecordCollection,\n\tRecordFactory,\n\tIndexTypes,\n\tRetentionPolicies,\n\tIsolationLevels,\n\tQueryTypes,\n\tErrorRecovery,\n\tImmutableStore,\n\tDataStream\n};\n\n// Default export\nexport default Haro;\n"],"names":["g","f","exports","module","require","define","amd","globalThis","self","haro","crypto","this","HaroError","Error","constructor","message","code","context","super","name","timestamp","Date","toISOString","captureStackTrace","toJSON","stack","ValidationError","field","value","RecordNotFoundError","key","storeName","IndexError","indexName","operation","ConfigurationError","configKey","configValue","QueryError","query","TransactionError","transactionId","TypeConstraintError","expected","actual","ConcurrencyError","resource","DataTypes","STRING","NUMBER","BOOLEAN","OBJECT","ARRAY","DATE","UUID","EMAIL","URL","ANY","TypeDetector","getValueType","Array","isArray","basicType","isUUID","isEmail","isURL","isTypeMatch","actualType","expectedType","includes","test","url","Boolean","FieldConstraint","type","required","default","defaultValue","validator","min","max","enum","enumValues","pattern","validate","fieldName","undefined","length","join","customResult","Schema","fields","strict","stripUnknown","record","validated","fieldNames","Object","keys","recordKeys","constraint","unknownFields","filter","addField","removeField","ConfigValidator","config","delimiter","id","immutable","index","indexField","versioning","schema","Constraints","requiredString","options","optionalString","requiredNumber","optionalNumber","uuid","email","values","date","TransactionStates","OperationTypes","IsolationLevels","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","LockTypes","Record","data","metadata","_key","_data","_metadata","createdAt","updatedAt","version","freeze","get","has","getFields","update","updates","metadataUpdates","newData","newMetadata","toObject","includeMetadata","result","JSON","stringify","equals","other","clone","structuredClone","getSize","matches","predicate","entries","every","recordValue","RegExp","some","v","toString","Symbol","iterator","RecordCollection","records","_records","at","first","last","map","mapper","find","sort","comparator","slice","start","end","reduce","reducer","initialValue","toArray","toObjects","toPairs","groupBy","keySelector","groups","Map","getKey","set","push","unique","seen","Set","add","forEach","callback","RecordFactory","create","fromObject","keyField","createCollection","items","item","emptyCollection","IndexTypes","SINGLE","COMPOSITE","PARTIAL","IndexDefinition","transform","_determineType","stats","totalKeys","totalEntries","memoryUsage","lastUpdated","suggestedType","generateKeys","_extractKeys","_generateCompositeKeys","String","newKeys","existingKey","val","newKey","updateStats","keyCount","entryCount","memoryDelta","IndexStorage","_storage","_refCounts","indexKey","recordKey","recordSet","remove","removed","delete","newCount","from","getStats","size","_estimateMemoryUsage","clear","IndexManager","_definitions","_indexes","_stats","totalOperations","totalTime","lastOptimized","createIndex","definition","dropIndex","hasIndex","getIndexDefinition","listIndexes","addRecord","recordData","startTime","now","storage","indexKeys","existingRecords","_updatePerformanceStats","removeRecord","updateRecord","oldData","findByIndex","findByCriteria","criteria","indexNames","getOptimalIndex","sortedFields","indexFields","candidates","coverage","a","b","rebuild","indexStats","totalMemory","indexes","totalIndexes","totalMemoryUsage","performance","averageOperationTime","operationTime","RetentionPolicies","COUNT","TIME","SIZE","NONE","VersionEntry","_calculateSize","isOlderThan","maxAge","getTime","getAge","VersionHistory","policy","versions","totalSize","lastAccessed","addVersion","_applyRetentionPolicy","getVersion","getLatest","getOldest","getVersionsInRange","getCount","getTotalSize","count","removeOlderThan","oldCount","cutoffTime","keep","_applyCountPolicy","_applyTimePolicy","_applySizePolicy","maxCount","removeCount","splice","maxSize","shift","versionCount","averageSize","oldestVersion","newestVersion","VersionManager","globalPolicy","_validatePolicy","histories","totalHistories","totalVersions","lastCleanup","cleanupCount","enableVersioning","effectivePolicy","history","disableVersioning","oldSize","getHistory","versionIndex","getLatestVersion","isVersioningEnabled","cleanup","results","historiesProcessed","versionsRemoved","sizeFreed","keysToProcess","newSize","endTime","duration","setGlobalPolicy","historyStats","averageVersionsPerRecord","averageSizePerRecord","keysToExport","exportData","exportedAt","import","merge","historiesImported","versionsImported","errors","historyData","versionData","defineProperty","writable","error","_updateStats","historiesCleared","versionsCleared","validTypes","TransactionOperation","oldValue","newValue","createRollback","Transaction","state","isolationLevel","timeout","readOnly","operations","readSet","writeSet","snapshot","validationCallback","abortReason","seal","begin","addOperation","_checkActive","_isTimedOut","setValidation","commit","abort","reason","getRollbackOperations","reverse","op","isActive","isCommitted","isAborted","getDuration","operationCount","readSetSize","writeSetSize","snapshotSize","timedOut","LockManager","locks","lockTimeout","acquireLock","lockType","_tryAcquireLock","Promise","resolve","setTimeout","existingLock","holders","waiters","releaseLock","lock","releaseAllLocks","released","holdsLocks","totalLocks","sharedLocks","exclusiveLocks","lockHolders","recordsLocked","holder","uniqueHolders","TransactionStatistics","totalTransactions","committedTransactions","abortedTransactions","activeTransactions","averageDuration","totalDuration","incrementTotal","incrementCommitted","incrementAborted","incrementActive","decrementActive","updateDurationStats","transaction","completedTransactions","lockStats","activeCount","transactionCounter","reset","getRawStats","KeyRelationshipAnalyzer","patternCache","semanticCache","areKeysRelated","key1","key2","_hasHierarchicalKeyRelationship","_hasSemanticKeyRelationship","_hasPatternBasedKeyRelationship","_hasCompositeKeyRelationship","_hasTemporalKeyRelationship","_hasIndexKeyRelationship","_hasCollectionKeyRelationship","_hasFunctionalDependency","isKeyInSnapshotRange","operationKey","snapshotKey","expectedValue","_hasExplicitRangeMetadata","_checkExplicitRange","_isPatternBasedSnapshot","_checkPatternBasedRange","_hasHierarchicalRelationship","_checkHierarchicalRange","_isIndexBasedSnapshot","_checkIndexBasedRange","_hasSemanticRelationship","_checkSemanticRange","_isTemporalSnapshot","_checkTemporalRange","_isCompositeKeySnapshot","_checkCompositeKeyRange","keyMatchesRange","range","prefix","startsWith","keyMatchesQuery","queryInfo","keyMatchesIndexRange","indexRange","separators","sep","parts1","split","parts2","_isParentChildRelationship","_isSiblingRelationship","_isAncestorDescendantRelationship","opParts","snapParts","_isCollectionMembership","i","shorter","longer","semantics1","_extractSemanticIdentifiers","semantics2","sem1","sem2","_areSemanticallySimilar","_hasEntityRelationship","semanticPrefixes","toLowerCase","opSemantics","snapSemantics","opSemantic","snapSemantic","cacheKey","identifiers","patterns","match","exec","id1","id2","singularPlural","singular","plural","entityRelations","entity1","entity2","hasEntity1InBoth","hasEntity2InBoth","_haveSimilarPatterns","endsWith","replace","beforeBrace","substring","indexOf","afterBrace","choices","choice","fullPattern","trim","baseKey","pattern1","_extractKeyPattern","pattern2","_patternsAreSimilar","_calculatePatternSimilarity","len1","len2","maxLen","Math","_levenshteinDistance","str1","str2","matrix","j","charAt","temporal1","_extractTemporalComponents","temporal2","_haveTemporalOverlap","keyword","opTemporal","snapTemporal","components","hasDate","hasTime","hasTimestamp","hasEpoch","_hasCompositeKeyOverlap","minLength","allMatch","isIndex1","_isIndexKey","isIndex2","base1","_extractBaseKeyFromIndex","base2","isCollection1","_isCollectionKey","isCollection2","_extractCollectionBase","indicator","collectionKey","indicators","dependencies","norm1","_normalizeKeyForDependency","norm2","dep1","dep2","rangeInfo","predicateInfo","clearCaches","DeadlockDetector","lockManager","keyAnalyzer","detectDeadlocks","opts","useLockGraph","useResourceGraph","useTimeoutDetection","timeoutThreshold","deadlocks","suspectedDeadlocks","timeoutVictims","waitForGraph","resourceGraph","lockDeadlocks","_detectLockBasedDeadlocks","cycles","graph","resourceDeadlocks","_detectResourceDeadlocks","isolationDeadlocks","_detectIsolationDeadlocks","_detectTimeoutVictims","_deduplicateDeadlocks","_buildLockWaitForGraph","_detectCyclesInGraph","cycle","transactions","resources","_getResourcesInvolvedInCycle","tx","lockInfo","waitingTransactions","_findTransactionsWaitingForLock","waitingTx","holderId","waiting","hasOperationOnKey","holdsLock","_buildResourceAllocationGraph","_detectCyclesInResourceGraph","txId","visited","recursionStack","dfs","node","path","cycleStart","neighbors","neighbor","wantedResources","holdingTx","graphCycles","t","tx1","tx2","_hasIsolationConflict","conflict","_getIsolationConflictType","tx1ReadsWhatTx2Writes","_readsOtherWrites","tx2ReadsWhatTx1Writes","reader","writer","readKey","victims","deadlock","signature","_createDeadlockSignature","sortedTransactions","sortedResources","IsolationValidator","validateIsolation","allTransactions","_validateReadCommitted","_validateRepeatableRead","_validateSerializable","writeKey","conflictingTransactions","_findConflictingWrites","_hasReadSetConflict","snapshotValue","_hasSnapshotConflict","conflictingWrites","_findConflictingWritesToRead","conflictingReads","_findConflictingReadsToWrite","excludeTransactionId","conflicting","otherTx","_transactionsOverlap","_hasPhantomConflict","_hasSerializationAnomalyInSnapshot","otherTransaction","_hasWriteSkewAnomaly","_hasDependencyCycle","tx1ReadsRelated","_hasRelatedReads","tx2ReadsRelated","tx1Writes","tx2Writes","k","tx1ReadsTx2Writes","tx2ReadsTx1Writes","tx1Start","tx1End","tx2Start","TransactionManager","statistics","deadlockDetector","isolationValidator","getTransaction","cleaned","getActiveTransactions","resetStats","getComponents","validateTransactionIsolation","checkForDeadlocks","getTransactionDetails","getSystemHealth","deadlockResults","commitRate","hasDeadlocks","lockUtilization","CostFactors","INDEX_LOOKUP","FULL_SCAN","FILTER_EVALUATION","SORT_OPERATION","MEMORY_ACCESS","COMPARISON","REGEX_MATCH","QueryPlanStep","estimatedCost","estimatedRows","actualCost","actualRows","startExecution","endExecution","costAccuracy","abs","rowAccuracy","QueryPlan","queryId","originalQuery","steps","totalEstimatedCost","totalEstimatedRows","totalActualCost","totalActualRows","executedAt","completedAt","addStep","step","completeExecution","stepCount","efficiency","explanation","_generateExplanation","DataStatistics","totalRecords","indexStatistics","fieldStatistics","_updateFieldStatistics","_updateIndexStatistics","getSelectivity","fieldStats","uniqueValues","getIndexCardinality","cardinality","fieldData","nullCount","totalLength","dataType","_inferDataType","avgLength","indexStorage","selectivity","avgEntriesPerKey","sample","types","next","QueryOptimizer","collectStatistics","statisticsUpdateInterval","queryCounter","planCache","executionHistory","maxHistorySize","cacheHits","totalCacheRequests","costAdjustments","lastCostModelUpdate","createPlan","plan","_generateCacheKey","cachedPlan","_isCacheValid","_copyPlan","_buildOptimizedPlan","updateStatistics","recordExecution","_updateCostModel","getOptimalStrategy","costedStrategies","_generateStrategies","strategy","_estimateStrategyCost","_getAdjustedCostFactor","planCacheSize","executionHistorySize","dataStatistics","indexCount","fieldCount","averageQueryCost","_calculateAverageQueryCost","cacheHitRate","_calculateCacheHitRate","cacheStatistics","totalRequests","hits","misses","hitRate","costModel","adjustments","fromEntries","_addIndexLookupSteps","_addFilteredScanSteps","_addFullScanSteps","_addPostProcessingSteps","lookupKey","_estimateIndexLookupRows","filterStep","where","scanType","sortBy","sortStep","sortField","sortFunction","limit","limitStep","offset","strategies","indexManager","optimalIndex","_generateLookupKey","availableIndexes","partialFilter","Number","MAX_SAFE_INTEGER","factorName","originalPlan","newQueryId","newPlan","newStep","operationStats","_analyzeOperationPerformance","sampleSize","currentAdjustment","newAdjustment","performanceRatio","avgActualCost","avgEstimatedCost","consistency","floor","execution","_mapOperationToCostFactor","costs","estimatedCosts","variance","_calculateVariance","coefficientOfVariation","sqrt","accuracyScores","estimated","accuracy","sum","score","index_lookup","full_scan","regex","mean","pow","diff","ImmutableStore","_frozenViews","WeakMap","frozen","_deepFreeze","obj","DataStream","batchSize","bufferSize","buffer","ended","position","read","batch","done","readAll","take","StorageManager","_store","getStore","estimateMemoryUsage","dataSize","CRUDManager","storageManager","versionManager","override","existingRecord","finalData","_mergeRecords","includeVersions","existing","merged","QueryManager","queryOptimizer","_matchesCriteria","paginatedRecords","_filterByFunction","_filterByObject","BatchManager","crudManager","transactionManager","lifecycleManager","atomic","_executeBatchInTransaction","onbatch","ownTransaction","_executeSetInTransaction","_executeDeleteInTransaction","StreamManager","stream","streamWhere","_createFilteredIterator","streamMap","_createTransformIterator","streamTake","_createLimitedIterator","StatisticsManager","configuration","memory","queries","getStorageStats","getIndexStats","getVersionStats","getTransactionStats","getQueryStats","getPerformanceMetrics","recordsPerIndex","memoryPerRecord","total","indexEfficiency","_calculateIndexEfficiency","overheadRatio","overhead","indexSize","versionSize","totalQueries","totalExecutions","indexedExecutions","generateReport","summary","activeIndexes","optimization","breakdown","recommendations","_generateRecommendations","LifecycleManager","hooks","beforeSet","onset","beforeDelete","ondelete","beforeClear","onclear","registerHook","event","handler","unregisterHook","executeHook","args","getHooks","hasHook","clearHooks","Haro","defaults","retentionPolicy","enableTransactions","enableOptimization","userConfig","initialData","queryManager","batchManager","streamManager","statisticsManager","enumerable","_executeInTransaction","beginTransaction","commitTransaction","abortTransaction","preserveIndexes","preserveVersions","ErrorRecovery","isRecoverable","getRecoveryActions","createRecoveryStrategy","actions","retryable","backoffMs","QueryTypes","FIND","FILTER","SEARCH","WHERE","SORT","LIMIT","AGGREGATE"],"mappings":"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"}