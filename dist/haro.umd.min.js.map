{"version":3,"file":"haro.umd.min.js","sources":["../src/constants.js","../src/utils.js","../src/haro.js"],"sourcesContent":["export const STRING_COMMA = \",\";\r\nexport const STRING_EMPTY = \"\";\r\nexport const STRING_PIPE = \"|\";\r\nexport const STRING_DOUBLE_PIPE = \"||\";\r\nexport const STRING_A = \"a\";\r\nexport const STRING_B = \"b\";\r\nexport const STRING_DEL = \"del\";\r\nexport const STRING_FUNCTION = \"function\";\r\nexport const STRING_INDEXES = \"indexes\";\r\nexport const STRING_INVALID_FIELD = \"Invalid field\";\r\nexport const STRING_INVALID_TYPE = \"Invalid type\";\r\nexport const STRING_OBJECT = \"object\";\r\nexport const STRING_RECORD_NOT_FOUND = \"Record not found\";\r\nexport const STRING_RECORDS = \"records\";\r\nexport const STRING_REGISTRY = \"registry\";\r\nexport const STRING_SET = \"set\";\r\nexport const STRING_SIZE = \"size\";\r\nexport const INT_0 = 0;\r\nexport const INT_1 = 1;\r\nexport const INT_3 = 3;\r\nexport const INT_4 = 4;\r\nexport const INT_8 = 8;\r\nexport const INT_9 = 9;\r\nexport const INT_16 = 16;","import {\r\n\tINT_0,\r\n\tINT_1,\r\n\tINT_16,\r\n\tINT_3,\r\n\tINT_4,\r\n\tINT_8,\r\n\tINT_9,\r\n\tSTRING_A,\r\n\tSTRING_B,\r\n\tSTRING_EMPTY,\r\n\tSTRING_OBJECT,\r\n\tSTRING_PIPE\r\n} from \"./constants.js\";\r\n\r\n/* istanbul ignore next */\r\nconst r = [INT_8, INT_9, STRING_A, STRING_B];\r\n\r\n/* istanbul ignore next */\r\nexport function clone (arg) {\r\n\treturn JSON.parse(JSON.stringify(arg, null, INT_0));\r\n}\r\n\r\nexport function each (arr = [], fn) {\r\n\tfor (const [idx, value] of arr.entries()) {\r\n\t\tfn(value, idx);\r\n\t}\r\n\r\n\treturn arr;\r\n}\r\n\r\nexport function indexKeys (arg = STRING_EMPTY, delimiter = STRING_PIPE, data = {}) {\r\n\treturn arg.split(delimiter).reduce((a, li, lidx) => {\r\n\t\tconst result = [];\r\n\r\n\t\t(Array.isArray(data[li]) ? data[li] : [data[li]]).forEach(lli => lidx === INT_0 ? result.push(lli) : a.forEach(x => result.push(`${x}${delimiter}${lli}`)));\r\n\r\n\t\treturn result;\r\n\t}, []);\r\n}\r\n\r\nexport function delIndex (index, indexes, delimiter, key, data) {\r\n\tindex.forEach(i => {\r\n\t\tconst idx = indexes.get(i);\r\n\r\n\t\teach(i.includes(delimiter) ? indexKeys(i, delimiter, data) : Array.isArray(data[i]) ? data[i] : [data[i]], value => {\r\n\t\t\tif (idx.has(value)) {\r\n\t\t\t\tconst o = idx.get(value);\r\n\r\n\t\t\t\to.delete(key);\r\n\r\n\t\t\t\tif (o.size === INT_0) {\r\n\t\t\t\t\tidx.delete(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport function merge (a, b) {\r\n\tif (a instanceof Object && b instanceof Object) {\r\n\t\teach(Object.keys(b), i => {\r\n\t\t\tif (a[i] instanceof Object && b[i] instanceof Object) {\r\n\t\t\t\ta[i] = merge(a[i], b[i]);\r\n\t\t\t} else if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n\t\t\t\ta[i] = a[i].concat(b[i]);\r\n\t\t\t} else {\r\n\t\t\t\ta[i] = b[i];\r\n\t\t\t}\r\n\t\t});\r\n\t} else if (Array.isArray(a) && Array.isArray(b)) {\r\n\t\ta = a.concat(b);\r\n\t} else {\r\n\t\ta = b;\r\n\t}\r\n\r\n\treturn a;\r\n}\r\n\r\n/* istanbul ignore next */\r\nexport function s () {\r\n\treturn ((Math.random() + INT_1) * 0x10000 | INT_0).toString(INT_16).substring(INT_1);\r\n}\r\n\r\nexport function setIndex (index, indexes, delimiter, key, data, indice) {\r\n\teach(indice === null ? index : [indice], i => {\r\n\t\tconst lindex = indexes.get(i);\r\n\r\n\t\tif (i.includes(delimiter)) {\r\n\t\t\teach(indexKeys(i, delimiter, data), c => {\r\n\t\t\t\tif (lindex.has(c) === false) {\r\n\t\t\t\t\tlindex.set(c, new Set());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlindex.get(c).add(key);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\teach(Array.isArray(data[i]) ? data[i] : [data[i]], d => {\r\n\t\t\t\tif (lindex.has(d) === false) {\r\n\t\t\t\t\tlindex.set(d, new Set());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlindex.get(d).add(key);\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction customUUID () {\r\n\treturn `${s()}${s()}-${s()}-4${s().slice(INT_0, INT_3)}-${r[Math.floor(Math.random() * INT_4)]}${s().slice(INT_0, INT_3)}-${s()}${s()}${s()}`;\r\n}\r\n\r\nexport const uuid = typeof crypto === STRING_OBJECT ? crypto.randomUUID.bind(crypto) : customUUID;\r\n","import {clone, delIndex, each, indexKeys, merge, setIndex, uuid} from \"./utils.js\";\r\nimport {\r\n\tINT_0,\r\n\tSTRING_A,\r\n\tSTRING_COMMA,\r\n\tSTRING_DEL,\r\n\tSTRING_DOUBLE_PIPE,\r\n\tSTRING_EMPTY,\r\n\tSTRING_FUNCTION,\r\n\tSTRING_INDEXES,\r\n\tSTRING_INVALID_FIELD,\r\n\tSTRING_INVALID_TYPE,\r\n\tSTRING_PIPE,\r\n\tSTRING_RECORD_NOT_FOUND,\r\n\tSTRING_RECORDS,\r\n\tSTRING_REGISTRY,\r\n\tSTRING_SET,\r\n\tSTRING_SIZE\r\n} from \"./constants.js\";\r\n\r\nexport class Haro {\r\n\tconstructor ({delimiter = STRING_PIPE, id = uuid(), index = [], key = STRING_EMPTY, versioning = false} = {}) {\r\n\t\tthis.data = new Map();\r\n\t\tthis.delimiter = delimiter;\r\n\t\tthis.id = id;\r\n\t\tthis.index = index;\r\n\t\tthis.indexes = new Map();\r\n\t\tthis.key = key;\r\n\t\tthis.versions = new Map();\r\n\t\tthis.versioning = versioning;\r\n\r\n\t\tObject.defineProperty(this, STRING_REGISTRY, {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: () => Array.from(this.data.keys())\r\n\t\t});\r\n\r\n\t\tObject.defineProperty(this, STRING_SIZE, {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: () => this.data.size\r\n\t\t});\r\n\r\n\t\treturn this.reindex();\r\n\t}\r\n\r\n\tbatch (args, type = STRING_SET) {\r\n\t\tconst fn = type === STRING_DEL ? i => this.del(i, true) : i => this.set(null, i, true, true);\r\n\r\n\t\treturn this.onbatch(this.beforeBatch(args, type).map(fn), type);\r\n\t}\r\n\r\n\tbeforeBatch (arg) {\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tbeforeClear () {\r\n\t}\r\n\r\n\tbeforeDelete () {\r\n\t}\r\n\r\n\tbeforeSet () {\r\n\t}\r\n\r\n\tclear () {\r\n\t\tthis.beforeClear();\r\n\t\tthis.data.clear();\r\n\t\tthis.indexes.clear();\r\n\t\tthis.versions.clear();\r\n\t\tthis.reindex().onclear();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdel (key, batch = false) {\r\n\t\tif (this.has(key) === false) {\r\n\t\t\tthrow new Error(STRING_RECORD_NOT_FOUND);\r\n\t\t}\r\n\r\n\t\tconst og = this.get(key, true);\r\n\r\n\t\tthis.beforeDelete(key, batch);\r\n\t\tdelIndex(this.index, this.indexes, this.delimiter, key, og);\r\n\t\tthis.data.delete(key);\r\n\t\tthis.ondelete(key, batch);\r\n\r\n\t\tif (this.versioning) {\r\n\t\t\tthis.versions.delete(key);\r\n\t\t}\r\n\t}\r\n\r\n\tdump (type = STRING_RECORDS) {\r\n\t\tlet result;\r\n\r\n\t\tif (type === STRING_RECORDS) {\r\n\t\t\tresult = Array.from(this.entries());\r\n\t\t} else {\r\n\t\t\tresult = Array.from(this.indexes).map(i => {\r\n\t\t\t\ti[1] = Array.from(i[1]).map(ii => {\r\n\t\t\t\t\tii[1] = Array.from(ii[1]);\r\n\r\n\t\t\t\t\treturn ii;\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn i;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tentries () {\r\n\t\treturn this.data.entries();\r\n\t}\r\n\r\n\tfind (where = {}, raw = false) {\r\n\t\tconst key = Object.keys(where).sort((a, b) => a.localeCompare(b)).join(this.delimiter),\r\n\t\t\tindex = this.indexes.get(key) ?? new Map();\r\n\t\tlet result = [];\r\n\r\n\t\tif (index.size > 0) {\r\n\t\t\tconst keys = indexKeys(key, this.delimiter, where);\r\n\r\n\t\t\tresult = Array.from(keys.reduce((a, v) => {\r\n\t\t\t\tif (index.has(v)) {\r\n\t\t\t\t\tindex.get(v).forEach(k => a.add(k));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn a;\r\n\t\t\t}, new Set())).map(i => this.get(i, raw));\r\n\t\t}\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\tfilter (fn = () => void 0, raw = false) {\r\n\t\tconst x = raw ? (k, v) => v : (k, v) => Object.freeze([k, Object.freeze(v)]),\r\n\t\t\tresult = this.reduce((a, v, k, ctx) => {\r\n\t\t\t\tif (fn.call(ctx, v)) {\r\n\t\t\t\t\ta.push(x(k, v));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn a;\r\n\t\t\t}, []);\r\n\r\n\t\treturn raw ? result : Object.freeze(result);\r\n\t}\r\n\r\n\tforEach (fn, ctx) {\r\n\t\tthis.data.forEach((value, key) => fn(clone(value), clone(key)), ctx ?? this.data);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget (key, raw = false) {\r\n\t\tconst result = clone(this.data.get(key) ?? null);\r\n\r\n\t\treturn raw ? result : this.list(key, result);\r\n\t}\r\n\r\n\thas (key) {\r\n\t\treturn this.data.has(key);\r\n\t}\r\n\r\n\tkeys () {\r\n\t\treturn this.data.keys();\r\n\t}\r\n\r\n\tlimit (offset = INT_0, max = INT_0, raw = false) {\r\n\t\tconst result = this.registry.slice(offset, offset + max).map(i => this.get(i, raw));\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\tlist (...args) {\r\n\t\treturn Object.freeze(args.map(i => Object.freeze(i)));\r\n\t}\r\n\r\n\tmap (fn, raw = false) {\r\n\t\tconst result = [];\r\n\r\n\t\tthis.forEach((value, key) => result.push(fn(value, key)));\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\tonbatch (arg) {\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tonclear () {\r\n\t}\r\n\r\n\tondelete () {\r\n\t}\r\n\r\n\tonoverride () {\r\n\t}\r\n\r\n\tonset () {\r\n\t}\r\n\r\n\toverride (data, type = STRING_RECORDS) {\r\n\t\tconst result = true;\r\n\r\n\t\tif (type === STRING_INDEXES) {\r\n\t\t\tthis.indexes = new Map(data.map(i => [i[0], new Map(i[1].map(ii => [ii[0], new Set(ii[1])]))]));\r\n\t\t} else if (type === STRING_RECORDS) {\r\n\t\t\tthis.indexes.clear();\r\n\t\t\tthis.data = new Map(data);\r\n\t\t} else {\r\n\t\t\tthrow new Error(STRING_INVALID_TYPE);\r\n\t\t}\r\n\r\n\t\tthis.onoverride(type);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\treduce (fn, accumulator, raw = false) {\r\n\t\tlet a = accumulator ?? this.data.keys().next().value;\r\n\r\n\t\tthis.forEach((v, k) => {\r\n\t\t\ta = fn(a, v, k, this, raw);\r\n\t\t}, this);\r\n\r\n\t\treturn a;\r\n\t}\r\n\r\n\treindex (index) {\r\n\t\tconst indices = index ? [index] : this.index;\r\n\r\n\t\tif (index && this.index.includes(index) === false) {\r\n\t\t\tthis.index.push(index);\r\n\t\t}\r\n\r\n\t\teach(indices, i => this.indexes.set(i, new Map()));\r\n\t\tthis.forEach((data, key) => each(indices, i => setIndex(this.index, this.indexes, this.delimiter, key, data, i)));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsearch (value, index, raw = false) {\r\n\t\tconst result = new Map(),\r\n\t\t\tfn = typeof value === STRING_FUNCTION,\r\n\t\t\trgex = value && typeof value.test === STRING_FUNCTION;\r\n\r\n\t\tif (value) {\r\n\t\t\teach(index ? Array.isArray(index) ? index : [index] : this.index, i => {\r\n\t\t\t\tlet idx = this.indexes.get(i);\r\n\r\n\t\t\t\tif (idx) {\r\n\t\t\t\t\tidx.forEach((lset, lkey) => {\r\n\t\t\t\t\t\tswitch (true) {\r\n\t\t\t\t\t\t\tcase fn && value(lkey, i):\r\n\t\t\t\t\t\t\tcase rgex && value.test(Array.isArray(lkey) ? lkey.join(STRING_COMMA) : lkey):\r\n\t\t\t\t\t\t\tcase lkey === value:\r\n\t\t\t\t\t\t\t\tlset.forEach(key => {\r\n\t\t\t\t\t\t\t\t\tif (result.has(key) === false && this.has(key)) {\r\n\t\t\t\t\t\t\t\t\t\tresult.set(key, this.get(key, raw));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tvoid 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn raw ? Array.from(result.values()) : this.list(...Array.from(result.values()));\r\n\t}\r\n\r\n\tset (key = null, data = {}, batch = false, override = false) {\r\n\t\tif (key === null) {\r\n\t\t\tkey = data[this.key] ?? uuid();\r\n\t\t}\r\n\r\n\t\tlet x = {...data, [this.key]: key};\r\n\r\n\t\tthis.beforeSet(key, x, batch, override);\r\n\r\n\t\tif (this.has(key) === false) {\r\n\t\t\tif (this.versioning) {\r\n\t\t\t\tthis.versions.set(key, new Set());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet og = this.get(key, true);\r\n\t\t\tdelIndex(this.index, this.indexes, this.delimiter, key, og);\r\n\r\n\t\t\tif (this.versioning) {\r\n\t\t\t\tthis.versions.get(key).add(Object.freeze(clone(og)));\r\n\t\t\t}\r\n\r\n\t\t\tif (override === false) {\r\n\t\t\t\tx = merge(clone(og), x);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.data.set(key, x);\r\n\t\tsetIndex(this.index, this.indexes, this.delimiter, key, x, null);\r\n\t\tlet result = this.get(key);\r\n\t\tthis.onset(result, batch);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsort (fn, frozen = true) {\r\n\t\treturn frozen ? Object.freeze(this.limit(INT_0, this.data.size, true).sort(fn).map(i => Object.freeze(i))) : this.limit(INT_0, this.data.size, true).sort(fn);\r\n\t}\r\n\r\n\tsortBy (index = STRING_EMPTY, raw = false) {\r\n\t\tif (index === STRING_EMPTY) {\r\n\t\t\tthrow new Error(STRING_INVALID_FIELD)\r\n\t\t}\r\n\r\n\t\tconst result = [],\r\n\t\t\tkeys = [];\r\n\r\n\t\tif (this.indexes.has(index) === false) {\r\n\t\t\tthis.reindex(index);\r\n\t\t}\r\n\r\n\t\tconst lindex = this.indexes.get(index);\r\n\r\n\t\tlindex.forEach((idx, key) => keys.push(key));\r\n\t\teach(keys.sort(), i => lindex.get(i).forEach(key => result.push(this.get(key, raw))));\r\n\r\n\t\treturn raw ? result : this.list(...result);\r\n\t}\r\n\r\n\ttoArray (frozen = true) {\r\n\t\tconst result = Array.from(this.data.values());\r\n\r\n\t\tif (frozen) {\r\n\t\t\teach(result, i => Object.freeze(i));\r\n\t\t\tObject.freeze(result);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tvalues () {\r\n\t\treturn this.data.values();\r\n\t}\r\n\r\n\twhere (predicate = {}, raw = false, op = STRING_DOUBLE_PIPE) {\r\n\t\tconst keys = this.index.filter(i => i in predicate);\r\n\r\n\t\treturn keys.length > INT_0 ? this.filter(new Function(STRING_A, `return (${keys.map(i => {\r\n\t\t\tlet result;\r\n\r\n\t\t\tif (Array.isArray(predicate[i])) {\r\n\t\t\t\tresult = `Array.isArray(a['${i}']) ? ${predicate[i].map(arg => `a['${i}'].includes(${typeof arg === \"string\" ? `'${arg}'` : arg})`).join(` ${op} `)} : (${predicate[i].map(arg => `a['${i}'] === ${typeof arg === \"string\" ? `'${arg}'` : arg}`).join(` ${op} `)})`;\r\n\t\t\t} else if (predicate[i] instanceof RegExp) {\r\n\t\t\t\tresult = `Array.isArray(a['${i}']) ? a['${i}'].filter(i => ${predicate[i]}.test(a['${i}'])).length > 0 : ${predicate[i]}.test(a['${i}'])`;\r\n\t\t\t} else {\r\n\t\t\t\tconst arg = typeof predicate[i] === \"string\" ? `'${predicate[i]}'` : predicate[i];\r\n\r\n\t\t\t\tresult = `Array.isArray(a['${i}']) ? a['${i}'].includes(${arg}) : a['${i}'] === ${arg}`;\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}).join(\") && (\")});`), raw) : [];\r\n\t}\r\n}\r\n\r\nexport function haro (data = null, config = {}) {\r\n\tconst obj = new Haro(config);\r\n\r\n\tif (Array.isArray(data)) {\r\n\t\tobj.batch(data, STRING_SET);\r\n\t}\r\n\r\n\treturn obj;\r\n}\r\n"],"names":["STRING_EMPTY","STRING_PIPE","STRING_FUNCTION","STRING_RECORDS","INT_0","INT_1","INT_16","r","clone","arg","JSON","parse","stringify","each","arr","fn","idx","value","entries","indexKeys","delimiter","data","split","reduce","a","li","lidx","result","Array","isArray","forEach","lli","push","x","delIndex","index","indexes","key","i","get","includes","has","o","delete","size","merge","b","Object","keys","concat","s","Math","random","toString","substring","setIndex","indice","lindex","c","set","Set","add","d","uuid","crypto","randomUUID","bind","slice","floor","Haro","constructor","id","versioning","this","Map","versions","defineProperty","enumerable","from","reindex","batch","args","type","del","onbatch","beforeBatch","map","beforeClear","beforeDelete","beforeSet","clear","onclear","Error","og","ondelete","dump","ii","find","where","raw","sort","localeCompare","join","v","k","list","filter","freeze","ctx","call","limit","offset","max","registry","onoverride","onset","override","accumulator","next","indices","search","rgex","test","lset","lkey","values","frozen","sortBy","toArray","predicate","op","length","Function","RegExp","exports","haro","config","obj"],"mappings":"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"}